{"version":3,"file":"js/settings.1668637965638.8375db2914ef6e28e624.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx","webpack:///./src/containers/task-management/task-list-view.tsx","webpack:///./src/containers/task-management/task_detail.tsx","webpack:///./src/containers/token/token-insights.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n  Label,\n  ButtonVariant,\n} from '@patternfly/react-core';\n\nimport {\n  ExclamationTriangleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  DownloadIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  CollectionVersionAPI,\n  CollectionVersion,\n  CertificateUploadAPI,\n  Repositories,\n  CollectionAPI,\n} from 'src/api';\nimport {\n  errorMessage,\n  filterIsSet,\n  ParamHelper,\n  parsePulpIDFromURL,\n  waitForTask,\n} from 'src/utilities';\nimport {\n  LoadingPageWithHeader,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n  UploadSingCertificateModal,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersion;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections());\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      const { display_signatures } = this.context?.featureFlags || {};\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && version.sign_state === 'signed'\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context?.featureFlags || {};\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {version.sign_state === 'unsigned' &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(version.namespace, version.name, version.version);\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        {this.renderButtons(version)}\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context?.featureFlags || {};\n    if (this.state.updatingVersions.includes(version)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && version.sign_state === 'unsigned';\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button onClick={() => this.openUploadCertificateModal(version)}>\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() =>\n          this.updateCertification(\n            version,\n            Constants.NEEDSREVIEW,\n            Constants.PUBLISHED,\n          )\n        }\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true, Constants.PUBLISHED),\n            rejectDropDown(false, Constants.PUBLISHED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false, Constants.NOTCERTIFIED),\n            rejectDropDown(true, Constants.NOTCERTIFIED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            rejectDropDown(false, Constants.NEEDSREVIEW),\n            importsLink,\n          ]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersion) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const version = this.state.versionToUploadCertificate;\n    const signed_collection = `${PULP_API_BASE_PATH}content/ansible/collection_versions/${version.id}/`;\n\n    return Repositories.getRepository({\n      name: 'staging',\n    })\n      .then((response) =>\n        CertificateUploadAPI.upload({\n          file,\n          repository: response.data.results[0].pulp_href,\n          signed_collection,\n        }),\n      )\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections())\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    this.setState({ updatingVersions: [version] });\n\n    return CollectionVersionAPI.setRepository(\n      version.namespace,\n      version.name,\n      version.version,\n      originalRepo,\n      destinationRepo,\n    )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections())\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            versions: result.data.data,\n            itemCount: result.data.meta.count,\n            loading: false,\n            updatingVersions: [],\n          });\n        })\n        .catch((error) => {\n          this.addAlert(\n            t`Error loading collections.`,\n            'danger',\n            error?.message,\n          );\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }),\n    );\n  }\n\n  private download(namespace: string, name: string, version: string) {\n    CollectionAPI.getDownloadURL('staging', namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n","import { t, Trans } from '@lingui/macro';\nimport { i18n } from '@lingui/core';\n\nimport * as React from 'react';\nimport './task.scss';\nimport { Constants } from 'src/constants';\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  Button,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { ParamHelper, filterIsSet, errorMessage } from '../../utilities';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  closeAlertMixin,\n  ConfirmModal,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  Tooltip,\n  StatusIndicator,\n} from 'src/components';\nimport { TaskManagementAPI } from 'src/api';\nimport { TaskType } from 'src/api/response-types/task';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: Array<TaskType>;\n  itemCount: number;\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  selectedTask: TaskType;\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class TaskListView extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      cancelModalVisible: false,\n      selectedTask: null,\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (!user || user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.queryTasks();\n    }\n\n    if (!hasPermission('core.view_task')) {\n      this.addAlert(\n        t`You do not have permission to view all tasks. Only tasks created by you are visible.`,\n        'info',\n      );\n    }\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      items,\n      alerts,\n      cancelModalVisible,\n      unauthorised,\n    } = this.state;\n\n    const noData =\n      items.length === 0 && !filterIsSet(params, ['name__contains', 'state']);\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader title={t`Task Management`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No tasks yet`}\n            description={t`Tasks will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-list-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) =>\n                              this.updateParams(p, () => this.queryTasks())\n                            }\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name__contains',\n                                title: t`Task name`,\n                              },\n                              {\n                                id: 'state',\n                                title: t`Status`,\n                                inputType: 'select',\n                                options: [\n                                  {\n                                    id: 'completed',\n                                    title: t`Completed`,\n                                  },\n                                  {\n                                    id: 'failed',\n                                    title: t`Failed`,\n                                  },\n                                  {\n                                    id: 'running',\n                                    title: t`Running`,\n                                  },\n                                  {\n                                    id: 'waiting',\n                                    title: t`Waiting`,\n                                  },\n                                ],\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.queryTasks())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.queryTasks());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name__contains: t`Task name`,\n                      state: t`Status`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryTasks())\n                  }\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (items.length === 0) {\n      return <EmptyStateFilter />;\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Task name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Created on`,\n          type: 'numeric',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Started at`,\n          type: 'numeric',\n          id: 'started_at',\n        },\n        {\n          title: t`Finished at`,\n          type: 'numeric',\n          id: 'finished_at',\n        },\n        {\n          title: t`Status`,\n          type: 'alpha',\n          id: 'state',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Task list`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => this.updateParams(p, () => this.queryTasks())}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, state, pulp_created, started_at, finished_at, pulp_href } =\n      item;\n    const taskId = parsePulpIDFromURL(pulp_href);\n    return (\n      <tr key={index}>\n        <td>\n          <Link to={formatPath(Paths.taskDetail, { task: taskId })}>\n            <Tooltip\n              content={\n                (Constants.TASK_NAMES[name] &&\n                  i18n._(Constants.TASK_NAMES[name])) ||\n                name\n              }\n            >\n              {name}\n            </Tooltip>\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <DateComponent date={started_at} />\n        </td>\n        <td>\n          <DateComponent date={finished_at} />\n        </td>\n        <td>\n          <StatusIndicator status={state} />\n        </td>\n        <td>{this.cancelButton(state, item)}</td>\n      </tr>\n    );\n  }\n\n  private cancelButton(state, selectedTask) {\n    switch (state) {\n      case 'running':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n      case 'waiting':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n    }\n  }\n\n  private renderCancelModal() {\n    const name =\n      Constants.TASK_NAMES[this.state.selectedTask.name] ||\n      this.state.selectedTask.name;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        title={t`Stop task?`}\n        confirmAction={() => this.selectedTask(this.state.selectedTask, name)}\n        confirmButtonTitle={t`Yes, stop`}\n      >{t`${name} will be cancelled.`}</ConfirmModal>\n    );\n  }\n\n  private selectedTask(task, name) {\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          selectedTask: null,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: name,\n              description: (\n                <Trans>Task &quot;{name}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.queryTasks();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${name}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private queryTasks() {\n    this.setState({ loading: true }, () => {\n      TaskManagementAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Tasks list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              },\n            ],\n          });\n        });\n    });\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(TaskListView);\n\nTaskListView.contextType = AppContext;\n","import * as React from 'react';\nimport './task.scss';\nimport { i18n } from '@lingui/core';\nimport { t, Trans } from '@lingui/macro';\nimport {\n  Link,\n  withRouter,\n  Redirect,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  Breadcrumbs,\n  closeAlertMixin,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateCustom,\n  LoadingPageSpinner,\n  Main,\n  StatusIndicator,\n} from 'src/components';\nimport {\n  Button,\n  CodeBlock,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Title,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\nimport { TaskType } from 'src/api/response-types/task';\nimport { GenericPulpAPI, TaskManagementAPI } from 'src/api';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport { capitalize } from 'lodash';\nimport { errorMessage } from 'src/utilities';\n\ninterface IState {\n  loading: boolean;\n  task: TaskType;\n  parentTask: TaskType;\n  childTasks: TaskType[];\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  taskName: string;\n  resources: { name: string; type: string }[];\n  redirect: string;\n  polling: ReturnType<typeof setInterval>;\n}\n\nclass TaskDetail extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      task: null,\n      parentTask: null,\n      childTasks: [],\n      alerts: [],\n      cancelModalVisible: false,\n      taskName: '',\n      resources: [],\n      redirect: null,\n      polling: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  componentWillUnmount() {\n    if (this.state.polling) {\n      clearInterval(this.state.polling);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params['task'] !== this.props.match.params['task']) {\n      this.setState({ loading: true });\n      this.loadContent();\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      task,\n      parentTask,\n      childTasks,\n      cancelModalVisible,\n      alerts,\n      taskName,\n      resources,\n      redirect,\n    } = this.state;\n    const breadcrumbs = [\n      { url: Paths.taskList, name: t`Task management` },\n      { name: task ? taskName : '' },\n    ];\n    let parentTaskId = null;\n    if (parentTask) {\n      parentTaskId = parsePulpIDFromURL(parentTask.pulp_href);\n    }\n    if (redirect) {\n      return <Redirect to={redirect}></Redirect>;\n    }\n\n    return loading ? (\n      <LoadingPageSpinner />\n    ) : (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader\n          title={taskName}\n          breadcrumbs={<Breadcrumbs links={breadcrumbs}></Breadcrumbs>}\n          pageControls={\n            ['running', 'waiting'].includes(task.state) && (\n              <Button\n                variant='secondary'\n                onClick={() => this.setState({ cancelModalVisible: true })}\n              >\n                {t`Stop task`}\n              </Button>\n            )\n          }\n          status={\n            <StatusIndicator\n              className={'hub-c-task-status'}\n              status={task.state}\n            />\n          }\n        />\n        <Main>\n          <Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task detail`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task name`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.name}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    {task.name !== taskName && (\n                      <DescriptionListGroup>\n                        <DescriptionListTerm>{t`Descriptive name`}</DescriptionListTerm>\n                        <DescriptionListDescription>\n                          {taskName}\n                        </DescriptionListDescription>\n                      </DescriptionListGroup>\n                    )}\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Finished at`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.finished_at} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Created on`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.pulp_created} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task groups`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task group`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.task_group ? task.task_group : t`No task group`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Parent task`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {parentTask ? (\n                          <Link\n                            to={formatPath(Paths.taskDetail, {\n                              task: parentTaskId,\n                            })}\n                          >\n                            {(Constants.TASK_NAMES[parentTask.name] &&\n                              i18n._(Constants.TASK_NAMES[parentTask.name])) ||\n                              parentTask.name}\n                          </Link>\n                        ) : (\n                          t`No parent task`\n                        )}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Child tasks`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {childTasks.length\n                          ? childTasks.map((childTask) => {\n                              const childTaskId = parsePulpIDFromURL(\n                                childTask.pulp_href,\n                              );\n                              return (\n                                <React.Fragment key={childTaskId}>\n                                  <Link\n                                    to={formatPath(Paths.taskDetail, {\n                                      task: childTaskId,\n                                    })}\n                                  >\n                                    {(Constants.TASK_NAMES[childTask.name] &&\n                                      i18n._(\n                                        Constants.TASK_NAMES[childTask.name],\n                                      )) ||\n                                      childTask.name}\n                                  </Link>\n                                  <br />\n                                </React.Fragment>\n                              );\n                            })\n                          : t`No child task`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Reserve resources`}\n                  </Title>\n                  <br />\n                  {resources.length ? (\n                    <DescriptionList isHorizontal>\n                      {resources.map((resource, index) => {\n                        return (\n                          <React.Fragment key={resource.type + index}>\n                            <hr />\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>{t`Type`}</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {resource.type}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            {resource.name && (\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>{t`Name`}</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {resource.name}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                          </React.Fragment>\n                        );\n                      })}\n                    </DescriptionList>\n                  ) : (\n                    t`There's no resource record`\n                  )}\n                </section>\n              </FlexItem>\n            </Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                {!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Progress messages`}\n                    </Title>\n                    <br />\n                    {task.progress_reports.length ? (\n                      <DescriptionList isHorizontal>\n                        {task.progress_reports\n                          .reverse()\n                          .map((report, index) => {\n                            return (\n                              <React.Fragment key={index}>\n                                <hr />\n                                {Object.keys(report).map((key, index) => {\n                                  return (\n                                    !!report[key] && (\n                                      <DescriptionListGroup key={key + index}>\n                                        <DescriptionListTerm>\n                                          {{\n                                            message: t`Message`,\n                                            code: t`Code`,\n                                            state: t`State`,\n                                            done: t`Done`,\n                                          }[key] || capitalize(key)}\n                                        </DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                          {report[key]}\n                                        </DescriptionListDescription>\n                                      </DescriptionListGroup>\n                                    )\n                                  );\n                                })}{' '}\n                              </React.Fragment>\n                            );\n                          })}\n                      </DescriptionList>\n                    ) : (\n                      <EmptyStateCustom\n                        icon={CubesIcon}\n                        title={t`There is no progress message.`}\n                        description={t`There is no progress message.`}\n                      />\n                    )}\n                  </section>\n                )}\n                {!!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Error message`}\n                    </Title>\n                    <br />\n                    <React.Fragment>\n                      <Title headingLevel='h3'>{t`Description`}</Title>\n                      <CodeBlock>{task.error.description}</CodeBlock>\n                      <Title headingLevel='h3'>{t`Traceback`}</Title>\n                      <CodeBlock className={'hub-code-block'}>\n                        {task.error.traceback}\n                      </CodeBlock>\n                    </React.Fragment>\n                  </section>\n                )}\n              </FlexItem>\n            </Flex>\n          </Flex>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderCancelModal() {\n    const name = this.state.taskName;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        confirmAction={() => this.cancelTask()}\n        title={t`Stop task`}\n        confirmButtonTitle={t`Yes, stop`}\n      >\n        {t`${name} will stop running.`}\n      </ConfirmModal>\n    );\n  }\n\n  private cancelTask() {\n    const { task, taskName } = this.state;\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: taskName,\n              description: (\n                <Trans>Task &quot;{taskName}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.loadContent();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${taskName}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n        this.loadContent();\n      });\n  }\n\n  private loadContent() {\n    if (!this.state.polling && !this.state.task) {\n      this.setState({ polling: setInterval(() => this.loadContent(), 10000) });\n    }\n\n    const taskId = this.props.match.params['task'];\n    return TaskManagementAPI.get(taskId)\n      .then((result) => {\n        const allRelatedTasks = [];\n        let parentTask = null;\n        const childTasks = [];\n        const resources = [];\n        if (['canceled', 'completed', 'failed'].includes(result.data.state)) {\n          clearInterval(this.state.polling);\n          this.setState({ polling: null });\n        }\n        if (result.data.parent_task) {\n          const parentTaskId = parsePulpIDFromURL(result.data.parent_task);\n          allRelatedTasks.push(\n            TaskManagementAPI.get(parentTaskId)\n              .then((result) => {\n                parentTask = result.data;\n              })\n              .catch(() => {\n                return true;\n              }),\n          );\n        }\n        if (result.data.child_tasks.length) {\n          result.data.child_tasks.forEach((child) => {\n            const childTaskId = parsePulpIDFromURL(child);\n            allRelatedTasks.push(\n              TaskManagementAPI.get(childTaskId)\n                .then((result) => {\n                  childTasks.push(result.data);\n                })\n                .catch(() => {\n                  return true;\n                }),\n            );\n          });\n        }\n        if (result.data.reserved_resources_record.length) {\n          result.data.reserved_resources_record.forEach((resource) => {\n            const url = resource.replace(PULP_API_BASE_PATH, '');\n            const id = parsePulpIDFromURL(url);\n            const urlParts = resource.split('/');\n            const type = id ? urlParts[4] : urlParts[urlParts.length - 2];\n            if (id) {\n              allRelatedTasks.push(\n                GenericPulpAPI.get(url)\n                  .then((result) => {\n                    resources.push({ name: result.data.name, type });\n                  })\n                  .catch(() => {\n                    return true;\n                  }),\n              );\n            } else {\n              resources.push({ type });\n            }\n          });\n        }\n        return Promise.all(allRelatedTasks).then(() => {\n          this.setState({\n            task: result.data,\n            childTasks,\n            parentTask,\n            loading: false,\n            taskName:\n              (Constants.TASK_NAMES[result.data.name] &&\n                i18n._(Constants.TASK_NAMES[result.data.name])) ||\n              result.data.name,\n            resources,\n          });\n        });\n      })\n      .catch(() => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TaskDetail);\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { ClipboardCopyVariant, Button } from '@patternfly/react-core';\n\nimport { Paths } from 'src/paths';\nimport {\n  BaseHeader,\n  Main,\n  ClipboardCopy,\n  AlertList,\n  AlertType,\n  closeAlertMixin,\n} from 'src/components';\nimport { errorMessage, getRepoUrl } from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\nimport { MyDistributionAPI } from 'src/api';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n  alerts: AlertType[];\n  repoUrl: string;\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n      alerts: [],\n      repoUrl: '',\n    };\n  }\n\n  private getMyDistributionPath() {\n    MyDistributionAPI.list()\n      .then(({ data }) => {\n        const syncDistro =\n          data.data.find(({ base_path }) => base_path.includes('synclist'))\n            ?.base_path || '';\n        this.setState({\n          repoUrl: syncDistro,\n        });\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          repoUrl: '',\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Server URL could not be displayed.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    // so it never works the first time .. loadToken() causes a reload and then it works => no error handling\n    window.insights.chrome.auth.getOfflineToken().then((result) => {\n      this.setState({ tokenData: result.data });\n    });\n\n    this.getMyDistributionPath();\n  }\n\n  render() {\n    const { tokenData, alerts } = this.state;\n    const renewTokenCmd = `curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=\"cloud-services\" -d refresh_token=\"${\n      tokenData?.refresh_token ?? '{{ user_token }}'\n    }\" --fail --silent --show-error --output /dev/null`;\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <BaseHeader title={t`Connect to Hub`}></BaseHeader>\n        <Main>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect Private Automation Hub`}</h2>\n            <p>\n              <Trans>\n                Use the{' '}\n                <Link to={Paths.repositories}>Repository Management</Link> page\n                to sync collections curated by your organization to the Red Hat\n                Certified repository in your private Automation Hub. Users with\n                the correct permissions can use the sync toggles on the{' '}\n                <Link to={Paths.search}>Collections</Link> page to control which\n                collections are added to their organization&apos;s sync\n                repository.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect the ansible-galaxy client`}</h2>\n            <p>\n              <Trans>\n                Documentation on how to configure the{' '}\n                <code>ansible-galaxy</code> client can be found{' '}\n                <a\n                  href='https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/'\n                  target='_blank'\n                  rel='noreferrer'\n                >\n                  here\n                </a>\n                . Use the following parameters to configure the client.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Offline token`}</h2>\n            <p>\n              <Trans>\n                Use this token to authenticate clients that need to download\n                content from Automation Hub. This is a secret token used to\n                protect your content. Store your API token in a secure location.\n              </Trans>\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <div>\n                <Button\n                  onClick={() => this.loadToken()}\n                >{t`Load token`}</Button>\n              </div>\n            )}\n            <div\n              className='pf-c-content'\n              style={{ paddingTop: 'var(--pf-global--spacer--md)' }}\n            >\n              <span>\n                <Trans>\n                  The token will expire after 30 days of inactivity. Run the\n                  command below periodically to prevent your token from\n                  expiring.\n                </Trans>\n              </span>\n              <ClipboardCopy\n                isCode\n                isReadOnly\n                variant={ClipboardCopyVariant.expansion}\n              >\n                {renewTokenCmd}\n              </ClipboardCopy>\n            </div>\n            <h2>{t`Manage tokens`}</h2>\n            <Trans>\n              To revoke a token or see all of your tokens, visit the{' '}\n              <a\n                href='https://sso.redhat.com/auth/realms/redhat-external/account/applications'\n                target='_blank'\n                rel='noreferrer'\n              >\n                offline API token management\n              </a>{' '}\n              page.\n            </Trans>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Server URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the API endpoints that clients need to\n                download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              {getRepoUrl(this.state.repoUrl)}\n            </ClipboardCopy>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`SSO URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the authentication URLs that clients\n                need to download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n            </ClipboardCopy>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    // doOffline causes the page to refresh and will make the data\n    // available to getOfflineToken() when the component mounts after\n    // the reload\n    window.insights.chrome.auth.doOffline();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TokenPage);\nTokenPage.contextType = AppContext;\n"],"names":["CertificationDashboard","props","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","this","context","user","hasPermission","is_anonymous","queryCollections","setState","title","closeAlert","i","className","Toolbar","ToolbarGroup","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","inputType","options","Constants","count","isTop","ignoredParams","niceValues","repository","niceNames","renderTable","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","length","filterIsSet","description","sortTableOptions","headers","type","map","version","renderRow","includes","repository_list","display_signatures","featureFlags","Label","variant","color","icon","sign_state","can_upload_signatures","require_upload_signatures","index","key","namespace","name","Link","to","formatPath","Paths","collection","repo","Button","ButtonVariant","onClick","download","date","created_at","renderStatus","renderButtons","collection_auto_sign","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","updateCertification","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","originalRepo","rejectDropDown","kebabItems","buttons","file","signed_collection","PULP_API_BASE_PATH","Repositories","then","response","CertificateUploadAPI","data","results","pulp_href","result","waitForTask","parsePulpIDFromURL","task","addAlert","error","errorMessage","status","statusText","destinationRepo","CollectionVersionAPI","remove_task_id","waitMs","meta","message","CollectionAPI","downloadURL","window","assign","closeAlertMixin","React","withRouter","contextType","AppContext","TaskListView","items","cancelModalVisible","selectedTask","unauthorised","queryTasks","noData","renderCancelModal","ToolbarContent","name__contains","item","renderTableRow","pulp_created","started_at","finished_at","taskId","content","i18n","cancelButton","cancelAction","confirmAction","confirmButtonTitle","TaskManagementAPI","e","TaskDetail","parentTask","childTasks","taskName","resources","redirect","polling","loadContent","clearInterval","prevProps","match","breadcrumbs","url","parentTaskId","Redirect","links","pageControls","Flex","direction","default","flex","FlexItem","Title","headingLevel","size","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","task_group","childTask","childTaskId","resource","progress_reports","reverse","report","Object","keys","code","done","CubesIcon","CodeBlock","traceback","cancelTask","setInterval","allRelatedTasks","parent_task","push","child_tasks","forEach","child","reserved_resources_record","replace","urlParts","split","GenericPulpAPI","Promise","all","TokenPage","tokenData","repoUrl","MyDistributionAPI","syncDistro","find","base_path","insights","chrome","auth","getOfflineToken","getMyDistributionPath","renewTokenCmd","refresh_token","href","target","rel","loadToken","style","paddingTop","isCode","isReadOnly","ClipboardCopyVariant","getRepoUrl","doOffline"],"sourceRoot":""}
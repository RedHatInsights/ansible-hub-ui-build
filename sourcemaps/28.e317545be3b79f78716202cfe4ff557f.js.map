{"version":3,"file":"js/28.ff811684eec686178142.js","mappings":"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","sources":["webpack:///./src/containers/task-management/task-list-view.tsx"],"sourcesContent":["import { i18n } from '@lingui/core';\nimport { Trans, t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { TaskManagementAPI, TaskType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  StatusIndicator,\n  Tooltip,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  withRouter,\n} from 'src/utilities';\nimport './task.scss';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: TaskType[];\n  itemCount: number;\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  selectedTask: TaskType;\n  unauthorised: boolean;\n  inputText: string;\n}\n\nconst maybeTranslate = (name) =>\n  (Constants.TASK_NAMES[name] && i18n._(Constants.TASK_NAMES[name])) || name;\n\nexport class TaskListView extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      cancelModalVisible: false,\n      selectedTask: null,\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    const { user } = this.context;\n    if (!user || user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.queryTasks();\n    }\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      items,\n      alerts,\n      cancelModalVisible,\n      unauthorised,\n    } = this.state;\n\n    const noData =\n      items.length === 0 && !filterIsSet(params, ['name__contains', 'state']);\n\n    return (\n      <React.Fragment>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader title={t`Task Management`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No tasks yet`}\n            description={t`Tasks will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) =>\n                              this.updateParams(p, () => this.queryTasks())\n                            }\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name__contains',\n                                title: t`Task name`,\n                              },\n                              {\n                                id: 'state',\n                                title: t`Status`,\n                                inputType: 'select',\n                                options: [\n                                  {\n                                    id: 'completed',\n                                    title: t`Completed`,\n                                  },\n                                  {\n                                    id: 'failed',\n                                    title: t`Failed`,\n                                  },\n                                  {\n                                    id: 'running',\n                                    title: t`Running`,\n                                  },\n                                  {\n                                    id: 'waiting',\n                                    title: t`Waiting`,\n                                  },\n                                ],\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.queryTasks())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.queryTasks());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name__contains: t`Task name`,\n                      state: t`Status`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryTasks())\n                  }\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (items.length === 0) {\n      return <EmptyStateFilter />;\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Task name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Created on`,\n          type: 'numeric',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Started at`,\n          type: 'numeric',\n          id: 'started_at',\n        },\n        {\n          title: t`Finished at`,\n          type: 'numeric',\n          id: 'finished_at',\n        },\n        {\n          title: t`Status`,\n          type: 'alpha',\n          id: 'state',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Task list`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => this.updateParams(p, () => this.queryTasks())}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, state, pulp_created, started_at, finished_at, pulp_href } =\n      item;\n    const taskId = parsePulpIDFromURL(pulp_href);\n    return (\n      <tr key={index}>\n        <td>\n          <Link to={formatPath(Paths.taskDetail, { task: taskId })}>\n            <Tooltip content={maybeTranslate(name)}>{name}</Tooltip>\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <DateComponent date={started_at} />\n        </td>\n        <td>\n          <DateComponent date={finished_at} />\n        </td>\n        <td>\n          <StatusIndicator status={state} />\n        </td>\n        <td>{this.cancelButton(state, item)}</td>\n      </tr>\n    );\n  }\n\n  private cancelButton(state, selectedTask) {\n    switch (state) {\n      case 'running':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n      case 'waiting':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n    }\n  }\n\n  private renderCancelModal() {\n    const { selectedTask } = this.state;\n    const name = maybeTranslate(selectedTask.name);\n\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        title={t`Stop task?`}\n        confirmAction={() => this.selectedTask(this.state.selectedTask, name)}\n        confirmButtonTitle={t`Yes, stop`}\n      >{t`${name} will be cancelled.`}</ConfirmModal>\n    );\n  }\n\n  private selectedTask(task, name) {\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          selectedTask: null,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: name,\n              description: (\n                <Trans>Task &quot;{name}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.queryTasks();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${name}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private queryTasks() {\n    this.setState({ loading: true }, () => {\n      TaskManagementAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Tasks list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              },\n            ],\n          });\n        });\n    });\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(TaskListView);\n\nTaskListView.contextType = AppContext;\n"],"names":["maybeTranslate","name","Constants","TASK_NAMES","i18n","_","TaskListView","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","state","items","loading","itemCount","alerts","cancelModalVisible","selectedTask","unauthorised","inputText","_createClass","key","value","user","this","context","is_anonymous","setState","queryTasks","_this2","_this$state","noData","length","filterIsSet","React","AlertList","closeAlert","i","renderCancelModal","BaseHeader","title","id","EmptyStateUnauthorized","EmptyStateNoData","description","Main","LoadingPageSpinner","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","inputType","options","Pagination","count","isTop","AppliedFilters","ignoredParams","niceNames","name__contains","renderTable","_this3","EmptyStateFilter","sortTableOptions","headers","type","SortTable","map","item","renderTableRow","index","pulp_created","started_at","finished_at","pulp_href","taskId","parsePulpIDFromURL","Link","to","formatPath","Paths","taskDetail","task","Tooltip","content","DateComponent","date","StatusIndicator","status","cancelButton","_this4","Button","variant","onClick","_this5","ConfirmModal","cancelAction","confirmAction","confirmButtonTitle","values","_this6","TaskManagementAPI","patch","then","concat","_toConsumableArray","Trans","e","_e$response","response","statusText","errorMessage","get","closeAlertMixin","_this7","list","result","data","results","_e$response2","updateParamsMixin","withRouter","contextType","AppContext"],"sourceRoot":""}
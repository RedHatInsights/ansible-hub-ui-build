{"version":3,"file":"js/2613.5b726cdb98db9579f10d.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  HubListToolbar,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  NamespaceNextPageCard,\n  Pagination,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n} from 'src/utilities';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n}\n\ninterface IProps extends RouteProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: this.context.alerts || [] });\n    this.context.setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading } = this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader />;\n    }\n\n    // Namespaces or Partners\n    const title = namespaceBreadcrumb().name;\n\n    const updateParams = (p) =>\n      this.updateParams(p, () => this.loadNamespaces());\n\n    const filterConfig = [{ id: 'keywords', title: t`keywords` }];\n    const sortOptions = [\n      { title: t`Name`, id: 'name', type: 'alpha' as const },\n    ];\n    const buttons = [\n      hasPermission('galaxy.add_namespace') ? (\n        <Button variant='primary' onClick={this.handleModalToggle}>\n          {t`Create`}\n        </Button>\n      ) : null,\n    ];\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceDetail,\n                {\n                  namespace: result.name,\n                },\n                { tab: 'collections' },\n              ),\n            })\n          }\n        />\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={title}>\n          {!this.context.user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs\n                  tabs={[\n                    {\n                      title: t`All`,\n                      link: formatPath(Paths[NAMESPACE_TERM]),\n                      active: !filterOwner,\n                    },\n                    {\n                      title: t`My namespaces`,\n                      link: formatPath(Paths.myNamespaces),\n                      active: filterOwner,\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        {noData ? null : (\n          <HubListToolbar\n            buttons={buttons}\n            count={itemCount}\n            filterConfig={filterConfig}\n            ignoredParams={['page', 'page_size', 'sort']}\n            params={params}\n            sortOptions={sortOptions}\n            updateParams={updateParams}\n          />\n        )}\n        <section className='card-area'>\n          {this.renderBody({ updateParams })}\n        </section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={updateParams}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody({ updateParams }) {\n    const { itemCount, loading, namespaces, params } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner />;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='hub-card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n              })}\n              key={i}\n              namespace={ns}\n            />\n          </div>\n        ))}\n        {itemCount > params.page_size * (params.page ?? 1) ? (\n          <div className='card-wrapper'>\n            <NamespaceNextPageCard\n              onClick={() =>\n                updateParams({ ...params, page: (params.page ?? 1) + 1 })\n              }\n            />\n          </div>\n        ) : null}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceList.contextType = AppContext;\n","import React from 'react';\nimport { Paths } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass Partners extends React.Component<RouteProps> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceDetail}\n        filterOwner={false}\n      />\n    );\n  }\n}\n\nexport default withRouter(Partners);\n"],"names":["NamespaceList","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","setState","_ref","isModalOpen","params","ParamHelper","parseParamString","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","_createClass","key","value","_this2","this","context","setAlerts","filterOwner","MyNamespaceAPI","list","then","results","data","meta","count","loadNamespaces","e","_e$response","response","status","statusText","addAlert","variant","title","i18n","_","id","description","errorMessage","_this3","redirect","React","Navigate","to","_this$state","noData","filterIsSet","length","LoadingPageWithHeader","namespaceBreadcrumb","name","updateParams","p","filterConfig","sortOptions","type","buttons","Button","onClick","handleModalToggle","className","NamespaceModal","isOpen","toggleModal","onCreateSuccess","result","formatPath","Paths","namespaceDetail","namespace","tab","AlertList","closeAlert","i","BaseHeader","user","is_anonymous","LinkTabs","tabs","link","active","myNamespaces","HubListToolbar","ignoredParams","renderBody","Pagination","_ref2","_params$page","_this4","_this$state2","_this$props","namespacePath","noDataTitle","noDataDescription","noDataButton","LoadingPageSpinner","EmptyStateFilter","EmptyStateNoData","button","map","ns","NamespaceCard","namespaceURL","page_size","page","NamespaceNextPageCard","_params$page2","_objectSpread","_this5","api","NamespaceAPI","_e$response2","get","updateParamsMixin","nonURLParams","alert","concat","_toConsumableArray","closeAlertMixin","contextType","AppContext","Partners","apply","arguments","_extends","withRouter"],"sourceRoot":""}
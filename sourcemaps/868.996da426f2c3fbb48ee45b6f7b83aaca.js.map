{"version":3,"file":"js/868.25c23040e198ece7d931.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  LabelGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersion,\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n  Repositories,\n} from 'src/api';\nimport { Repository } from 'src/api/response-types/repositories';\nimport {\n  ApproveModal,\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n    status?: string;\n    sort?: string;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersionSearch[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersionSearch['collection_version'][];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersionSearch;\n  approveModalInfo: {\n    collectionVersion: CollectionVersion;\n  };\n  approvedRepositoryList: Repository[];\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['status']) {\n      params['status'] = Constants.NEEDSREVIEW;\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      approvedRepositoryList: [],\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      const promises = [];\n\n      promises.push(\n        Repositories.listApproved()\n          .then((data) => {\n            this.setState({ approvedRepositoryList: data.data.results });\n          })\n          .catch(({ response: { status, statusText } }) => {\n            this.addAlertObj({\n              title: t`Failed to load repositories.`,\n              variant: 'danger',\n              description: errorMessage(status, statusText),\n            });\n          }),\n      );\n\n      promises.push(this.queryCollections(false));\n\n      Promise.all(promises).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () =>\n                            this.queryCollections(true),\n                          )\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'status',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.APPROVED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    status: {\n                      [Constants.APPROVED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    status: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={\n                  this.state.approveModalInfo.collectionVersion\n                }\n                addAlert={(alert) => this.addAlertObj(alert)}\n                allRepositories={this.state.approvedRepositoryList}\n              />\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'status']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repositories`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(collectionData: CollectionVersionSearch) {\n    const { collection_version: version, repository } = collectionData;\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (this.isApproved(collectionData)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && collectionData.is_signed\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {!collectionData.is_signed &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(collectionData: CollectionVersionSearch, index) {\n    const { collection_version: version, repository } = collectionData;\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: repository.name,\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(\n                repository,\n                version.namespace,\n                version.name,\n                version.version,\n              );\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.pulp_created} />\n        </td>\n        <td>\n          <LabelGroup>{repository.name}</LabelGroup>\n        </td>\n        <td>{this.renderStatus(collectionData)}</td>\n        {this.renderButtons(collectionData)}\n      </tr>\n    );\n  }\n\n  private renderButtons(collectionData: CollectionVersionSearch) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const { collection_version: version, repository } = collectionData;\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.state.updatingVersions.includes(version)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && !collectionData.is_signed;\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button\n            onClick={() => this.openUploadCertificateModal(collectionData)}\n          >\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() => {\n          this.approve(collectionData);\n        }}\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => this.approve(collectionData)}\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => {\n          this.reject(collectionData);\n        }}\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isApproved(collectionData)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true),\n            rejectDropDown(false),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      // render reject button if version is in multiple repositories including rejected state - handles inconsistency\n      // and allows user to reject it again to move it all to rejected state\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false),\n            rejectDropDown(true),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      return (\n        <ListItemActions\n          kebabItems={[rejectDropDown(false), importsLink]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersionSearch) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const { collection_version, repository } =\n      this.state.versionToUploadCertificate;\n    const signed_collection = collection_version.pulp_href;\n    const { name, namespace, version } = collection_version;\n    CertificateUploadAPI.upload({\n      file,\n      repository: repository.pulp_href,\n      signed_collection,\n    })\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${namespace} ${name} v${version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${namespace} ${name} v${version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private isApproved(collection: CollectionVersionSearch) {\n    if (!collection) {\n      return false;\n    }\n\n    return this.state.approvedRepositoryList.find(\n      (r) => r.name == collection.repository.name,\n    );\n  }\n\n  private approve(collection) {\n    if (!collection) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Approval failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    const { approvedRepositoryList } = this.state;\n\n    if (approvedRepositoryList.length == 1) {\n      if (collection.repository) {\n        this.updateCertification(\n          collection.collection_version,\n          collection.repository.name,\n          this.state.approvedRepositoryList[0].name,\n        );\n      } else {\n        // I hope that this may not occure ever, but to be sure...\n        this.addAlert(\n          t`Approval failed.`,\n          'danger',\n          t`Collection has to be in rejected or staging repository.`,\n        );\n      }\n    } else {\n      this.transformToCollectionVersion(collection).then(\n        (collectionVersion) => {\n          this.setState({ approveModalInfo: { collectionVersion } });\n        },\n      );\n    }\n  }\n\n  private reject(collection) {\n    if (!collection) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Rejection failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    this.updateCertification(\n      collection.collection_version,\n      collection.repository.name,\n      Constants.NOTCERTIFIED,\n    );\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    this.setState({ updatingVersions: [version] });\n\n    return CollectionVersionAPI.setRepository(\n      version.namespace,\n      version.name,\n      version.version,\n      originalRepo,\n      destinationRepo,\n    )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    const { status, sort, ...params } = this.state.params;\n\n    const updatedParams = {\n      order_by: sort,\n      ...params,\n    };\n\n    if (status) {\n      updatedParams['repository_label'] = `pipeline=${status}`;\n    }\n\n    return CollectionVersionAPI.list(updatedParams)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private download(\n    repository: CollectionVersionSearch['repository'],\n    namespace: string,\n    name: string,\n    version: string,\n  ) {\n    CollectionAPI.getDownloadURL(repository, namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n\n  async getCollectionRepoList(collection: CollectionVersionSearch) {\n    const { name, namespace, version } = collection.collection_version;\n\n    // get repository list for selected collection\n    const collectionInRepos = await CollectionVersionAPI.list({\n      namespace,\n      name,\n      version,\n      page_size: 100000,\n      offset: 0,\n    });\n\n    const collectionRepos = collectionInRepos.data.data.map(\n      ({ repository }) => repository.name,\n    );\n\n    return collectionRepos;\n  }\n\n  // compose from collectionVersionSearch to CollectionVersion structure for approval modal\n  async transformToCollectionVersion(collection: CollectionVersionSearch) {\n    const repoList = await this.getCollectionRepoList(collection);\n\n    const { collection_version, is_signed } = collection;\n    const id = parsePulpIDFromURL(collection_version.pulp_href);\n    const collectionVersion: CollectionVersion = {\n      id,\n      version: collection_version.version,\n      metadata: {\n        contents: collection_version.contents,\n        description: collection_version.description,\n        tags: collection_version.tags.map((tag) => tag.name),\n        dependencies: [collection_version.dependencies],\n      },\n      created_at: collection_version.pulp_created,\n      namespace: collection_version.namespace,\n      name: collection_version.name,\n      repository_list: repoList,\n      sign_state: is_signed ? 'signed' : 'unsigned',\n    };\n\n    return collectionVersion;\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_transformToCollectionVersion","_getCollectionRepoList","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","Constants","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","approvedRepositoryList","_createClass","key","value","_this2","_this$context","this","context","user","hasPermission","is_anonymous","setState","promises","push","Repositories","then","data","results","_ref","_ref$response","response","status","statusText","addAlertObj","title","i18n","variant","description","errorMessage","queryCollections","Promise","all","_status","_this3","_this$state","React","BaseHeader","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","inputType","options","Pagination","count","isTop","AppliedFilters","ignoredParams","niceValues","_defineProperty","niceNames","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","addAlert","alert","allRepositories","LoadingPageWithHeader","_this4","length","filterIsSet","EmptyStateFilter","EmptyStateNoData","sortTableOptions","headers","type","SortTable","map","version","renderRow","collectionData","_repository$pulp_labe","collection_version","repoStatus","repository","pulp_labels","pipeline","includes","isApproved","display_signatures","featureFlags","Label","color","icon","CheckCircleIcon","is_signed","ExclamationCircleIcon","_this$context$feature","can_upload_signatures","require_upload_signatures","ExclamationTriangleIcon","index","_this5","namespace","name","Link","to","formatPath","Paths","collection","repo","Button","ButtonVariant","onClick","download","DownloadIcon","DateComponent","date","pulp_created","LabelGroup","renderStatus","renderButtons","_repository$pulp_labe2","_this6","_this$context$feature2","collection_auto_sign","ListItemActions","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","approve","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","rejectDropDown","reject","kebabItems","buttons","file","_this7","_this$state$versionTo","signed_collection","pulp_href","CertificateUploadAPI","result","waitForTask","parsePulpIDFromURL","task","error","find","r","_this8","updateCertification","transformToCollectionVersion","originalRepo","destinationRepo","_this9","CollectionVersionAPI","remove_task_id","waitMs","handleLoading","_this10","_this$state$params","updatedParams","_objectSpread","order_by","sort","_objectWithoutProperties","_excluded","concat","meta","message","CollectionAPI","downloadURL","window","assign","get","closeAlertMixin","_toConsumableArray","_asyncToGenerator","_regeneratorRuntime","_callee","_collection$collectio","collectionInRepos","collectionRepos","_context","prev","next","page_size","offset","sent","_ref2","abrupt","stop","_x","apply","arguments","_callee2","repoList","_context2","getCollectionRepoList","metadata","contents","tags","tag","dependencies","created_at","repository_list","sign_state","_x2","withRouter","contextType","AppContext"],"sourceRoot":""}
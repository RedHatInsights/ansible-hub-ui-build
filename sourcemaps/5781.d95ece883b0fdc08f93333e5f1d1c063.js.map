{"version":3,"file":"js/5781.48daa4643aa6d963c3a3.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  CollectionVersionAPI.getCached(\n    {\n      ...(repo ? { repository_name: repo } : {}),\n      namespace,\n      name,\n      order_by: '-version',\n    },\n    forceReload,\n  )\n    .then((collections: CollectionVersionSearch[]) => {\n      const collection = version\n        ? collections.find(\n            ({ collection_version }) => collection_version.version == version,\n          )\n        : collections.find((cv) => cv.is_highest);\n\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ).then((res) => {\n        const [content] = res.data.results;\n        setCollection(collections, collection, content);\n      });\n    })\n    .catch(() => {\n      navigate(formatPath(Paths.notFound));\n    });\n}\n","import { isEqual } from 'lodash';\nimport * as React from 'react';\nimport {\n  AlertList,\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collections: [],\n      collection: null,\n      content: null,\n      distroBasePath: null,\n      params: params,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollections(true);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.location, this.props.location)) {\n      this.loadCollections(false);\n    }\n  }\n\n  render() {\n    const { collections, collection, content, params, alerts } = this.state;\n\n    if (collections.length <= 0) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const { collection_version: version } = collection;\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceDetail, {\n          namespace: version.namespace,\n        }),\n        name: version.namespace,\n      },\n      {\n        name: version.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <CollectionHeader\n          reload={() => this.loadCollections(true)}\n          collections={collections}\n          collection={collection}\n          content={content}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.loadCollections(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='install'\n          repo={this.props.routeParams.published}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionInfo\n              {...collection}\n              content={content}\n              updateParams={(p) => this.updateParams(p)}\n              params={this.state.params}\n              addAlert={(variant, title, description) =>\n                this.setState({\n                  alerts: [\n                    ...this.state.alerts,\n                    {\n                      variant,\n                      title,\n                      description,\n                    },\n                  ],\n                })\n              }\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadCollections(forceReload) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      setCollection: (collections, collection, content) => {\n        this.setState({\n          collections,\n          collection,\n          content,\n        });\n      },\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CollectionDetail);\n\nCollectionDetail.contextType = AppContext;\n"],"names":["loadCollection","_ref","forceReload","matchParams","navigate","setCollection","version","stateParams","name","collection","namespace","repo","CollectionVersionAPI","_objectSpread","repository_name","order_by","then","collections","find","_ref2","collection_version","cv","is_highest","CollectionAPI","res","content","_slicedToArray","data","results","formatPath","Paths","CollectionDetail","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","distroBasePath","alerts","_createClass","key","value","this","loadCollections","prevProps","isEqual","_this2","_this$state","length","React","LoadingPageWithHeader","breadcrumbs","namespaceBreadcrumb","url","AlertList","closeAlert","i","CollectionHeader","reload","updateParams","p","activeTab","routeParams","published","Main","className","CollectionInfo","_extends","addAlert","variant","title","description","setState","concat","_toConsumableArray","_this3","get","closeAlertMixin","withRouter","contextType","AppContext"],"sourceRoot":""}
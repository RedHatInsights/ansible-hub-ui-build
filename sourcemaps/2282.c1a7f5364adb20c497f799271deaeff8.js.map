{"version":3,"file":"js/2282.8d55fd2eda727720104f.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collectionsCount?: number;\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\n// Caches the collection data when matching, prevents redundant fetches between collection detail tabs\nconst cache = {\n  repository: null,\n  namespace: null,\n  name: null,\n  version: null,\n\n  collections: [],\n  collectionsCount: 0,\n  collection: null,\n  content: null,\n};\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  // try loading from cache\n  if (\n    !forceReload &&\n    cache.repository === repo &&\n    cache.namespace === namespace &&\n    cache.name === name &&\n    cache.version === version\n  ) {\n    setCollection(\n      cache.collections,\n      cache.collection,\n      cache.content,\n      cache.collectionsCount,\n    );\n    return;\n  }\n\n  const requestParams = {\n    ...(repo ? { repository_name: repo } : {}),\n    namespace,\n    name,\n  };\n\n  const currentVersion = (\n    version\n      ? CollectionVersionAPI.list({ ...requestParams, version })\n      : CollectionVersionAPI.list({ ...requestParams, is_highest: true })\n  ).then(({ data }) => data.data[0]);\n\n  const content = currentVersion\n    .then((collection) =>\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ),\n    )\n    .then(({ data: { results } }) => results[0])\n    .catch(() => navigate(formatPath(Paths.notFound)));\n\n  // Note: this only provides the first page - containing the latest version, and all items for the version *selector*,\n  // but the version *modal* is using a separate call, in CollectionHeader updatePaginationParams\n  const versions = CollectionVersionAPI.list({\n    ...requestParams,\n    order_by: '-version',\n    page_size: 10,\n  })\n    .then(({ data }) => data)\n    .catch(() => ({ data: [], meta: { count: 0 } }));\n\n  return Promise.all([versions, currentVersion, content]).then(\n    ([\n      {\n        data: collections,\n        meta: { count: collectionsCount },\n      },\n      collection,\n      content,\n    ]) => {\n      setCollection(collections, collection, content, collectionsCount);\n\n      cache.repository = repo;\n      cache.namespace = namespace;\n      cache.name = name;\n      cache.version = version;\n\n      cache.collections = collections;\n      cache.collectionsCount = collectionsCount;\n      cache.collection = collection;\n      cache.content = content;\n    },\n  );\n}\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { ImportAPI, ImportDetailType, ImportListType } from 'src/api';\nimport {\n  CollectionHeader,\n  ImportConsole,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: null,\n      collections: [],\n      collectionsCount: 0,\n      content: null,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      collections,\n      collectionsCount,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n      content,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const { collection_version, repository } = collection;\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceDetail, {\n          namespace: collection_version.namespace,\n        }),\n        name: collection_version.namespace,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection_version.namespace,\n          collection: collection_version.name,\n          repo: repository.name,\n        }),\n        name: collection_version.name,\n      },\n      { name: t`Import log` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          reload={() => this.loadData(true)}\n          collections={collections}\n          collectionsCount={collectionsCount}\n          collection={collection}\n          content={content}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n        />\n        <Main>\n          <section className='body'>\n            <ImportConsole\n              empty={false}\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={() => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = t`Could not load import log`;\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.collection_version.namespace,\n          name: this.state.collection.collection_version.name,\n          version: this.state.collection.collection_version.version,\n          sort: '-created',\n        })\n          .then((importListResult) => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then((importDetailResult) => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch(() => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch(() => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  private loadCollection(forceReload, callback) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      setCollection: (collections, collection, content, collectionsCount) =>\n        this.setState(\n          { collections, collection, content, collectionsCount },\n          callback,\n        ),\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n\nCollectionImportLog.contextType = AppContext;\n"],"names":["cache","repository","namespace","name","version","collections","collectionsCount","collection","content","loadCollection","_ref","forceReload","matchParams","navigate","setCollection","stateParams","repo","requestParams","_objectSpread","repository_name","currentVersion","CollectionVersionAPI","is_highest","then","_ref2","data","CollectionAPI","collection_version","_ref3","results","formatPath","Paths","versions","order_by","page_size","_ref4","meta","count","Promise","all","_ref5","_ref6","_slicedToArray","_ref6$","CollectionImportLog","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","loadingImports","selectedImportDetail","undefined","selectedImport","apiError","_createClass","key","value","this","loadData","_this2","_this$state","React","LoadingPageWithHeader","breadcrumbs","namespaceBreadcrumb","url","i18n","CollectionHeader","reload","updateParams","activeTab","Main","className","ImportConsole","empty","loading","task","followMessages","setFollowMessages","hideCollectionName","_this3","arguments","length","failMsg","setState","ImportAPI","sort","importListResult","importObj","id","importDetailResult","callback","_this4","routeParams","get","withRouter","contextType","AppContext"],"sourceRoot":""}
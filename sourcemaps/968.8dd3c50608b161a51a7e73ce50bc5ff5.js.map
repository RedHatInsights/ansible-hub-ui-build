{"version":3,"file":"js/968.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/containers/signature-keys/list.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { DropdownItem } from '@patternfly/react-core/deprecated';\nimport { Table, Tbody, Td, Tr } from '@patternfly/react-table';\nimport React, { Component } from 'react';\nimport { SigningServiceAPI, type SigningServiceType } from 'src/api';\nimport {\n  AlertList,\n  type AlertType,\n  AppliedFilters,\n  BaseHeader,\n  ClipboardCopy,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  HubPagination,\n  ListItemActions,\n  LoadingSpinner,\n  Main,\n  SortTable,\n  closeAlert,\n} from 'src/components';\nimport { AppContext, type IAppContextType } from 'src/loaders/app-context';\nimport { type RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper, errorMessage, filterIsSet } from 'src/utilities';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: SigningServiceType[];\n  itemCount: number;\n  alerts: AlertType[];\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class SignatureKeysList extends Component<RouteProps, IState> {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 100;\n    }\n\n    this.state = {\n      params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !(this.context as IAppContextType).user ||\n      (this.context as IAppContextType).user.is_anonymous\n    ) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.query();\n    }\n  }\n\n  render() {\n    const { params, itemCount, loading, items, alerts, unauthorised } =\n      this.state;\n\n    const noData = items.length === 0 && !filterIsSet(params, ['name']);\n\n    return (\n      <>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) =>\n            closeAlert(i, {\n              alerts,\n              setAlerts: (alerts) => this.setState({ alerts }),\n            })\n          }\n        />\n        <BaseHeader title={t`Signature keys`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No signature keys yet`}\n            description={t`Signature keys will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) => {\n                              p['page'] = 1;\n                              this.updateParams(p, () => this.query());\n                            }}\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name',\n                                title: t`Name`,\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <HubPagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.query())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.query());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name: t`Name`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingSpinner /> : this.renderTable(params)}\n\n                <HubPagination\n                  params={params}\n                  updateParams={(p) => this.updateParams(p, () => this.query())}\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (!items.length) {\n      return <EmptyStateFilter />;\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Name`,\n          type: 'none',\n          id: 'name',\n        },\n        {\n          title: t`Key fingerprint`,\n          type: 'none',\n          id: 'pubkey_fingerprint',\n        },\n        {\n          title: t`Created on`,\n          type: 'none',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Public key`,\n          type: 'none',\n          id: 'public_key',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'kebab',\n        },\n      ],\n    };\n\n    return (\n      <Table aria-label={t`Signature keys`}>\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => {\n            p['page'] = 1;\n            this.updateParams(p, () => this.query());\n          }}\n        />\n        <Tbody>{items.map((item, i) => this.renderTableRow(item, i))}</Tbody>\n      </Table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, pubkey_fingerprint, public_key, pulp_created } = item;\n\n    const dropdownItems = [\n      <DropdownItem\n        key='download-key'\n        onClick={() => {\n          document.location =\n            'data:application/octet-stream,' + encodeURIComponent(public_key);\n        }}\n      >\n        {t`Download key`}\n      </DropdownItem>,\n    ];\n\n    return (\n      <Tr key={index}>\n        <Td>{name}</Td>\n        <Td data-cy='hub-signature-list-fingerprint'>{pubkey_fingerprint}</Td>\n        <Td>\n          <DateComponent date={pulp_created} />\n        </Td>\n        <Td>\n          <ClipboardCopy isCode isReadOnly variant={'expansion'}>\n            {public_key}\n          </ClipboardCopy>\n        </Td>\n        <ListItemActions kebabItems={dropdownItems} />\n      </Tr>\n    );\n  }\n\n  private query() {\n    this.setState({ loading: true }, () => {\n      SigningServiceAPI.list({ sort: 'name', ...this.state.params })\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n          });\n          this.addAlert({\n            title: t`Signature keys could not be displayed.`,\n            variant: 'danger',\n            description: errorMessage(status, statusText),\n          });\n        });\n    });\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  private updateParams(params, callback = null) {\n    ParamHelper.updateParams({\n      params,\n      navigate: (to) => this.props.navigate(to),\n      setState: (state) => this.setState(state, callback),\n    });\n  }\n}\n\nexport default withRouter(SignatureKeysList);\n"],"names":["SignatureKeysList","_Component","props","_this","_classCallCheck","_callSuper","params","ParamHelper","parseParamString","location","search","state","items","loading","itemCount","alerts","unauthorised","inputText","_inherits","_createClass","key","value","this","context","user","is_anonymous","setState","query","_this2","_this$state","noData","length","filterIsSet","React","AlertList","closeAlert","i","setAlerts","BaseHeader","title","i18n","_","id","EmptyStateUnauthorized","EmptyStateNoData","description","Main","LoadingSpinner","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","HubPagination","count","isTop","AppliedFilters","ignoredParams","niceNames","name","renderTable","_this3","EmptyStateFilter","sortTableOptions","headers","type","Table","SortTable","options","Tbody","map","item","renderTableRow","index","pubkey_fingerprint","public_key","pulp_created","dropdownItems","DropdownItem","onClick","document","encodeURIComponent","Tr","Td","DateComponent","date","ClipboardCopy","isCode","isReadOnly","variant","ListItemActions","kebabItems","_this4","SigningServiceAPI","list","_objectSpread","sort","then","result","data","results","e","_e$response","response","status","statusText","addAlert","errorMessage","alert","concat","_toConsumableArray","_this5","callback","arguments","undefined","navigate","to","Component","_defineProperty","AppContext","withRouter"],"sourceRoot":""}
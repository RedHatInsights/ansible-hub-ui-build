{"version":3,"file":"js/namespace_detail.7b6681bfa2f1ab0af57d.js","mappings":"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","sources":["webpack:///./src/containers/edit-namespace/edit-namespace.tsx","webpack:///./src/containers/namespace-detail/import-modal/import-modal.tsx","webpack:///./src/containers/namespace-detail/namespace-detail.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\n\nimport {\n  PartnerHeader,\n  NamespaceForm,\n  ResourcesForm,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  Main,\n  EmptyStateUnauthorized,\n} from 'src/components';\nimport {\n  MyNamespaceAPI,\n  NamespaceType,\n  ActiveUserAPI,\n  NamespaceLinkType,\n} from 'src/api';\n\nimport { Form, ActionGroup, Button, Spinner } from '@patternfly/react-core';\n\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { ParamHelper, mapErrorMessages } from 'src/utilities';\n\ninterface IState {\n  namespace: NamespaceType;\n  newLinkName: string;\n  newLinkURL: string;\n  errorMessages: any;\n  saving: boolean;\n  redirect: string;\n  unsavedData: boolean;\n  alerts: AlertType[];\n  params: {\n    tab?: string;\n  };\n  userId: string;\n  unauthorized: boolean;\n}\n\nclass EditNamespace extends React.Component<RouteComponentProps, IState> {\n  queryParams: URLSearchParams;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    if (!params['tab']) {\n      params['tab'] = 'edit-details';\n    }\n\n    this.state = {\n      alerts: [],\n      namespace: null,\n      userId: '',\n      newLinkURL: '',\n      newLinkName: '',\n      errorMessages: {},\n      saving: false,\n      redirect: null,\n      unsavedData: false,\n      params: params,\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    ActiveUserAPI.getUser().then((result) => {\n      this.setState({ userId: result.account_number }, () =>\n        this.loadNamespace(),\n      );\n    });\n  }\n\n  render() {\n    const {\n      namespace,\n      errorMessages,\n      saving,\n      redirect,\n      params,\n      userId,\n      unauthorized,\n    } = this.state;\n\n    const tabs = [\n      { id: 'edit-details', name: t`Edit details` },\n      { id: 'edit-resources', name: t`Edit resources` },\n    ];\n\n    if (!namespace) {\n      return null;\n    }\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n    return (\n      <React.Fragment>\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[\n            namespaceBreadcrumb,\n            {\n              name: namespace.name,\n              url: formatPath(Paths.myCollections, {\n                namespace: namespace.name,\n              }),\n            },\n            { name: t`Edit` },\n          ]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n        ></PartnerHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main>\n            <section className='body'>\n              {params.tab.toLowerCase() === 'edit-details' ? (\n                <NamespaceForm\n                  userId={userId}\n                  namespace={namespace}\n                  errorMessages={errorMessages}\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                />\n              ) : (\n                <ResourcesForm\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                  namespace={namespace}\n                />\n              )}\n              <Form>\n                <ActionGroup>\n                  <Button\n                    variant='primary'\n                    onClick={() => this.saveNamespace()}\n                  >\n                    {t`Save`}\n                  </Button>\n                  <Button variant='secondary' onClick={() => this.cancel()}>\n                    {t`Cancel`}\n                  </Button>\n\n                  {saving ? <Spinner></Spinner> : null}\n                </ActionGroup>\n                {this.state.unsavedData ? (\n                  <div\n                    style={{ color: 'red' }}\n                  >{t`You have unsaved changes`}</div>\n                ) : null}\n              </Form>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private loadNamespace() {\n    MyNamespaceAPI.get(this.props.match.params['namespace'])\n      .then((response) => {\n        // Add an empty link to the end of the links array to create an empty field\n        // on the link edit form for adding new links\n        const emptyLink: NamespaceLinkType = { name: '', url: '' };\n        response.data.links.push(emptyLink);\n        this.setState({ namespace: response.data });\n      })\n      .catch((response) => {\n        this.setState({ unauthorized: true });\n      });\n  }\n\n  private saveNamespace() {\n    this.setState({ saving: true }, () => {\n      const namespace = { ...this.state.namespace };\n      const setLinks: NamespaceLinkType[] = [];\n\n      // remove any empty links from the list before saving\n      for (const link of namespace.links) {\n        if (link.url !== '' || link.name !== '') {\n          setLinks.push(link);\n        }\n      }\n\n      namespace.links = setLinks;\n\n      MyNamespaceAPI.update(this.state.namespace.name, namespace)\n        .then((result) => {\n          this.setState({\n            namespace: result.data,\n            errorMessages: {},\n            saving: false,\n            unsavedData: false,\n            redirect: formatPath(Paths.myCollections, {\n              namespace: this.state.namespace.name,\n            }),\n          });\n        })\n        .catch((error) => {\n          const result = error.response;\n          if (result.status === 400) {\n            this.setState({\n              errorMessages: mapErrorMessages(error),\n              saving: false,\n            });\n          } else if (result.status === 404) {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: t`API Error: ${error.response.status}`,\n                description: t`You don't have permissions to update this namespace.`,\n              }),\n              saving: false,\n            });\n          }\n        });\n    });\n  }\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private cancel() {\n    this.setState({\n      redirect: formatPath(Paths.myCollections, {\n        namespace: this.state.namespace.name,\n      }),\n    });\n  }\n}\n\nexport default withRouter(EditNamespace);\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport './import-modal.scss';\nimport axios from 'axios';\n\nimport { Modal, Button } from '@patternfly/react-core';\nimport { FolderOpenIcon, SpinnerIcon } from '@patternfly/react-icons';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  CollectionUploadType,\n} from 'src/api';\n\nenum Status {\n  uploading = 'uploading',\n  waiting = 'waiting',\n}\n\ninterface IProps {\n  isOpen: boolean;\n  setOpen: (isOpen, warnings?) => void;\n  onUploadSuccess: (result) => void;\n\n  collection?: CollectionListType;\n  namespace: string;\n}\n\ninterface IState {\n  file?: File;\n  errors?: string;\n  uploadProgress: number;\n  uploadStatus: Status;\n}\n\nexport class ImportModal extends React.Component<IProps, IState> {\n  acceptedFileTypes = ['application/x-gzip', 'application/gzip'];\n  cancelToken: any;\n  COLLECTION_NAME_REGEX = /[0-9a-z_]+\\-[0-9a-z_]+\\-[0-9A-Za-z.+-]+/;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      file: undefined,\n      errors: '',\n      uploadProgress: 0,\n      uploadStatus: Status.waiting,\n    };\n  }\n  render() {\n    const { isOpen, collection } = this.props;\n\n    const { file, errors, uploadProgress, uploadStatus } = this.state;\n    return (\n      <Modal\n        variant='small'\n        title={\n          collection ? t`New version of ${collection.name}` : t`New collection`\n        }\n        isOpen={isOpen}\n        onClose={() => this.handleClose()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => this.saveFile()}\n            isDisabled={!this.canUpload()}\n          >\n            {t`Upload`}\n          </Button>,\n          <Button\n            key='cancel'\n            variant='secondary'\n            onClick={() => this.handleClose()}\n          >\n            {t`Cancel`}\n          </Button>,\n        ]}\n      >\n        <div className='upload-collection'>\n          <form>\n            <input\n              disabled={uploadStatus !== Status.waiting}\n              className='upload-file'\n              type='file'\n              id='collection-widget'\n              onChange={(e) => this.handleFileUpload(e.target.files)}\n            />\n            <label className='upload-file-label' htmlFor='collection-widget'>\n              <div className='upload-box'>\n                <div className='upload-button'>{this.renderFileIcon()}</div>\n                <div className='upload-text'>\n                  {file != null ? file.name : t`Select file`}\n                  <div\n                    className='loading-bar'\n                    style={{\n                      width: uploadProgress * 100 + '%',\n                    }}\n                  />\n                </div>\n              </div>\n            </label>\n          </form>\n          {errors ? (\n            <span className='file-error-messages'>\n              <i className='pficon-error-circle-o' /> {errors}\n            </span>\n          ) : null}\n        </div>\n      </Modal>\n    );\n  }\n\n  private canUpload() {\n    if (this.state.errors) {\n      return false;\n    }\n\n    if (this.state.uploadStatus !== Status.waiting) {\n      return false;\n    }\n\n    if (!this.state.file) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private renderFileIcon() {\n    switch (this.state.uploadStatus) {\n      case Status.uploading:\n        return <SpinnerIcon className='fa-spin'></SpinnerIcon>;\n      default:\n        return <FolderOpenIcon></FolderOpenIcon>;\n    }\n  }\n\n  private handleFileUpload(files) {\n    // Selects the artifact that will be uploaded and performs some basic\n    // preliminary checks on it.\n    const newCollection = files[0];\n    const { collection } = this.props;\n\n    if (files.length > 1) {\n      this.setState({\n        errors: t`Please select no more than one file.`,\n      });\n    } else if (!this.acceptedFileTypes.includes(newCollection.type)) {\n      this.setState({\n        errors: t`Invalid file format.`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (!this.COLLECTION_NAME_REGEX.test(newCollection.name)) {\n      this.setState({\n        errors: t`Invalid file name. Collections must be formatted as 'namespace-collection_name-1.0.0'`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (\n      collection &&\n      collection.name !== newCollection.name.split('-')[1]\n    ) {\n      this.setState({\n        errors: t`The collection you have selected doesn't appear to match ${collection.name}`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (this.props.namespace != newCollection.name.split('-')[0]) {\n      this.setState({\n        errors: t`The collection you have selected does not match this namespace.`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else {\n      this.setState({\n        errors: '',\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    }\n  }\n\n  saveFile() {\n    this.setState({ uploadStatus: Status.uploading });\n    const artifact = {\n      file: this.state.file,\n      sha256: '',\n    } as CollectionUploadType;\n\n    this.cancelToken = CollectionAPI.getCancelToken();\n\n    CollectionAPI.upload(\n      'inbound-' + this.props.namespace,\n      artifact,\n      (e) => {\n        this.setState({\n          uploadProgress: e.loaded / e.total,\n        });\n      },\n      this.cancelToken,\n    )\n      .then((response) => {\n        this.props.onUploadSuccess(response);\n      })\n      .catch((errors) => {\n        let errorMessage = '';\n\n        // If request was canceled by the user\n        if (!axios.isCancel(errors)) {\n          // Upload fails\n          if (errors.response.data.errors) {\n            const messages = [];\n            for (let err of errors.response.data.errors) {\n              messages.push(\n                err.detail ||\n                  err.title ||\n                  err.code ||\n                  t`API error. Status code: ${err.status}`,\n              );\n            }\n            errorMessage = messages.join(', ');\n          } else {\n            errorMessage = t`API error. Status code: ${errors.response.status}`;\n          }\n        }\n\n        this.setState({\n          uploadStatus: Status.waiting,\n          errors: errorMessage,\n        });\n      })\n      .finally(() => {\n        this.cancelToken = null;\n      });\n  }\n\n  handleClose() {\n    let msg = null;\n    if (this.cancelToken && this.state.uploadStatus === Status.uploading) {\n      msg = t`Collection upload canceled`;\n      this.cancelToken.cancel(msg);\n    }\n\n    this.setState(\n      {\n        file: undefined,\n        errors: '',\n        uploadProgress: 0,\n        uploadStatus: Status.waiting,\n      },\n      () => this.props.setOpen(false, msg),\n    );\n  }\n}\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport './namespace-detail.scss';\n\nimport {\n  withRouter,\n  RouteComponentProps,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  DropdownItem,\n  Tooltip,\n  Text,\n  Checkbox,\n} from '@patternfly/react-core';\n\nimport * as ReactMarkdown from 'react-markdown';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  NamespaceAPI,\n  MyNamespaceAPI,\n  NamespaceType,\n} from 'src/api';\n\nimport {\n  CollectionList,\n  CollectionFilter,\n  LoadingPageWithHeader,\n  Main,\n  Pagination,\n  PartnerHeader,\n  EmptyStateNoData,\n  RepoSelector,\n  StatefulDropdown,\n  ClipboardCopy,\n  AlertType,\n  AlertList,\n  closeAlertMixin,\n  ConfirmModal,\n} from 'src/components';\n\nimport { ImportModal } from './import-modal/import-modal';\n\nimport { ParamHelper, getRepoUrl, filterIsSet } from 'src/utilities';\nimport { Constants } from 'src/constants';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  collections: CollectionListType[];\n  namespace: NamespaceType;\n  params: {\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tab?: string;\n    keywords?: string;\n    namespace?: string;\n  };\n  redirect: string;\n  itemCount: number;\n  showImportModal: boolean;\n  warning: string;\n  updateCollection: CollectionListType;\n  showControls: boolean;\n  isOpenNamespaceModal: boolean;\n  alerts: AlertType[];\n  isNamespaceEmpty: boolean;\n  confirmDelete: boolean;\n}\n\ninterface IProps extends RouteComponentProps {\n  selectedRepo: string;\n}\n\nexport class NamespaceDetail extends React.Component<IProps, IState> {\n  nonAPIParams = ['tab'];\n\n  // namespace is a positional url argument, so don't include it in the\n  // query params\n  nonQueryStringParams = ['namespace'];\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    params['namespace'] = props.match.params['namespace'];\n\n    this.state = {\n      collections: [],\n      namespace: null,\n      params: params,\n      redirect: null,\n      itemCount: 0,\n      showImportModal: false,\n      warning: '',\n      updateCollection: null,\n      showControls: false, // becomes true when my-namespaces doesn't 404\n      isOpenNamespaceModal: false,\n      alerts: [],\n      isNamespaceEmpty: false,\n      confirmDelete: false,\n    };\n  }\n\n  componentDidMount() {\n    this.loadAll();\n\n    if (this.context.alerts) this.setState({ alerts: this.context.alerts });\n  }\n\n  componentWillUnmount() {\n    this.context.setAlerts([]);\n  }\n\n  render() {\n    const {\n      collections,\n      namespace,\n      params,\n      redirect,\n      itemCount,\n      showImportModal,\n      warning,\n      updateCollection,\n      isOpenNamespaceModal,\n      confirmDelete,\n    } = this.state;\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n\n    if (!namespace) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const tabs = [{ id: 'collections', name: t`Collections` }];\n\n    if (this.state.showControls) {\n      tabs.push({ id: 'cli-configuration', name: t`CLI Configuration` });\n    }\n    const tab = params['tab'] || 'collections';\n\n    if (namespace.resources) {\n      tabs.push({ id: 'resources', name: t`Resources` });\n    }\n\n    const repositoryUrl = getRepoUrl('inbound-' + namespace.name);\n\n    const noData = itemCount === 0 && !filterIsSet(params, ['keywords']);\n\n    const updateParams = (params) =>\n      this.updateParams(params, () => this.loadCollections());\n\n    const ignoredParams = [\n      'namespace',\n      'page',\n      'page_size',\n      'sort',\n      'tab',\n      'view_type',\n    ];\n\n    return (\n      <React.Fragment>\n        <ImportModal\n          isOpen={showImportModal}\n          onUploadSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.myImports,\n                {},\n                {\n                  namespace: namespace.name,\n                },\n              ),\n            })\n          }\n          // onCancel\n          setOpen={(isOpen, warn) => this.toggleImportModal(isOpen, warn)}\n          collection={updateCollection}\n          namespace={namespace.name}\n        />\n        {isOpenNamespaceModal && (\n          <ConfirmModal\n            cancelAction={this.closeModal}\n            confirmAction={this.deleteNamespace}\n            title={t`Permanently delete namespace?`}\n            confirmButtonTitle={t`Delete`}\n            isDisabled={!confirmDelete}\n          >\n            <>\n              <Text style={{ paddingBottom: 'var(--pf-global--spacer--md)' }}>\n                <Trans>\n                  Deleting <b>{namespace.name}</b> and its data will be lost.\n                </Trans>\n              </Text>\n              <Checkbox\n                isChecked={confirmDelete}\n                onChange={(val) => this.setState({ confirmDelete: val })}\n                label={t`I understand that this action cannot be undone.`}\n                id='delete_confirm'\n              />\n            </>\n          </ConfirmModal>\n        )}\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {warning ? (\n          <Alert\n            style={{\n              position: 'fixed',\n              right: '5px',\n              top: '80px',\n              zIndex: 300,\n            }}\n            variant='warning'\n            title={warning}\n            actionClose={\n              <AlertActionCloseButton\n                onClose={() => this.setState({ warning: '' })}\n              />\n            }\n          ></Alert>\n        ) : null}\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[namespaceBreadcrumb, { name: namespace.name }]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n          pageControls={this.renderPageControls()}\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={this.props.match.path as any} // Paths.namespaceByRepo or Paths.myCollectionsByRepo\n              pathParams={{ namespace: namespace.name }}\n            />\n          }\n          filters={\n            tab.toLowerCase() === 'collections' ? (\n              <div className='toolbar-wrapper namespace-detail'>\n                <div className='toolbar'>\n                  <CollectionFilter\n                    ignoredParams={ignoredParams}\n                    params={params}\n                    updateParams={updateParams}\n                  />\n\n                  <div className='pagination-container'>\n                    <Pagination\n                      params={params}\n                      updateParams={updateParams}\n                      count={itemCount}\n                      isTop\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : null\n          }\n        ></PartnerHeader>\n        <Main>\n          {tab.toLowerCase() === 'collections' ? (\n            noData ? (\n              <EmptyStateNoData\n                title={t`No collections yet`}\n                description={t`Collections will appear once uploaded`}\n                button={\n                  this.state.showControls && (\n                    <Button\n                      onClick={() => this.setState({ showImportModal: true })}\n                    >\n                      {t`Upload collection`}\n                    </Button>\n                  )\n                }\n              />\n            ) : (\n              <section className='body'>\n                <CollectionList\n                  updateParams={updateParams}\n                  params={params}\n                  ignoredParams={ignoredParams}\n                  collections={collections}\n                  itemCount={itemCount}\n                  showControls={this.state.showControls}\n                  handleControlClick={(id, action) =>\n                    this.handleCollectionAction(id, action)\n                  }\n                  repo={this.context.selectedRepo}\n                />\n              </section>\n            )\n          ) : null}\n          {tab.toLowerCase() === 'cli-configuration' ? (\n            <section className='body'>\n              <div>\n                <ClipboardCopy isReadOnly>{repositoryUrl}</ClipboardCopy>\n                <div>\n                  <Trans>\n                    <b>Note:</b> Use this URL to configure ansible-galaxy to\n                    upload collections to this namespace. More information on\n                    ansible-galaxy configurations can be found{' '}\n                    <a\n                      href='https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#configuring-the-ansible-galaxy-client'\n                      target='_blank'\n                    >\n                      here\n                    </a>\n                    .\n                  </Trans>\n                </div>\n              </div>\n            </section>\n          ) : null}\n          {tab.toLowerCase() === 'resources'\n            ? this.renderResources(namespace)\n            : null}\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private handleCollectionAction(id, action) {\n    const collection = this.state.collections.find((x) => x.id === id);\n\n    switch (action) {\n      case 'upload':\n        this.setState({\n          updateCollection: collection,\n          showImportModal: true,\n        });\n        break;\n      case 'deprecate':\n        CollectionAPI.setDeprecation(\n          collection,\n          !collection.deprecated,\n          this.context.selectedRepo,\n        )\n          .then(() => this.loadCollections())\n          .catch((error) => {\n            this.setState({\n              warning: t`API Error: Failed to set deprecation.`,\n            });\n          });\n        break;\n    }\n  }\n\n  private renderResources(namespace: NamespaceType) {\n    return (\n      <div className='pf-c-content preview'>\n        <ReactMarkdown source={namespace.resources} />\n      </div>\n    );\n  }\n\n  private loadCollections() {\n    CollectionAPI.list(\n      {\n        ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n      },\n      this.context.selectedRepo,\n    ).then((result) => {\n      this.setState({\n        collections: result.data.data,\n        itemCount: result.data.meta.count,\n      });\n    });\n  }\n\n  private loadAll() {\n    Promise.all([\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n        },\n        this.context.selectedRepo,\n      ),\n      NamespaceAPI.get(this.props.match.params['namespace']),\n      MyNamespaceAPI.get(this.props.match.params['namespace']).catch(\n        // expecting 404 - it just means we can not edit the namespace (unless both NamespaceAPI and MyNamespaceAPI fail)\n        (e) =>\n          e.response && e.response.status === 404 ? null : Promise.reject(e),\n      ),\n    ])\n      .then((val) => {\n        this.setState({\n          collections: val[0].data.data,\n          itemCount: val[0].data.meta.count,\n          namespace: val[1].data,\n          showControls: !!val[2],\n        });\n\n        this.loadAllRepos(val[0].data.meta.count);\n      })\n      .catch((response) => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private loadAllRepos(currentRepoCount) {\n    // get collections in namespace from each repo\n    // except the one we already have\n    const repoPromises = Object.keys(Constants.REPOSITORYNAMES)\n      .filter((repo) => repo !== this.context.selectedRepo)\n      .map((repo) =>\n        CollectionAPI.list(\n          { namespace: this.props.match.params['namespace'] },\n          repo,\n        ),\n      );\n\n    Promise.all(repoPromises)\n      .then((results) =>\n        this.setState({\n          isNamespaceEmpty:\n            results.every((val) => val.data.meta.count === 0) &&\n            currentRepoCount === 0,\n        }),\n      )\n      .catch((err) =>\n        this.setState({\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: 'Error loading collection repositories',\n              description: err?.message,\n            },\n          ],\n        }),\n      );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n\n  private renderPageControls() {\n    const { collections } = this.state;\n    if (!this.state.showControls) {\n      return <div style={{ display: 'flex', alignItems: 'center' }}></div>;\n    }\n    return (\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        {' '}\n        {collections.length !== 0 && (\n          <Button onClick={() => this.setState({ showImportModal: true })}>\n            {t`Upload collection`}\n          </Button>\n        )}\n        <StatefulDropdown\n          items={[\n            <DropdownItem\n              key='1'\n              component={\n                <Link\n                  to={formatPath(Paths.editNamespace, {\n                    namespace: this.state.namespace.name,\n                  })}\n                >\n                  {t`Edit namespace`}\n                </Link>\n              }\n            />,\n            <React.Fragment key={'2'}>\n              {this.state.isNamespaceEmpty ? (\n                <DropdownItem\n                  onClick={() => this.setState({ isOpenNamespaceModal: true })}\n                >\n                  {t`Delete namespace`}\n                </DropdownItem>\n              ) : (\n                <Tooltip\n                  isVisible={false}\n                  content={\n                    <Trans>\n                      Cannot delete namespace until <br />\n                      collections' dependencies have <br />\n                      been deleted\n                    </Trans>\n                  }\n                  position='left'\n                >\n                  <DropdownItem isDisabled>{t`Delete namespace`}</DropdownItem>\n                </Tooltip>\n              )}\n            </React.Fragment>,\n            <DropdownItem\n              key='3'\n              component={\n                <Link\n                  to={formatPath(\n                    Paths.myImports,\n                    {},\n                    {\n                      namespace: this.state.namespace.name,\n                    },\n                  )}\n                >\n                  {t`Imports`}\n                </Link>\n              }\n            />,\n          ]}\n        />\n      </div>\n    );\n  }\n\n  private toggleImportModal(isOpen: boolean, warning?: string) {\n    const newState = { showImportModal: isOpen };\n    if (warning) {\n      newState['warning'] = warning;\n    }\n\n    if (!isOpen) {\n      newState['updateCollection'] = null;\n    }\n\n    this.setState(newState);\n  }\n\n  private deleteNamespace = () => {\n    NamespaceAPI.delete(this.state.namespace.name)\n      .then(() => {\n        this.setState({\n          redirect: formatPath(Paths.namespaces, {}),\n          confirmDelete: false,\n        });\n        this.context.setAlerts([\n          ...this.context.alerts,\n          {\n            variant: 'success',\n            title: t`Successfully deleted namespace.`,\n          },\n        ]);\n      })\n      .catch((e) => {\n        this.setState({\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Error deleting namespace.`,\n              description: e.message,\n            },\n          ],\n          isOpenNamespaceModal: false,\n          confirmDelete: false,\n        });\n      });\n  };\n\n  private closeModal = () => {\n    this.setState({ isOpenNamespaceModal: false, confirmDelete: false });\n  };\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceDetail.contextType = AppContext;\n\nexport default withRouter(NamespaceDetail);\n"],"names":["EditNamespace","props","params","ParamHelper","location","search","state","alerts","namespace","userId","newLinkURL","newLinkName","errorMessages","saving","redirect","unsavedData","unauthorized","ActiveUserAPI","then","result","setState","account_number","loadNamespace","this","tabs","id","name","push","to","breadcrumbs","namespaceBreadcrumb","url","formatPath","Paths","updateParams","p","closeAlert","i","className","tab","toLowerCase","updateNamespace","variant","onClick","saveNamespace","cancel","style","color","MyNamespaceAPI","match","response","data","links","setLinks","link","error","status","mapErrorMessages","concat","title","description","closeAlertMixin","React","withRouter","Status","ImportModal","file","undefined","errors","uploadProgress","uploadStatus","waiting","isOpen","collection","Modal","onClose","handleClose","actions","Button","key","saveFile","isDisabled","canUpload","disabled","type","onChange","e","handleFileUpload","target","files","htmlFor","renderFileIcon","width","uploading","newCollection","length","acceptedFileTypes","includes","COLLECTION_NAME_REGEX","test","split","artifact","sha256","cancelToken","CollectionAPI","loaded","total","onUploadSuccess","errorMessage","axios","messages","err","detail","code","join","msg","setOpen","NamespaceDetail","NamespaceAPI","confirmDelete","context","setAlerts","message","isOpenNamespaceModal","collections","itemCount","showImportModal","warning","updateCollection","showControls","isNamespaceEmpty","loadAll","resources","repositoryUrl","getRepoUrl","noData","filterIsSet","loadCollections","ignoredParams","warn","toggleImportModal","cancelAction","closeModal","confirmAction","deleteNamespace","confirmButtonTitle","Text","paddingBottom","Checkbox","isChecked","val","label","Alert","position","right","top","zIndex","actionClose","AlertActionCloseButton","pageControls","renderPageControls","contextSelector","selectedRepo","path","pathParams","filters","count","isTop","button","handleControlClick","action","handleCollectionAction","repo","isReadOnly","href","renderResources","find","x","deprecated","source","nonAPIParams","meta","Promise","all","reject","loadAllRepos","currentRepoCount","repoPromises","Object","keys","Constants","filter","map","results","every","nonQueryStringParams","display","alignItems","items","DropdownItem","component","Tooltip","isVisible","content","newState","contextType","AppContext"],"sourceRoot":""}
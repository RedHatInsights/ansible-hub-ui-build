{"version":3,"file":"js/collection_detail.60cd3b7ebaca53387fdc.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-content.tsx","webpack:///./src/containers/collection-detail/collection-detail.tsx","webpack:///./src/containers/collection-detail/collection-docs.tsx","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"sourcesContent":["import { CollectionDetailType, CollectionAPI } from 'src/api';\nimport { Paths } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n}\n\nexport function loadCollection(\n  repo,\n  forceReload = false,\n  callback = () => null,\n) {\n  CollectionAPI.getCached(\n    this.props.match.params['namespace'],\n    this.props.match.params['collection'],\n    repo,\n    this.state.params,\n    forceReload,\n  )\n    .then(result => {\n      this.setState({ collection: result }, callback);\n    })\n    .catch(result => {\n      this.props.history.push(Paths.notFound);\n    });\n}\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionContentList,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: 'Content' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionContentList\n              contents={collection.latest_version.metadata.contents}\n              collection={collection.name}\n              namespace={collection.namespace.name}\n              params={params}\n              updateParams={p => this.updateParams(p)}\n            ></CollectionContentList>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\n\nCollectionContent.contextType = AppContext;\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        name: collection.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='details'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionInfo\n              {...collection}\n              updateParams={p => this.updateParams(p)}\n              params={this.state.params}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDetail);\n\nCollectionDetail.contextType = AppContext;\n","import * as React from 'react';\nimport './collection-detail.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { HashLink } from 'react-router-hash-link';\n\nimport { Alert } from '@patternfly/react-core';\n\nimport {\n  CollectionHeader,\n  TableOfContents,\n  LoadingPageWithHeader,\n  Main,\n  EmptyStateCustom,\n} from 'src/components';\n\nimport { RenderPluginDoc } from '@ansible/galaxy-doc-builder';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper, sanitizeDocsUrls } from 'src/utilities';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\n// renders markdown files in collection docs/ directory\nclass CollectionDocs extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  docsRef: any;\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n\n    this.docsRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { params, collection } = this.state;\n    const urlFields = this.props.match.params;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // If the parser can't find anything that matches the URL, neither of\n    // these variables should be set\n    let displayHTML: string;\n    let pluginData;\n\n    const contentType = urlFields['type'] || 'docs';\n    const contentName = urlFields['name'] || urlFields['page'] || null;\n\n    if (contentType === 'docs' && contentName) {\n      if (collection.latest_version.docs_blob.documentation_files) {\n        const file = collection.latest_version.docs_blob.documentation_files.find(\n          x => sanitizeDocsUrls(x.name) === urlFields['page'],\n        );\n\n        if (file) {\n          displayHTML = file.html;\n        }\n      }\n    } else if (contentName) {\n      // check if contents exists\n      if (collection.latest_version.docs_blob.contents) {\n        const content = collection.latest_version.docs_blob.contents.find(\n          x => x.content_type === contentType && x.content_name === contentName,\n        );\n\n        if (content) {\n          if (contentType === 'role') {\n            displayHTML = content['readme_html'];\n          } else {\n            pluginData = content;\n          }\n        }\n      }\n    } else {\n      if (collection.latest_version.docs_blob.collection_readme) {\n        displayHTML =\n          collection.latest_version.docs_blob.collection_readme.html;\n      }\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: 'Documentation' },\n    ];\n\n    // scroll to top of page\n    if (this.docsRef.current) {\n      this.docsRef.current.scrollIntoView();\n    }\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='documentation'\n          className='header'\n          repo={this.context.selectedRepo}\n        />\n        <Main className='main'>\n          <Section className='docs-container'>\n            <TableOfContents\n              className='sidebar'\n              namespace={collection.namespace.name}\n              collection={collection.name}\n              docs_blob={collection.latest_version.docs_blob}\n              selectedName={contentName}\n              selectedType={contentType}\n              params={params}\n            ></TableOfContents>\n            <div className='body docs pf-c-content' ref={this.docsRef}>\n              {displayHTML || pluginData ? (\n                // if neither variable is set, render not found\n                displayHTML ? (\n                  // if displayHTML is set, render it\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: displayHTML,\n                    }}\n                  ></div>\n                ) : (\n                  // if plugin data is set render it\n                  <RenderPluginDoc\n                    plugin={pluginData}\n                    renderModuleLink={moduleName =>\n                      this.renderModuleLink(\n                        moduleName,\n                        collection,\n                        params,\n                        collection.latest_version.metadata.contents,\n                      )\n                    }\n                    renderDocLink={(name, href) =>\n                      this.renderDocLink(name, href, collection, params)\n                    }\n                    renderTableOfContentsLink={(title, section) => (\n                      <HashLink to={'#' + section}>{title}</HashLink>\n                    )}\n                    renderWarning={text => (\n                      <Alert isInline variant='warning' title={text} />\n                    )}\n                  />\n                )\n              ) : (\n                this.renderNotFound(collection.name)\n              )}\n            </div>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderDocLink(name, href, collection, params) {\n    if (!!href && href.startsWith('http')) {\n      return (\n        <a href={href} target='_blank'>\n          {name}\n        </a>\n      );\n    } else if (!!href) {\n      // TODO: right now this will break if people put\n      // ../ at the front of their urls. Need to find a\n      // way to document this\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionDocsPageByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              page: sanitizeDocsUrls(href),\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {name}\n        </Link>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private renderModuleLink(moduleName, collection, params, allContent) {\n    const module = allContent.find(\n      x => x.content_type === 'module' && x.name === moduleName,\n    );\n\n    if (module) {\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionContentDocsByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              type: 'module',\n              name: moduleName,\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {moduleName}\n        </Link>\n      );\n    } else {\n      return moduleName;\n    }\n  }\n\n  private renderNotFound(collectionName) {\n    return (\n      <EmptyStateCustom\n        title={'Not found'}\n        description={\n          'The file is not available for this version of ' + collectionName\n        }\n        icon={ExclamationCircleIcon}\n      />\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDocs);\n\nCollectionDocs.contextType = AppContext;\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport { ImportAPI, ImportDetailType, ImportListType } from 'src/api';\nimport {\n  CollectionHeader,\n  LoadingPageWithHeader,\n  ImportConsole,\n  Main,\n} from 'src/components';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: 'Import log' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <Section className='body'>\n            <ImportConsole\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={_ => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = 'Could not load import log';\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(this.context.selectedRepo, forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.namespace.name,\n          name: this.state.collection.name,\n          version: this.state.collection.latest_version.version,\n          sort: '-created',\n        })\n          .then(importListResult => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then(importDetailResult => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch(err => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch(err => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n\nCollectionImportLog.contextType = AppContext;\n"],"names":["loadCollection","repo","forceReload","callback","CollectionAPI","this","props","match","params","state","then","result","setState","collection","history","push","Paths","CollectionContent","ParamHelper","location","search","undefined","context","selectedRepo","breadcrumbs","namespaceBreadcrumb","url","formatPath","namespace","name","updateParams","activeTab","className","contents","latest_version","metadata","p","React","withRouter","contextType","AppContext","CollectionDetail","CollectionDocs","docsRef","displayHTML","pluginData","urlFields","contentType","contentName","docs_blob","documentation_files","file","find","x","sanitizeDocsUrls","html","content","content_type","content_name","collection_readme","current","scrollIntoView","selectedName","selectedType","ref","dangerouslySetInnerHTML","__html","RenderPluginDoc","plugin","renderModuleLink","moduleName","renderDocLink","href","renderTableOfContentsLink","title","section","to","renderWarning","text","isInline","variant","renderNotFound","startsWith","target","page","allContent","type","collectionName","description","icon","ExclamationCircleIcon","CollectionImportLog","loadingImports","selectedImportDetail","selectedImport","apiError","loadData","loading","task","followMessages","setFollowMessages","_","hideCollectionName","failMsg","ImportAPI","version","sort","importListResult","importObj","data","id","importDetailResult","err"],"sourceRoot":""}
{"version":3,"file":"js/28.b3874aa0cb40ac5e27e1.js","mappings":"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","sources":["webpack:///./src/containers/task-management/task-list-view.tsx"],"sourcesContent":["import { i18n } from '@lingui/core';\nimport { Trans, t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { TaskManagementAPI } from 'src/api';\nimport { TaskType } from 'src/api/response-types/task';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  StatusIndicator,\n  Tooltip,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper, errorMessage, filterIsSet } from 'src/utilities';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport './task.scss';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: Array<TaskType>;\n  itemCount: number;\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  selectedTask: TaskType;\n  unauthorised: boolean;\n  inputText: string;\n}\n\nconst maybeTranslate = (name) =>\n  (Constants.TASK_NAMES[name] && i18n._(Constants.TASK_NAMES[name])) || name;\n\nexport class TaskListView extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      cancelModalVisible: false,\n      selectedTask: null,\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (!user || user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.queryTasks();\n    }\n\n    if (!hasPermission('core.view_task')) {\n      this.addAlert(\n        t`You do not have permission to view all tasks. Only tasks created by you are visible.`,\n        'info',\n      );\n    }\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      items,\n      alerts,\n      cancelModalVisible,\n      unauthorised,\n    } = this.state;\n\n    const noData =\n      items.length === 0 && !filterIsSet(params, ['name__contains', 'state']);\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader title={t`Task Management`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No tasks yet`}\n            description={t`Tasks will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-list-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) =>\n                              this.updateParams(p, () => this.queryTasks())\n                            }\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name__contains',\n                                title: t`Task name`,\n                              },\n                              {\n                                id: 'state',\n                                title: t`Status`,\n                                inputType: 'select',\n                                options: [\n                                  {\n                                    id: 'completed',\n                                    title: t`Completed`,\n                                  },\n                                  {\n                                    id: 'failed',\n                                    title: t`Failed`,\n                                  },\n                                  {\n                                    id: 'running',\n                                    title: t`Running`,\n                                  },\n                                  {\n                                    id: 'waiting',\n                                    title: t`Waiting`,\n                                  },\n                                ],\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.queryTasks())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.queryTasks());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name__contains: t`Task name`,\n                      state: t`Status`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryTasks())\n                  }\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (items.length === 0) {\n      return <EmptyStateFilter />;\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Task name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Created on`,\n          type: 'numeric',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Started at`,\n          type: 'numeric',\n          id: 'started_at',\n        },\n        {\n          title: t`Finished at`,\n          type: 'numeric',\n          id: 'finished_at',\n        },\n        {\n          title: t`Status`,\n          type: 'alpha',\n          id: 'state',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Task list`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => this.updateParams(p, () => this.queryTasks())}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, state, pulp_created, started_at, finished_at, pulp_href } =\n      item;\n    const taskId = parsePulpIDFromURL(pulp_href);\n    return (\n      <tr key={index}>\n        <td>\n          <Link to={formatPath(Paths.taskDetail, { task: taskId })}>\n            <Tooltip content={maybeTranslate(name)}>{name}</Tooltip>\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <DateComponent date={started_at} />\n        </td>\n        <td>\n          <DateComponent date={finished_at} />\n        </td>\n        <td>\n          <StatusIndicator status={state} />\n        </td>\n        <td>{this.cancelButton(state, item)}</td>\n      </tr>\n    );\n  }\n\n  private cancelButton(state, selectedTask) {\n    switch (state) {\n      case 'running':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n      case 'waiting':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n    }\n  }\n\n  private renderCancelModal() {\n    const { selectedTask } = this.state;\n    const name = maybeTranslate(selectedTask.name);\n\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        title={t`Stop task?`}\n        confirmAction={() => this.selectedTask(this.state.selectedTask, name)}\n        confirmButtonTitle={t`Yes, stop`}\n      >{t`${name} will be cancelled.`}</ConfirmModal>\n    );\n  }\n\n  private selectedTask(task, name) {\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          selectedTask: null,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: name,\n              description: (\n                <Trans>Task &quot;{name}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.queryTasks();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${name}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private queryTasks() {\n    this.setState({ loading: true }, () => {\n      TaskManagementAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Tasks list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              },\n            ],\n          });\n        });\n    });\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(TaskListView);\n\nTaskListView.contextType = AppContext;\n"],"names":["maybeTranslate","name","Constants","i18n","TaskListView","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","items","loading","itemCount","alerts","cancelModalVisible","selectedTask","unauthorised","inputText","_createClass","key","value","_this$context","this","context","user","hasPermission","is_anonymous","setState","queryTasks","addAlert","_this2","_this$state","noData","length","filterIsSet","React","AlertList","closeAlert","i","renderCancelModal","BaseHeader","title","EmptyStateUnauthorized","EmptyStateNoData","description","Main","LoadingPageSpinner","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","inputType","options","Pagination","count","isTop","AppliedFilters","ignoredParams","niceNames","name__contains","renderTable","_this3","EmptyStateFilter","sortTableOptions","headers","type","SortTable","map","item","renderTableRow","index","pulp_created","started_at","finished_at","pulp_href","taskId","parsePulpIDFromURL","Link","to","formatPath","Paths","task","Tooltip","content","DateComponent","date","StatusIndicator","status","cancelButton","_this4","Button","variant","onClick","_this5","ConfirmModal","cancelAction","confirmAction","confirmButtonTitle","_this6","TaskManagementAPI","then","concat","_toConsumableArray","Trans","values","e","_e$response","response","statusText","errorMessage","get","closeAlertMixin","_this7","result","data","results","_e$response2","withRouter","contextType","AppContext"],"sourceRoot":""}
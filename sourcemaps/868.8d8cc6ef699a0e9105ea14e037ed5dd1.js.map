{"version":3,"file":"js/868.d7448dda8539bdc76cb1.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersion,\n  CollectionVersionAPI,\n  Repositories,\n} from 'src/api';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport {\n  ParamHelper,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersion;\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections());\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && version.sign_state === 'signed'\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {version.sign_state === 'unsigned' &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(version.namespace, version.name, version.version);\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        {this.renderButtons(version)}\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.state.updatingVersions.includes(version)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && version.sign_state === 'unsigned';\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button onClick={() => this.openUploadCertificateModal(version)}>\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() =>\n          this.updateCertification(\n            version,\n            Constants.NEEDSREVIEW,\n            Constants.PUBLISHED,\n          )\n        }\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true, Constants.PUBLISHED),\n            rejectDropDown(false, Constants.PUBLISHED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false, Constants.NOTCERTIFIED),\n            rejectDropDown(true, Constants.NOTCERTIFIED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            rejectDropDown(false, Constants.NEEDSREVIEW),\n            importsLink,\n          ]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersion) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const version = this.state.versionToUploadCertificate;\n    const signed_collection = `${PULP_API_BASE_PATH}content/ansible/collection_versions/${version.id}/`;\n\n    return Repositories.getRepository({\n      name: 'staging',\n    })\n      .then((response) =>\n        CertificateUploadAPI.upload({\n          file,\n          repository: response.data.results[0].pulp_href,\n          signed_collection,\n        }),\n      )\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections())\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    this.setState({ updatingVersions: [version] });\n\n    return CollectionVersionAPI.setRepository(\n      version.namespace,\n      version.name,\n      version.version,\n      originalRepo,\n      destinationRepo,\n    )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections())\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            versions: result.data.data,\n            itemCount: result.data.meta.count,\n            loading: false,\n            updatingVersions: [],\n          });\n        })\n        .catch((error) => {\n          this.addAlert(\n            t`Error loading collections.`,\n            'danger',\n            error?.message,\n          );\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }),\n    );\n  }\n\n  private download(namespace: string, name: string, version: string) {\n    CollectionAPI.getDownloadURL('staging', namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","props","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","this","context","user","hasPermission","is_anonymous","queryCollections","setState","title","closeAlert","i","className","Toolbar","ToolbarGroup","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","inputType","options","Constants","count","isTop","ignoredParams","niceValues","repository","niceNames","renderTable","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","length","filterIsSet","description","sortTableOptions","headers","type","map","version","renderRow","includes","repository_list","display_signatures","featureFlags","Label","variant","color","icon","sign_state","can_upload_signatures","require_upload_signatures","index","key","namespace","name","Link","to","formatPath","Paths","collection","repo","Button","ButtonVariant","onClick","download","date","created_at","renderStatus","renderButtons","collection_auto_sign","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","updateCertification","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","originalRepo","rejectDropDown","kebabItems","buttons","file","signed_collection","PULP_API_BASE_PATH","Repositories","then","response","CertificateUploadAPI","data","results","pulp_href","result","waitForTask","parsePulpIDFromURL","task","addAlert","error","errorMessage","status","statusText","destinationRepo","CollectionVersionAPI","remove_task_id","waitMs","meta","message","CollectionAPI","downloadURL","window","assign","closeAlertMixin","React","withRouter","contextType","AppContext"],"sourceRoot":""}
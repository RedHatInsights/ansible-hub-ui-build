{"version":3,"file":"js/4813.4dd9045b7f4feba90b17.js","mappings":"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","sources":["webpack:///./src/containers/my-imports/my-imports.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport { cloneDeep } from 'lodash';\nimport * as React from 'react';\nimport {\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n  ImportAPI,\n  ImportDetailType,\n  ImportListType,\n  PulpStatus,\n} from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  ImportConsole,\n  ImportList,\n  Main,\n  closeAlertMixin,\n} from 'src/components';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport './my-imports.scss';\n\ninterface IState {\n  selectedImport: ImportListType;\n  importList: ImportListType[];\n  selectedImportDetails: ImportDetailType;\n  collection: CollectionVersionSearch;\n  params: {\n    page_size?: number;\n    page?: number;\n    keyword?: string;\n    namespace?: string;\n  };\n  resultsCount: number;\n  importDetailError: string;\n  followLogs: boolean;\n  loadingImports: boolean;\n  loadingImportDetails: boolean;\n  alerts: AlertType[];\n}\n\nclass MyImports extends React.Component<RouteProps, IState> {\n  polling: ReturnType<typeof setInterval>;\n  topOfPage: React.RefObject<HTMLDivElement>;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    this.topOfPage = React.createRef();\n\n    this.state = {\n      selectedImport: undefined,\n      importList: [],\n      params: params,\n      selectedImportDetails: undefined,\n      resultsCount: 0,\n      importDetailError: '',\n      followLogs: false,\n      loadingImports: true,\n      loadingImportDetails: true,\n      collection: null,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    // Load namespaces, use the namespaces to query the import list,\n    // use the import list to load the task details\n    this.loadImportList(() => this.loadTaskDetails());\n\n    this.polling = setInterval(() => {\n      if (!this.state.params.namespace) {\n        return;\n      }\n\n      const { selectedImport, selectedImportDetails } = this.state;\n      const allowedStates = [PulpStatus.running, PulpStatus.waiting];\n\n      // selectedImportDetails can be failed while selectedImport is still running, poll() updates selectedImport\n      if (\n        allowedStates.includes(selectedImportDetails?.state) ||\n        allowedStates.includes(selectedImport?.state)\n      ) {\n        this.poll();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.polling);\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(alert) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  render() {\n    const {\n      selectedImport,\n      importList,\n      params,\n      selectedImportDetails,\n      resultsCount,\n      loadingImports,\n      loadingImportDetails,\n      importDetailError,\n      followLogs,\n      collection,\n    } = this.state;\n\n    if (!importList) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <div ref={this.topOfPage}></div>\n        <BaseHeader title={t`My imports`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <Main>\n          <section className='body'>\n            <div className='hub-page-container' data-cy='MyImports'>\n              <div className='import-list'>\n                <ImportList\n                  addAlert={(alert) => this.addAlert(alert)}\n                  importList={importList}\n                  selectedImport={selectedImport}\n                  loading={loadingImports}\n                  numberOfResults={resultsCount}\n                  params={params}\n                  selectImport={(sImport) => this.selectImport(sImport)}\n                  updateParams={(params) => {\n                    this.updateParams(params, () => {\n                      if (params.namespace) {\n                        this.setState(\n                          {\n                            loadingImports: true,\n                            loadingImportDetails: true,\n                          },\n                          () =>\n                            this.loadImportList(() => this.loadTaskDetails()),\n                        );\n                      } else {\n                        this.setState({\n                          importDetailError: t`No data`,\n                          loadingImportDetails: false,\n                        });\n                      }\n                    });\n                  }}\n                />\n              </div>\n\n              <div className='hub-import-console'>\n                <ImportConsole\n                  empty={!this.state.params.namespace}\n                  loading={loadingImportDetails}\n                  task={selectedImportDetails}\n                  followMessages={followLogs}\n                  setFollowMessages={(isFollowing) => {\n                    this.setState({\n                      followLogs: isFollowing,\n                    });\n                  }}\n                  selectedImport={selectedImport}\n                  apiError={importDetailError}\n                  collection={collection}\n                />\n              </div>\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private selectImport(sImport) {\n    this.setState(\n      { selectedImport: sImport, loadingImportDetails: true },\n      () => {\n        this.topOfPage.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n        this.loadTaskDetails();\n      },\n    );\n  }\n\n  private poll() {\n    this.loadTaskDetails(() => {\n      // Update the state of the selected import in the list if it's\n      // different from the one loaded from the API.\n      const { selectedImport, selectedImportDetails, importList } = this.state;\n\n      if (!selectedImportDetails) {\n        return;\n      }\n\n      if (selectedImport.state !== selectedImportDetails.state) {\n        const importIndex = importList.findIndex(\n          (x) => x.id === selectedImport.id,\n        );\n\n        const imports = cloneDeep(importList);\n        const newSelectedImport = cloneDeep(selectedImport);\n\n        newSelectedImport.state = selectedImportDetails.state;\n        newSelectedImport.finished_at = selectedImportDetails.finished_at;\n\n        imports[importIndex] = newSelectedImport;\n\n        this.setState({\n          selectedImport: newSelectedImport,\n          importList: imports,\n        });\n      }\n    });\n  }\n\n  private loadImportList(callback?: () => void) {\n    if (!this.state.params.namespace) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n      return;\n    }\n\n    ImportAPI.list({ ...this.state.params, sort: '-created' })\n      .then((importList) => {\n        this.setState(\n          {\n            importList: importList.data.data,\n            selectedImport: importList.data.data[0],\n            resultsCount: importList.data.meta.count,\n            loadingImports: false,\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadTaskDetails(callback?: () => void) {\n    if (!this.state.selectedImport) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n    } else {\n      ImportAPI.get(this.state.selectedImport.id)\n        .then((result) => {\n          this.setState(\n            {\n              importDetailError: '',\n              loadingImportDetails: false,\n              selectedImportDetails: result.data,\n              collection: null,\n            },\n            () => {\n              const importDeets = this.state.selectedImportDetails;\n\n              // have to use list instead of get because repository_list isn't\n              // available on collection version details\n              CollectionVersionAPI.list({\n                namespace: importDeets.namespace,\n                name: importDeets.name,\n                version: importDeets.version,\n              })\n                .then((result) => {\n                  if (result.data.meta.count === 1) {\n                    this.setState({\n                      collection: result.data.data[0],\n                    });\n                  }\n                })\n                .finally(() => {\n                  if (callback) {\n                    callback();\n                  }\n                });\n            },\n          );\n        })\n        .catch(() => {\n          this.setState({\n            selectedImportDetails: undefined,\n            importDetailError: t`Error fetching import from API`,\n            loadingImportDetails: false,\n          });\n        });\n    }\n  }\n}\n\nexport default withRouter(MyImports);\n"],"names":["MyImports","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","topOfPage","React","state","selectedImport","undefined","importList","selectedImportDetails","resultsCount","importDetailError","followLogs","loadingImports","loadingImportDetails","collection","alerts","_createClass","key","value","_this2","this","loadImportList","loadTaskDetails","polling","setInterval","namespace","_this2$state","allowedStates","PulpStatus","includes","poll","clearInterval","get","closeAlertMixin","alert","setState","concat","_toConsumableArray","_this3","_this$state","ref","BaseHeader","title","i18n","AlertList","closeAlert","i","Main","className","ImportList","addAlert","loading","numberOfResults","selectImport","sImport","updateParams","ImportConsole","empty","task","followMessages","setFollowMessages","isFollowing","apiError","_this4","current","scrollIntoView","behavior","_this5","_this5$state","importIndex","findIndex","x","id","imports","cloneDeep","newSelectedImport","finished_at","callback","_this6","ImportAPI","_objectSpread","sort","then","data","meta","count","result","console","log","_this7","importDeets","CollectionVersionAPI","name","version","withRouter"],"sourceRoot":""}
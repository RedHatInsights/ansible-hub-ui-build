{"version":3,"file":"js/settings.1655708985560.ea36ced7cc4d13b3ddea.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx","webpack:///./src/containers/task-management/task-list-view.tsx","webpack:///./src/containers/task-management/task_detail.tsx","webpack:///./src/containers/token/token-insights.tsx"],"sourcesContent":["import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n  Label,\n} from '@patternfly/react-core';\n\nimport {\n  ExclamationTriangleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  CollectionVersionAPI,\n  CollectionVersion,\n  TaskAPI,\n  CertificateUploadAPI,\n  Repositories,\n} from 'src/api';\nimport { errorMessage, filterIsSet, ParamHelper } from 'src/utilities';\nimport {\n  LoadingPageWithHeader,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n  UploadSingCertificateModal,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate: CollectionVersion;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: undefined,\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !this.context.user ||\n      this.context.user.is_anonymous ||\n      !this.context.user.model_permissions.move_collection\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-certification-dashboard-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections());\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {version.sign_state === 'signed'\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {version.sign_state === 'unsigned' &&\n          this.context.settings.GALAXY_REQUIRE_SIGNATURE_FOR_APPROVAL\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        {this.renderButtons(version)}\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    const { featureFlags } = this.context;\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const canSign =\n      featureFlags?.collection_signing && featureFlags?.collection_auto_sign;\n\n    if (this.state.updatingVersions.includes(version)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const needUploadSignature =\n      this.context.settings.GALAXY_SIGNATURE_UPLOAD_ENABLED &&\n      version.sign_state === 'unsigned';\n    const approveButton = [\n      needUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button onClick={() => this.openUploadCertificateModal(version)}>\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={needUploadSignature}\n        onClick={() =>\n          this.updateCertification(\n            version,\n            Constants.NEEDSREVIEW,\n            Constants.PUBLISHED,\n          )\n        }\n      >\n        {canSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {canSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true, Constants.PUBLISHED),\n            rejectDropDown(false, Constants.PUBLISHED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false, Constants.NOTCERTIFIED),\n            rejectDropDown(true, Constants.NOTCERTIFIED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            rejectDropDown(false, Constants.NEEDSREVIEW),\n            importsLink,\n          ]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersion) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private async submitCertificate(file: File) {\n    const version = this.state.versionToUploadCertificate;\n    const response = await Repositories.getRepository({\n      name: 'staging',\n    });\n    const signed_collection = `${PULP_API_BASE_PATH}content/ansible/collection_versions/${version.id}/`;\n\n    CertificateUploadAPI.upload({\n      file,\n      repository: response.data.results[0].pulp_href,\n      signed_collection,\n    })\n      .then((result) => {\n        // This is a hack because it task return the full task api path:\n        // eg.: /api/automation-hub/pulp/api/v3/tasks/0be64cb4-3b7e-4a6b-b35d-c3b589923a90/\n        this.waitForUpdate(\n          result.data.task.slice(0, -1).split('/').pop(),\n          version,\n        );\n        this.addAlert(\n          <Trans>\n            Certificate for collection &quot;{version.namespace} {version.name}{' '}\n            v{version.version}&quot; has been successfully uploaded.\n          </Trans>,\n          'success',\n        );\n      })\n      .catch((error) => {\n        const { status, statusText } = error.response;\n        this.setState({\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: t`The certificate for \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n            description: errorMessage(status, statusText),\n          }),\n        });\n      })\n      .finally(() => {\n        this.closeUploadCertificateModal();\n      });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: undefined,\n    });\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    const { alerts } = this.state;\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: [],\n      },\n      () =>\n        CollectionVersionAPI.setRepository(\n          version.namespace,\n          version.name,\n          version.version,\n          originalRepo,\n          destinationRepo,\n        )\n          .then(\n            (result) =>\n              // Since pulp doesn't reply with the new object, perform a\n              // second query to get the updated data\n              {\n                this.setState({\n                  updatingVersions: [version],\n                });\n                this.waitForUpdate(result.data.remove_task_id, version);\n              },\n            this.addAlert(\n              <Trans>\n                Certification status for collection &quot;{version.namespace}{' '}\n                {version.name} v{version.version}&quot; has been successfully\n                updated.\n              </Trans>,\n              'success',\n            ),\n          )\n          .catch((error) => {\n            const { status, statusText } = error.response;\n            this.setState({\n              updatingVersions: [],\n              alerts: alerts.concat({\n                variant: 'danger',\n                title: t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                description: errorMessage(status, statusText),\n              }),\n            });\n          }),\n    );\n  }\n\n  private waitForUpdate(result, version) {\n    const taskId = result;\n    return TaskAPI.get(taskId).then(async (result) => {\n      if (result.data.state === 'waiting' || result.data.state === 'running') {\n        await new Promise((r) => setTimeout(r, 500));\n        this.waitForUpdate(taskId, version);\n      } else if (result.data.state === 'completed') {\n        return CollectionVersionAPI.list(this.state.params).then(\n          async (result) => {\n            this.setState({\n              versions: result.data.data,\n              updatingVersions: [],\n            });\n          },\n        );\n      } else {\n        this.setState({\n          updatingVersions: [],\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n            description: errorMessage(500, t`Internal Server Error`),\n          }),\n        });\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        });\n      }),\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n","import { t, Trans } from '@lingui/macro';\nimport { i18n } from '@lingui/core';\n\nimport * as React from 'react';\nimport './task.scss';\nimport { Constants } from 'src/constants';\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  Button,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { ParamHelper, filterIsSet, errorMessage } from '../../utilities';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  closeAlertMixin,\n  ConfirmModal,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  Tooltip,\n  StatusIndicator,\n} from 'src/components';\nimport { TaskManagementAPI } from 'src/api';\nimport { TaskType } from 'src/api/response-types/task';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: Array<TaskType>;\n  itemCount: number;\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  selectedTask: TaskType;\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class TaskListView extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      cancelModalVisible: false,\n      selectedTask: null,\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.queryTasks();\n    }\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      items,\n      alerts,\n      cancelModalVisible,\n      unauthorised,\n    } = this.state;\n\n    const noData =\n      items.length === 0 && !filterIsSet(params, ['name__contains', 'state']);\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader title={t`Task Management`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No tasks yet`}\n            description={t`Tasks will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-task-list'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) => {\n                              p['page'] = 1;\n                              this.updateParams(p, () => this.queryTasks());\n                            }}\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name__contains',\n                                title: t`Task name`,\n                              },\n                              {\n                                id: 'state',\n                                title: t`Status`,\n                                inputType: 'select',\n                                options: [\n                                  {\n                                    id: 'completed',\n                                    title: t`Completed`,\n                                  },\n                                  {\n                                    id: 'failed',\n                                    title: t`Failed`,\n                                  },\n                                  {\n                                    id: 'running',\n                                    title: t`Running`,\n                                  },\n                                  {\n                                    id: 'waiting',\n                                    title: t`Waiting`,\n                                  },\n                                ],\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.queryTasks())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.queryTasks());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name__contains: t`Task name`,\n                      state: t`Status`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryTasks())\n                  }\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (items.length === 0) {\n      return <EmptyStateFilter />;\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Task name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Created on`,\n          type: 'numeric',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Started at`,\n          type: 'numeric',\n          id: 'started_at',\n        },\n        {\n          title: t`Finished at`,\n          type: 'numeric',\n          id: 'finished_at',\n        },\n        {\n          title: t`Status`,\n          type: 'alpha',\n          id: 'state',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Task list`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => {\n            p['page'] = 1;\n            this.updateParams(p, () => this.queryTasks());\n          }}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, state, pulp_created, started_at, finished_at, pulp_href } =\n      item;\n    const taskId = parsePulpIDFromURL(pulp_href);\n    return (\n      <tr key={index}>\n        <td>\n          <Link to={formatPath(Paths.taskDetail, { task: taskId })}>\n            <Tooltip\n              content={\n                (Constants.TASK_NAMES[name] &&\n                  i18n._(Constants.TASK_NAMES[name])) ||\n                name\n              }\n            >\n              {name}\n            </Tooltip>\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <DateComponent date={started_at} />\n        </td>\n        <td>\n          <DateComponent date={finished_at} />\n        </td>\n        <td>\n          <StatusIndicator status={state} />\n        </td>\n        <td>{this.cancelButton(state, item)}</td>\n      </tr>\n    );\n  }\n\n  private cancelButton(state, selectedTask) {\n    switch (state) {\n      case 'running':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n      case 'waiting':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n    }\n  }\n\n  private renderCancelModal() {\n    const name =\n      Constants.TASK_NAMES[this.state.selectedTask.name] ||\n      this.state.selectedTask.name;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        title={t`Stop task?`}\n        confirmAction={() => this.selectedTask(this.state.selectedTask, name)}\n        confirmButtonTitle={t`Yes, stop`}\n      >{t`${name} will be cancelled.`}</ConfirmModal>\n    );\n  }\n\n  private selectedTask(task, name) {\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          selectedTask: null,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: name,\n              description: (\n                <Trans>Task &quot;{name}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.queryTasks();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${name}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private queryTasks() {\n    this.setState({ loading: true }, () => {\n      TaskManagementAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Tasks list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              },\n            ],\n          });\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(TaskListView);\n\nTaskListView.contextType = AppContext;\n","import * as React from 'react';\nimport './task.scss';\nimport { i18n } from '@lingui/core';\nimport { t, Trans } from '@lingui/macro';\nimport {\n  Link,\n  withRouter,\n  Redirect,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  Breadcrumbs,\n  closeAlertMixin,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateCustom,\n  LoadingPageSpinner,\n  Main,\n  StatusIndicator,\n} from 'src/components';\nimport {\n  Button,\n  CodeBlock,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Title,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\nimport { TaskType } from 'src/api/response-types/task';\nimport { GenericPulpAPI, TaskManagementAPI } from 'src/api';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport { capitalize } from 'lodash';\nimport { errorMessage } from 'src/utilities';\n\ninterface IState {\n  loading: boolean;\n  task: TaskType;\n  parentTask: TaskType;\n  childTasks: TaskType[];\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  taskName: string;\n  resources: { name: string; type: string }[];\n  redirect: string;\n  polling: ReturnType<typeof setInterval>;\n}\n\nclass TaskDetail extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      task: null,\n      parentTask: null,\n      childTasks: [],\n      alerts: [],\n      cancelModalVisible: false,\n      taskName: '',\n      resources: [],\n      redirect: null,\n      polling: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  componentWillUnmount() {\n    if (this.state.polling) {\n      clearInterval(this.state.polling);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params['task'] !== this.props.match.params['task']) {\n      this.setState({ loading: true });\n      this.loadContent();\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      task,\n      parentTask,\n      childTasks,\n      cancelModalVisible,\n      alerts,\n      taskName,\n      resources,\n      redirect,\n    } = this.state;\n    const breadcrumbs = [\n      { url: Paths.taskList, name: t`Task management` },\n      { name: task ? taskName : '' },\n    ];\n    let parentTaskId = null;\n    if (parentTask) {\n      parentTaskId = parsePulpIDFromURL(parentTask.pulp_href);\n    }\n    if (redirect) {\n      return <Redirect to={redirect}></Redirect>;\n    }\n\n    return loading ? (\n      <LoadingPageSpinner />\n    ) : (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader\n          title={taskName}\n          breadcrumbs={<Breadcrumbs links={breadcrumbs}></Breadcrumbs>}\n          pageControls={\n            ['running', 'waiting'].includes(task.state) && (\n              <Button\n                variant='secondary'\n                onClick={() => this.setState({ cancelModalVisible: true })}\n              >\n                {t`Stop task`}\n              </Button>\n            )\n          }\n          status={\n            <StatusIndicator\n              className={'hub-c-task-status'}\n              status={task.state}\n            />\n          }\n        />\n        <Main>\n          <Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task detail`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task name`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.name}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    {task.name !== taskName && (\n                      <DescriptionListGroup>\n                        <DescriptionListTerm>{t`Descriptive name`}</DescriptionListTerm>\n                        <DescriptionListDescription>\n                          {taskName}\n                        </DescriptionListDescription>\n                      </DescriptionListGroup>\n                    )}\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Finished at`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.finished_at} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Created on`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.pulp_created} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task groups`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task group`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.task_group ? task.task_group : t`No task group`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Parent task`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {parentTask ? (\n                          <Link\n                            to={formatPath(Paths.taskDetail, {\n                              task: parentTaskId,\n                            })}\n                          >\n                            {(Constants.TASK_NAMES[parentTask.name] &&\n                              i18n._(Constants.TASK_NAMES[parentTask.name])) ||\n                              parentTask.name}\n                          </Link>\n                        ) : (\n                          t`No parent task`\n                        )}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Child tasks`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {childTasks.length\n                          ? childTasks.map((childTask) => {\n                              const childTaskId = parsePulpIDFromURL(\n                                childTask.pulp_href,\n                              );\n                              return (\n                                <React.Fragment key={childTaskId}>\n                                  <Link\n                                    to={formatPath(Paths.taskDetail, {\n                                      task: childTaskId,\n                                    })}\n                                  >\n                                    {(Constants.TASK_NAMES[childTask.name] &&\n                                      i18n._(\n                                        Constants.TASK_NAMES[childTask.name],\n                                      )) ||\n                                      childTask.name}\n                                  </Link>\n                                  <br />\n                                </React.Fragment>\n                              );\n                            })\n                          : t`No child task`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Reserve resources`}\n                  </Title>\n                  <br />\n                  {resources.length ? (\n                    <DescriptionList isHorizontal>\n                      {resources.map((resource, index) => {\n                        return (\n                          <React.Fragment key={resource.type + index}>\n                            <hr />\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>{t`Type`}</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {resource.type}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            {resource.name && (\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>{t`Name`}</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {resource.name}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                          </React.Fragment>\n                        );\n                      })}\n                    </DescriptionList>\n                  ) : (\n                    t`There's no resource record`\n                  )}\n                </section>\n              </FlexItem>\n            </Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                {!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Progress messages`}\n                    </Title>\n                    <br />\n                    {task.progress_reports.length ? (\n                      <DescriptionList isHorizontal>\n                        {task.progress_reports\n                          .reverse()\n                          .map((report, index) => {\n                            return (\n                              <React.Fragment key={index}>\n                                <hr />\n                                {Object.keys(report).map((key, index) => {\n                                  return (\n                                    !!report[key] && (\n                                      <DescriptionListGroup key={key + index}>\n                                        <DescriptionListTerm>\n                                          {{\n                                            message: t`Message`,\n                                            code: t`Code`,\n                                            state: t`State`,\n                                            done: t`Done`,\n                                          }[key] || capitalize(key)}\n                                        </DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                          {report[key]}\n                                        </DescriptionListDescription>\n                                      </DescriptionListGroup>\n                                    )\n                                  );\n                                })}{' '}\n                              </React.Fragment>\n                            );\n                          })}\n                      </DescriptionList>\n                    ) : (\n                      <EmptyStateCustom\n                        icon={CubesIcon}\n                        title={t`There is no progress message.`}\n                        description={t`There is no progress message.`}\n                      />\n                    )}\n                  </section>\n                )}\n                {!!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Error message`}\n                    </Title>\n                    <br />\n                    <React.Fragment>\n                      <Title headingLevel='h3'>{t`Description`}</Title>\n                      <CodeBlock>{task.error.description}</CodeBlock>\n                      <Title headingLevel='h3'>{t`Traceback`}</Title>\n                      <CodeBlock className={'hub-code-block'}>\n                        {task.error.traceback}\n                      </CodeBlock>\n                    </React.Fragment>\n                  </section>\n                )}\n              </FlexItem>\n            </Flex>\n          </Flex>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderCancelModal() {\n    const name = this.state.taskName;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        confirmAction={() => this.cancelTask()}\n        title={t`Stop task`}\n        confirmButtonTitle={t`Yes, stop`}\n      >\n        {t`${name} will stop running.`}\n      </ConfirmModal>\n    );\n  }\n\n  private cancelTask() {\n    const { task, taskName } = this.state;\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: taskName,\n              description: (\n                <Trans>Task &quot;{taskName}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.loadContent();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${taskName}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n        this.loadContent();\n      });\n  }\n\n  private loadContent() {\n    if (!this.state.polling && !this.state.task) {\n      this.setState({ polling: setInterval(() => this.loadContent(), 10000) });\n    }\n\n    const taskId = this.props.match.params['task'];\n    return TaskManagementAPI.get(taskId)\n      .then((result) => {\n        const allRelatedTasks = [];\n        let parentTask = null;\n        const childTasks = [];\n        const resources = [];\n        if (['canceled', 'completed', 'failed'].includes(result.data.state)) {\n          clearInterval(this.state.polling);\n          this.setState({ polling: null });\n        }\n        if (result.data.parent_task) {\n          const parentTaskId = parsePulpIDFromURL(result.data.parent_task);\n          allRelatedTasks.push(\n            TaskManagementAPI.get(parentTaskId)\n              .then((result) => {\n                parentTask = result.data;\n              })\n              .catch(() => {\n                return true;\n              }),\n          );\n        }\n        if (result.data.child_tasks.length) {\n          result.data.child_tasks.forEach((child) => {\n            const childTaskId = parsePulpIDFromURL(child);\n            allRelatedTasks.push(\n              TaskManagementAPI.get(childTaskId)\n                .then((result) => {\n                  childTasks.push(result.data);\n                })\n                .catch(() => {\n                  return true;\n                }),\n            );\n          });\n        }\n        if (result.data.reserved_resources_record.length) {\n          result.data.reserved_resources_record.forEach((resource) => {\n            const url = resource.replace(PULP_API_BASE_PATH, '');\n            const id = parsePulpIDFromURL(url);\n            const urlParts = resource.split('/');\n            const type = id ? urlParts[4] : urlParts[urlParts.length - 2];\n            if (id) {\n              allRelatedTasks.push(\n                GenericPulpAPI.get(url)\n                  .then((result) => {\n                    resources.push({ name: result.data.name, type });\n                  })\n                  .catch(() => {\n                    return true;\n                  }),\n              );\n            } else {\n              resources.push({ type });\n            }\n          });\n        }\n        return Promise.all(allRelatedTasks).then(() => {\n          this.setState({\n            task: result.data,\n            childTasks,\n            parentTask,\n            loading: false,\n            taskName:\n              (Constants.TASK_NAMES[result.data.name] &&\n                i18n._(Constants.TASK_NAMES[result.data.name])) ||\n              result.data.name,\n            resources,\n          });\n        });\n      })\n      .catch(() => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TaskDetail);\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { ClipboardCopyVariant, Button } from '@patternfly/react-core';\n\nimport { Paths } from 'src/paths';\nimport {\n  BaseHeader,\n  Main,\n  ClipboardCopy,\n  AlertList,\n  AlertType,\n  closeAlertMixin,\n} from 'src/components';\nimport { errorMessage, getRepoUrl } from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\nimport { MyDistributionAPI } from 'src/api';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n  alerts: AlertType[];\n  repoUrl: string;\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n      alerts: [],\n      repoUrl: '',\n    };\n  }\n\n  private getMyDistributionPath() {\n    MyDistributionAPI.list()\n      .then(({ data }) => {\n        const syncDistro =\n          data.data.find(({ base_path }) => base_path.includes('synclist'))\n            ?.base_path || '';\n        this.setState({\n          repoUrl: syncDistro,\n        });\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          repoUrl: '',\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Server URL could not be displayed.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    // so it never works the first time .. loadToken() causes a reload and then it works => no error handling\n    window.insights.chrome.auth.getOfflineToken().then((result) => {\n      this.setState({ tokenData: result.data });\n    });\n\n    this.getMyDistributionPath();\n  }\n\n  render() {\n    const { tokenData, alerts } = this.state;\n    const renewTokenCmd = `curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=\"cloud-services\" -d refresh_token=\"${\n      tokenData?.refresh_token ?? '{{ user_token }}'\n    }\" --fail --silent --show-error --output /dev/null`;\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <BaseHeader title={t`Connect to Hub`}></BaseHeader>\n        <Main>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect Private Automation Hub`}</h2>\n            <p>\n              <Trans>\n                Use the{' '}\n                <Link to={Paths.repositories}>Repository Management</Link> page\n                to sync collections curated by your organization to the Red Hat\n                Certified repository in your private Automation Hub. Users with\n                the correct permissions can use the sync toggles on the{' '}\n                <Link to={Paths.search}>Collections</Link> page to control which\n                collections are added to their organization&apos;s sync\n                repository.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect the ansible-galaxy client`}</h2>\n            <p>\n              <Trans>\n                Documentation on how to configure the{' '}\n                <code>ansible-galaxy</code> client can be found{' '}\n                <a\n                  href='https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/'\n                  target='_blank'\n                  rel='noreferrer'\n                >\n                  here\n                </a>\n                . Use the following parameters to configure the client.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Offline token`}</h2>\n            <p>\n              <Trans>\n                Use this token to authenticate clients that need to download\n                content from Automation Hub. This is a secret token used to\n                protect your content. Store your API token in a secure location.\n              </Trans>\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <div>\n                <Button\n                  onClick={() => this.loadToken()}\n                >{t`Load token`}</Button>\n              </div>\n            )}\n            <div\n              className='pf-c-content'\n              style={{ paddingTop: 'var(--pf-global--spacer--md)' }}\n            >\n              <span>\n                <Trans>\n                  The token will expire after 30 days of inactivity. Run the\n                  command below periodically to prevent your token from\n                  expiring.\n                </Trans>\n              </span>\n              <ClipboardCopy\n                isCode\n                isReadOnly\n                variant={ClipboardCopyVariant.expansion}\n              >\n                {renewTokenCmd}\n              </ClipboardCopy>\n            </div>\n            <h2>{t`Manage tokens`}</h2>\n            <Trans>\n              To revoke a token or see all of your tokens, visit the{' '}\n              <a\n                href='https://sso.redhat.com/auth/realms/redhat-external/account/applications'\n                target='_blank'\n                rel='noreferrer'\n              >\n                offline API token management\n              </a>{' '}\n              page.\n            </Trans>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Server URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the API endpoints that clients need to\n                download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              {getRepoUrl(this.state.repoUrl)}\n            </ClipboardCopy>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`SSO URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the authentication URLs that clients\n                need to download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n            </ClipboardCopy>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    // doOffline causes the page to refresh and will make the data\n    // available to getOfflineToken() when the component mounts after\n    // the reload\n    window.insights.chrome.auth.doOffline();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TokenPage);\nTokenPage.contextType = AppContext;\n"],"names":["CertificationDashboard","props","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","this","context","user","is_anonymous","model_permissions","move_collection","queryCollections","setState","title","closeAlert","i","className","Toolbar","ToolbarGroup","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","inputType","options","Constants","count","isTop","ignoredParams","niceValues","repository","niceNames","renderTable","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","length","filterIsSet","description","sortTableOptions","headers","type","map","version","renderRow","includes","repository_list","Label","variant","color","icon","sign_state","settings","GALAXY_REQUIRE_SIGNATURE_FOR_APPROVAL","index","key","namespace","name","Link","to","formatPath","Paths","collection","repo","date","created_at","renderStatus","renderButtons","featureFlags","canSign","collection_signing","collection_auto_sign","needUploadSignature","GALAXY_SIGNATURE_UPLOAD_ENABLED","approveButton","Button","onClick","openUploadCertificateModal","isDisabled","updateCertification","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","originalRepo","rejectDropDown","kebabItems","buttons","file","Repositories","response","signed_collection","PULP_API_BASE_PATH","CertificateUploadAPI","data","results","pulp_href","then","result","waitForUpdate","task","slice","split","pop","addAlert","error","status","statusText","concat","errorMessage","destinationRepo","CollectionVersionAPI","remove_task_id","taskId","TaskAPI","Promise","r","setTimeout","meta","closeAlertMixin","React","withRouter","contextType","AppContext","TaskListView","items","cancelModalVisible","selectedTask","unauthorised","queryTasks","noData","renderCancelModal","ToolbarContent","name__contains","item","renderTableRow","pulp_created","started_at","finished_at","parsePulpIDFromURL","content","i18n","cancelButton","cancelAction","confirmAction","confirmButtonTitle","TaskManagementAPI","e","TaskDetail","parentTask","childTasks","taskName","resources","redirect","polling","loadContent","clearInterval","prevProps","match","breadcrumbs","url","parentTaskId","Redirect","links","pageControls","Flex","direction","default","flex","FlexItem","Title","headingLevel","size","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","task_group","childTask","childTaskId","resource","progress_reports","reverse","report","Object","keys","message","code","done","CubesIcon","CodeBlock","traceback","cancelTask","setInterval","allRelatedTasks","parent_task","push","child_tasks","forEach","child","reserved_resources_record","replace","urlParts","GenericPulpAPI","all","TokenPage","tokenData","repoUrl","MyDistributionAPI","syncDistro","find","base_path","window","insights","chrome","auth","getOfflineToken","getMyDistributionPath","renewTokenCmd","refresh_token","href","target","rel","loadToken","style","paddingTop","isCode","isReadOnly","ClipboardCopyVariant","getRepoUrl","doOffline"],"sourceRoot":""}
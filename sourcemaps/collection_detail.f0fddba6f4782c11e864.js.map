{"version":3,"file":"js/collection_detail.a4c05c8dfea70576db40.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-content.tsx","webpack:///./src/containers/collection-detail/collection-dependencies.tsx","webpack:///./src/containers/collection-detail/collection-detail.tsx","webpack:///./src/containers/collection-detail/collection-docs.tsx","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"sourcesContent":["import { CollectionDetailType, CollectionAPI } from 'src/api';\nimport { Paths } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n}\n\nexport function loadCollection(\n  repo,\n  forceReload = false,\n  callback = () => null,\n) {\n  CollectionAPI.getCached(\n    this.props.match.params['namespace'],\n    this.props.match.params['collection'],\n    repo,\n    this.state.params,\n    forceReload,\n  )\n    .then((result) => {\n      this.setState({ collection: result }, callback);\n    })\n    .catch((result) => {\n      this.props.history.push(Paths.notFound);\n    });\n}\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport {\n  CollectionHeader,\n  CollectionContentList,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: t`Content` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionContentList\n              contents={collection.latest_version.metadata.contents}\n              collection={collection.name}\n              namespace={collection.namespace.name}\n              params={params}\n              updateParams={(p) => this.updateParams(p)}\n            ></CollectionContentList>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\n\nCollectionContent.contextType = AppContext;\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport {\n  CollectionAPI,\n  CollectionDetailType,\n  CollectionUsedByDependencies,\n} from 'src/api';\nimport {\n  CollectionHeader,\n  LoadingPageWithHeader,\n  Main,\n  CollectionDependenciesList,\n  CollectionUsedbyDependenciesList,\n  EmptyStateNoData,\n  AlertType,\n  AlertList,\n  closeAlertMixin,\n} from 'src/components';\n\nimport { filterIsSet, ParamHelper } from 'src/utilities';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\nimport './collection-dependencies.scss';\n\ninterface IState {\n  collection: CollectionDetailType;\n  params: {\n    page?: number;\n    page_size?: number;\n    collection?: string;\n    sort?: string;\n    version?: string;\n  };\n  usedByDependencies: CollectionUsedByDependencies[];\n  usedByDependenciesCount: number;\n  usedByDependenciesLoading: boolean;\n  alerts: AlertType[];\n}\n\nclass CollectionDependencies extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  private ignoredParams = ['page_size', 'page', 'sort', 'name'];\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    params['sort'] = !params['sort'] ? '-collection' : 'collection';\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      usedByDependencies: [],\n      usedByDependenciesCount: 0,\n      usedByDependenciesLoading: false,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      usedByDependencies,\n      usedByDependenciesCount,\n      usedByDependenciesLoading,\n      alerts,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: t`Dependencies` },\n    ];\n\n    const headerParams = ParamHelper.getReduced(params, this.ignoredParams);\n\n    const dependenciesParams = ParamHelper.getReduced(params, ['version']);\n\n    const noDependencies: boolean = !Object.keys(\n      collection.latest_version.metadata.dependencies,\n    ).length;\n\n    return (\n      <React.Fragment>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <CollectionHeader\n          collection={collection}\n          params={headerParams}\n          updateParams={(p) => {\n            this.updateParams(this.combineParams(this.state.params, p), () =>\n              this.loadData(true),\n            );\n          }}\n          breadcrumbs={breadcrumbs}\n          activeTab='dependencies'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <div className='pf-c-content collection-dependencies'>\n              <h1>{t`Dependencies`}</h1>\n              {noDependencies &&\n              !usedByDependenciesCount &&\n              !filterIsSet(params, ['name']) ? (\n                <EmptyStateNoData\n                  title={t`No dependencies`}\n                  description={t`Collection does not have any dependencies.`}\n                />\n              ) : (\n                <>\n                  <p>{t`This collections requires the following collections for use`}</p>\n                  {noDependencies ? (\n                    <EmptyStateNoData\n                      title={t`No dependencies`}\n                      description={t`Collection does not have any dependencies.`}\n                    />\n                  ) : (\n                    <CollectionDependenciesList\n                      collection={this.state.collection}\n                      repo={this.context.selectedRepo}\n                    />\n                  )}\n                  <p>{t`This collection is being used by`}</p>\n                  <CollectionUsedbyDependenciesList\n                    repo={this.context.selectedRepo}\n                    usedByDependencies={usedByDependencies}\n                    itemCount={usedByDependenciesCount}\n                    params={dependenciesParams}\n                    usedByDependenciesLoading={usedByDependenciesLoading}\n                    updateParams={(p) =>\n                      this.updateParams(\n                        this.combineParams(this.state.params, p),\n                        () => this.loadUsedByDependencies(),\n                      )\n                    }\n                  />\n                </>\n              )}\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    this.loadCollection(forceReload, () => this.loadUsedByDependencies());\n  }\n\n  private loadUsedByDependencies() {\n    this.setState({ usedByDependenciesLoading: true }, () => {\n      CollectionAPI.getUsedDependenciesByCollection(\n        this.state.collection.namespace.name,\n        this.state.collection.name,\n        ParamHelper.getReduced(this.state.params, ['version']),\n      )\n        .then(({ data }) => {\n          this.setState({\n            usedByDependencies: data.data,\n            usedByDependenciesCount: data.meta.count,\n            usedByDependenciesLoading: false,\n          });\n        })\n        .catch((err) =>\n          this.setState({\n            usedByDependenciesLoading: false,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Error loading dependent collections.`,\n                description: err?.message,\n              },\n            ],\n          }),\n        );\n    });\n  }\n\n  private loadCollection(forceReload, callback) {\n    CollectionAPI.getCached(\n      this.props.match.params['namespace'],\n      this.props.match.params['collection'],\n      this.context.selectedRepo,\n      this.state.params.version ? { version: this.state.params.version } : {},\n      forceReload,\n    )\n      .then((result) => this.setState({ collection: result }, callback))\n      .catch(() => {\n        this.props.history.push(Paths.notFound);\n      });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private combineParams(...params) {\n    return params.reduce((acc, cur) => ({ ...acc, ...cur }));\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CollectionDependencies);\n\nCollectionDependencies.contextType = AppContext;\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { isEqual } from 'lodash';\n\nimport {\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.location, this.props.location))\n      this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        name: collection.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='install'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionInfo\n              {...collection}\n              updateParams={(p) => this.updateParams(p)}\n              params={this.state.params}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDetail);\n\nCollectionDetail.contextType = AppContext;\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport './collection-detail.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { HashLink } from 'react-router-hash-link';\n\nimport { Alert, TextInputBase } from '@patternfly/react-core';\n\nimport {\n  CollectionHeader,\n  TableOfContents,\n  LoadingPageWithHeader,\n  Main,\n  EmptyStateCustom,\n} from 'src/components';\n\nimport { RenderPluginDoc } from '@ansible/galaxy-doc-builder';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper, sanitizeDocsUrls } from 'src/utilities';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\n// renders markdown files in collection docs/ directory\nclass CollectionDocs extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  docsRef: any;\n  searchBarRef: React.RefObject<HTMLInputElement>;\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n    this.docsRef = React.createRef();\n    this.searchBarRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { params, collection } = this.state;\n    const urlFields = this.props.match.params;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // If the parser can't find anything that matches the URL, neither of\n    // these variables should be set\n    let displayHTML: string;\n    let pluginData;\n\n    const contentType = urlFields['type'] || 'docs';\n    const contentName = urlFields['name'] || urlFields['page'] || null;\n\n    if (contentType === 'docs' && contentName) {\n      if (collection.latest_version.docs_blob.documentation_files) {\n        const file =\n          collection.latest_version.docs_blob.documentation_files.find(\n            (x) => sanitizeDocsUrls(x.name) === urlFields['page'],\n          );\n\n        if (file) {\n          displayHTML = file.html;\n        }\n      }\n    } else if (contentName) {\n      // check if contents exists\n      if (collection.latest_version.docs_blob.contents) {\n        const content = collection.latest_version.docs_blob.contents.find(\n          (x) =>\n            x.content_type === contentType && x.content_name === contentName,\n        );\n\n        if (content) {\n          if (contentType === 'role') {\n            displayHTML = content['readme_html'];\n          } else {\n            pluginData = content;\n          }\n        }\n      }\n    } else {\n      if (collection.latest_version.docs_blob.collection_readme) {\n        displayHTML =\n          collection.latest_version.docs_blob.collection_readme.html;\n      }\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: t`Documentation` },\n    ];\n\n    // scroll to top of page\n\n    // if (\n    //   this.docsRef.current &&\n    //   this.searchBarRef.current !== window.document.activeElement\n    // ) {\n    //   this.docsRef.current.scrollIntoView();\n    // }\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='documentation'\n          className='header'\n          repo={this.context.selectedRepo}\n        />\n        <Main className='main'>\n          <section className='docs-container'>\n            <TableOfContents\n              className='sidebar'\n              namespace={collection.namespace.name}\n              collection={collection.name}\n              docs_blob={collection.latest_version.docs_blob}\n              selectedName={contentName}\n              selectedType={contentType}\n              params={params}\n              updateParams={(p) => this.updateParams(p)}\n              searchBarRef={this.searchBarRef}\n            ></TableOfContents>\n\n            <div className='body docs pf-c-content' ref={this.docsRef}>\n              {displayHTML || pluginData ? (\n                // if neither variable is set, render not found\n                displayHTML ? (\n                  // if displayHTML is set, render it\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: displayHTML,\n                    }}\n                  ></div>\n                ) : (\n                  // if plugin data is set render it\n                  <RenderPluginDoc\n                    plugin={pluginData}\n                    renderModuleLink={(moduleName) =>\n                      this.renderModuleLink(\n                        moduleName,\n                        collection,\n                        params,\n                        collection.latest_version.metadata.contents,\n                      )\n                    }\n                    renderDocLink={(name, href) =>\n                      this.renderDocLink(name, href, collection, params)\n                    }\n                    renderTableOfContentsLink={(title, section) => (\n                      <HashLink to={'#' + section}>{title}</HashLink>\n                    )}\n                    renderWarning={(text) => (\n                      <Alert isInline variant='warning' title={text} />\n                    )}\n                  />\n                )\n              ) : (\n                this.renderNotFound(collection.name)\n              )}\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderDocLink(name, href, collection, params) {\n    if (!!href && href.startsWith('http')) {\n      return (\n        <a href={href} target='_blank'>\n          {name}\n        </a>\n      );\n    } else if (!!href) {\n      // TODO: right now this will break if people put\n      // ../ at the front of their urls. Need to find a\n      // way to document this\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionDocsPageByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              page: sanitizeDocsUrls(href),\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {name}\n        </Link>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private renderModuleLink(moduleName, collection, params, allContent) {\n    const module = allContent.find(\n      (x) => x.content_type === 'module' && x.name === moduleName,\n    );\n\n    if (module) {\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionContentDocsByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              type: 'module',\n              name: moduleName,\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {moduleName}\n        </Link>\n      );\n    } else {\n      return moduleName;\n    }\n  }\n\n  private renderNotFound(collectionName) {\n    return (\n      <EmptyStateCustom\n        title={t`Not found`}\n        description={t`The file is not available for this version of ${collectionName}`}\n        icon={ExclamationCircleIcon}\n      />\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDocs);\n\nCollectionDocs.contextType = AppContext;\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { ImportAPI, ImportDetailType, ImportListType } from 'src/api';\nimport {\n  CollectionHeader,\n  LoadingPageWithHeader,\n  ImportConsole,\n  Main,\n} from 'src/components';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: t`Import log` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <ImportConsole\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={() => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = t`Could not load import log`;\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(this.context.selectedRepo, forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.namespace.name,\n          name: this.state.collection.name,\n          version: this.state.collection.latest_version.version,\n          sort: '-created',\n        })\n          .then((importListResult) => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then((importDetailResult) => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch((err) => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch((err) => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n\nCollectionImportLog.contextType = AppContext;\n"],"names":["loadCollection","repo","forceReload","callback","CollectionAPI","this","props","match","params","state","then","result","setState","collection","history","push","Paths","CollectionContent","ParamHelper","location","search","undefined","context","selectedRepo","breadcrumbs","namespaceBreadcrumb","url","formatPath","namespace","name","updateParams","activeTab","className","contents","latest_version","metadata","p","React","withRouter","contextType","AppContext","CollectionDependencies","usedByDependencies","usedByDependenciesCount","usedByDependenciesLoading","alerts","loadData","headerParams","ignoredParams","dependenciesParams","noDependencies","Object","keys","dependencies","length","closeAlert","i","combineParams","filterIsSet","title","description","itemCount","loadUsedByDependencies","data","meta","count","err","variant","message","version","reduce","acc","cur","closeAlertMixin","CollectionDetail","prevProps","CollectionDocs","docsRef","searchBarRef","displayHTML","pluginData","urlFields","contentType","contentName","docs_blob","documentation_files","file","find","x","sanitizeDocsUrls","html","content","content_type","content_name","collection_readme","selectedName","selectedType","ref","dangerouslySetInnerHTML","__html","RenderPluginDoc","plugin","renderModuleLink","moduleName","renderDocLink","href","renderTableOfContentsLink","section","to","renderWarning","text","isInline","renderNotFound","startsWith","target","page","allContent","type","collectionName","icon","ExclamationCircleIcon","CollectionImportLog","loadingImports","selectedImportDetail","selectedImport","apiError","loading","task","followMessages","setFollowMessages","hideCollectionName","failMsg","ImportAPI","sort","importListResult","importObj","id","importDetailResult"],"sourceRoot":""}
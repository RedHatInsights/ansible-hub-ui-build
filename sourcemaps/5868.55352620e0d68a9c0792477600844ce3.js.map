{"version":3,"file":"js/5868.0f45e62625a98f774f8c.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  LabelGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n  Repositories,\n} from 'src/api';\nimport { Repository } from 'src/api/response-types/repositories';\nimport {\n  ApproveModal,\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RepositoriesUtils,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n    status?: string;\n    sort?: string;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersionSearch[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersionSearch[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersionSearch;\n  approveModalInfo: {\n    collectionVersion;\n  };\n  approvedRepositoryList: Repository[];\n  stagingRepoNames: string[];\n  rejectedRepoName: string;\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['status']) {\n      params['status'] = Constants.NEEDSREVIEW;\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      approvedRepositoryList: [],\n      rejectedRepoName: null,\n      stagingRepoNames: [],\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      const promises = [];\n\n      promises.push(this.loadRepo('staging'));\n      promises.push(this.loadRepo('rejected'));\n\n      promises.push(\n        RepositoriesUtils.listApproved()\n          .then((data) => {\n            this.setState({ approvedRepositoryList: data });\n          })\n          .catch(({ response: { status, statusText } }) => {\n            this.addAlertObj({\n              title: t`Failed to load repositories.`,\n              variant: 'danger',\n              description: errorMessage(status, statusText),\n            });\n          }),\n      );\n\n      promises.push(this.queryCollections(false));\n\n      Promise.all(promises).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  private loadRepo(pipeline) {\n    return Repositories.list({ pulp_label_select: `pipeline=${pipeline}` })\n      .then((data) => {\n        if (data.data.results.length > 0) {\n          if (pipeline == 'staging') {\n            this.setState({\n              stagingRepoNames: data.data.results.map((res) => res.name),\n            });\n          }\n\n          if (pipeline == 'rejected') {\n            this.setState({ rejectedRepoName: data.data.results[0].name });\n          }\n        }\n      })\n      .catch((error) => {\n        this.addAlert(\n          t`Error loading repository with label ${pipeline}.`,\n          'danger',\n          error?.message,\n        );\n      });\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () =>\n                            this.queryCollections(true),\n                          )\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'status',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.APPROVED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    status: {\n                      [Constants.APPROVED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    status: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={\n                  this.state.approveModalInfo.collectionVersion\n                }\n                addAlert={(alert) => this.addAlertObj(alert)}\n                allRepositories={this.state.approvedRepositoryList}\n                stagingRepoNames={this.state.stagingRepoNames}\n                rejectedRepoName={this.state.rejectedRepoName}\n              />\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'status']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repository`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private isVersionUpdating(collection: CollectionVersionSearch) {\n    return this.state.updatingVersions.find((v) => {\n      return v == collection;\n    });\n  }\n\n  private renderStatus(collectionData: CollectionVersionSearch) {\n    const { repository } = collectionData;\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isVersionUpdating(collectionData)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n\n    if (this.isApproved(collectionData)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && collectionData.is_signed\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {!collectionData.is_signed &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(collectionData: CollectionVersionSearch, index) {\n    const { collection_version: version, repository } = collectionData;\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: repository.name,\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(\n                repository,\n                version.namespace,\n                version.name,\n                version.version,\n              );\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.pulp_created} />\n        </td>\n        <td>\n          <LabelGroup>{repository.name}</LabelGroup>\n        </td>\n        <td>{this.renderStatus(collectionData)}</td>\n        {this.renderButtons(collectionData)}\n      </tr>\n    );\n  }\n\n  private renderButtons(collectionData: CollectionVersionSearch) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const { collection_version: version, repository } = collectionData;\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.isVersionUpdating(collectionData)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && !collectionData.is_signed;\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button\n            onClick={() => this.openUploadCertificateModal(collectionData)}\n          >\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() => {\n          this.approve(collectionData);\n        }}\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => this.approve(collectionData)}\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => {\n          this.reject(collectionData);\n        }}\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isApproved(collectionData)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true),\n            rejectDropDown(false),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      // render reject button if version is in multiple repositories including rejected state - handles inconsistency\n      // and allows user to reject it again to move it all to rejected state\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false),\n            rejectDropDown(true),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      return (\n        <ListItemActions\n          kebabItems={[rejectDropDown(false), importsLink]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersionSearch) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const { collection_version, repository } =\n      this.state.versionToUploadCertificate;\n    const signed_collection = collection_version.pulp_href;\n    const { name, namespace, version } = collection_version;\n    CertificateUploadAPI.upload({\n      file,\n      repository: repository.pulp_href,\n      signed_collection,\n    })\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${namespace} ${name} v${version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${namespace} ${name} v${version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private isApproved(collection: CollectionVersionSearch) {\n    if (!collection) {\n      return false;\n    }\n\n    return this.state.approvedRepositoryList.find(\n      (r) => r.name == collection.repository.name,\n    );\n  }\n\n  private approve(collection) {\n    if (!collection) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Approval failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    const { approvedRepositoryList } = this.state;\n\n    if (approvedRepositoryList.length == 1) {\n      if (collection.repository) {\n        this.updateCertification(\n          collection.collection_version,\n          collection.repository.name,\n          this.state.approvedRepositoryList[0].name,\n        );\n      } else {\n        // I hope that this may not occure ever, but to be sure...\n        this.addAlert(\n          t`Approval failed.`,\n          'danger',\n          t`Collection has to be in rejected or staging repository.`,\n        );\n      }\n    } else {\n      this.transformToCollectionVersion(collection).then(\n        (collectionVersion) => {\n          this.setState({ approveModalInfo: { collectionVersion } });\n        },\n      );\n    }\n  }\n\n  private reject(collection) {\n    const originalRepo = collection.repository.name;\n    const version = collection.collection_version;\n\n    this.transformToCollectionVersion(collection)\n      .then((versionWithRepos) => {\n        this.setState({ updatingVersions: [collection] });\n        if (\n          versionWithRepos.repository_list.includes(this.state.rejectedRepoName)\n        ) {\n          // collection already in rejected repository, so remove it from aproved repo\n\n          RepositoriesUtils.deleteCollection(originalRepo, version.pulp_href)\n            .then(() => {\n              this.addAlert(\n                t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n                'success',\n              );\n              this.queryCollections(true);\n            })\n            .catch((error) => {\n              this.setState({ updatingVersions: [] });\n              const description = !error.response\n                ? error\n                : errorMessage(\n                    error.response.status,\n                    error.response.statusText,\n                  );\n\n              this.addAlert(\n                t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                'danger',\n                description,\n              );\n            });\n        } else {\n          // collection is not in rejected state, move it there\n          this.updateCertification(\n            version,\n            originalRepo,\n            this.state.rejectedRepoName,\n          );\n        }\n      })\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    return CollectionVersionAPI.setRepository(\n      version.namespace,\n      version.name,\n      version.version,\n      originalRepo,\n      destinationRepo,\n    )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    const { status, sort, ...params } = this.state.params;\n\n    const updatedParams = {\n      order_by: sort,\n      ...params,\n    };\n\n    if (status) {\n      updatedParams['repository_label'] = `pipeline=${status}`;\n    }\n\n    return CollectionVersionAPI.list(updatedParams)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private download(\n    repository: CollectionVersionSearch['repository'],\n    namespace: string,\n    name: string,\n    version: string,\n  ) {\n    CollectionAPI.getDownloadURL(repository, namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n\n  async getCollectionRepoList(collection: CollectionVersionSearch) {\n    const { name, namespace, version } = collection.collection_version;\n\n    // get repository list for selected collection\n    const collectionInRepos = await CollectionVersionAPI.list({\n      namespace,\n      name,\n      version,\n      page_size: 100000,\n      offset: 0,\n    });\n\n    const collectionRepos = collectionInRepos.data.data.map(\n      ({ repository }) => repository.name,\n    );\n\n    return collectionRepos;\n  }\n\n  // compose from collectionVersionSearch to CollectionVersion structure for approval modal\n  async transformToCollectionVersion(collection: CollectionVersionSearch) {\n    const repoList = await this.getCollectionRepoList(collection);\n\n    const { collection_version } = collection;\n    const id = parsePulpIDFromURL(collection_version.pulp_href);\n    const collectionVersion = {\n      id,\n      version: collection_version.version,\n      namespace: collection_version.namespace,\n      name: collection_version.name,\n      repository_list: repoList,\n    };\n\n    return collectionVersion;\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_transformToCollectionVersion","_getCollectionRepoList","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","Constants","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","approvedRepositoryList","rejectedRepoName","stagingRepoNames","_createClass","key","value","_this2","_this$context","this","context","user","hasPermission","is_anonymous","setState","promises","push","loadRepo","RepositoriesUtils","then","data","_ref","_ref$response","response","status","statusText","addAlertObj","title","i18n","variant","description","errorMessage","queryCollections","Promise","all","pipeline","_this3","Repositories","pulp_label_select","concat","results","length","map","res","name","error","addAlert","message","_status","_this4","_this$state","React","BaseHeader","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","inputType","options","Pagination","count","isTop","AppliedFilters","ignoredParams","niceValues","_defineProperty","niceNames","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","alert","allRepositories","LoadingPageWithHeader","_this5","filterIsSet","EmptyStateFilter","EmptyStateNoData","sortTableOptions","headers","type","SortTable","version","renderRow","collection","find","v","collectionData","_repository$pulp_labe","repoStatus","repository","pulp_labels","isVersionUpdating","isApproved","display_signatures","featureFlags","Label","color","icon","CheckCircleIcon","is_signed","ExclamationCircleIcon","_this$context$feature","can_upload_signatures","require_upload_signatures","ExclamationTriangleIcon","index","_this6","collection_version","namespace","Link","to","formatPath","Paths","repo","Button","ButtonVariant","onClick","download","DownloadIcon","DateComponent","date","pulp_created","LabelGroup","renderStatus","renderButtons","_repository$pulp_labe2","_this7","_this$context$feature2","collection_auto_sign","ListItemActions","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","approve","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","rejectDropDown","reject","kebabItems","buttons","file","_this8","_this$state$versionTo","signed_collection","pulp_href","CertificateUploadAPI","result","waitForTask","parsePulpIDFromURL","task","r","_this9","updateCertification","transformToCollectionVersion","_this10","originalRepo","versionWithRepos","repository_list","includes","destinationRepo","_this11","CollectionVersionAPI","remove_task_id","waitMs","handleLoading","_this12","_this$state$params","updatedParams","_objectSpread","order_by","sort","_objectWithoutProperties","_excluded","meta","CollectionAPI","downloadURL","window","assign","get","closeAlertMixin","_toConsumableArray","_asyncToGenerator","_regeneratorRuntime","_callee","_collection$collectio","collectionInRepos","collectionRepos","_context","prev","next","page_size","offset","sent","_ref2","abrupt","stop","_x","apply","arguments","_callee2","repoList","_context2","getCollectionRepoList","_x2","withRouter","contextType","AppContext"],"sourceRoot":""}
{"version":3,"file":"js/282.755b60f8df14df3cc469.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"sourcesContent":["import { CollectionAPI, CollectionDetailType } from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n  alerts?: AlertType[];\n}\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  selectedRepo,\n  setCollection,\n  stateParams,\n}) {\n  CollectionAPI.getCached(\n    matchParams['namespace'],\n    matchParams['collection'],\n    selectedRepo,\n    { ...stateParams, include_related: 'my_permissions' },\n    forceReload,\n  )\n    .then((result) => {\n      return CollectionAPI.list(\n        {\n          name: matchParams['collection'],\n        },\n        selectedRepo,\n      ).then((collections) => {\n        result.deprecated = collections.data.data[0].deprecated;\n        setCollection(result);\n      });\n    })\n    .catch(() => {\n      navigate(formatPath(Paths.notFound));\n    });\n}\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { ImportAPI, ImportDetailType, ImportListType } from 'src/api';\nimport {\n  CollectionHeader,\n  ImportConsole,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: t`Import log` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          reload={() => this.loadData(true)}\n          collection={collection}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <ImportConsole\n              empty={false}\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={() => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = t`Could not load import log`;\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.namespace.name,\n          name: this.state.collection.name,\n          version: this.state.collection.latest_version.version,\n          sort: '-created',\n        })\n          .then((importListResult) => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then((importDetailResult) => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch(() => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch(() => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  private loadCollection(forceReload, callback) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      selectedRepo: this.context.selectedRepo,\n      setCollection: (collection) => this.setState({ collection }, callback),\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n\nCollectionImportLog.contextType = AppContext;\n"],"names":["loadCollection","forceReload","matchParams","navigate","selectedRepo","setCollection","stateParams","CollectionAPI","include_related","then","result","name","collections","deprecated","data","formatPath","Paths","CollectionImportLog","props","params","ParamHelper","location","search","state","collection","undefined","loadingImports","selectedImportDetail","selectedImport","apiError","this","loadData","breadcrumbs","namespaceBreadcrumb","url","namespace","repo","context","reload","updateParams","activeTab","className","empty","loading","task","followMessages","setFollowMessages","hideCollectionName","failMsg","setState","ImportAPI","version","latest_version","sort","importListResult","importObj","id","importDetailResult","callback","routeParams","React","withRouter","contextType","AppContext"],"sourceRoot":""}
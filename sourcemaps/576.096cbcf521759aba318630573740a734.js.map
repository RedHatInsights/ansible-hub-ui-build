{"version":3,"file":"js/576.1674441508940.1c16853497a8be805e44.js","mappings":"yuBAcO,SAASA,EAAe,GAO5B,IANDC,EAAW,EAAXA,YACAC,EAAW,EAAXA,YACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAa,EAAbA,cACAC,EAAW,EAAXA,YAEAC,EAAAA,GAAAA,UACEL,EAAuB,UACvBA,EAAwB,WACxBE,EAAY,OACPE,GAAW,IAAEE,gBAAiB,mBACnCP,GAECQ,MAAK,SAACC,GACL,OAAOH,EAAAA,GAAAA,KACL,CACEI,KAAMT,EAAwB,YAEhCE,GACAK,MAAK,SAACG,GACNF,EAAOG,WAAaD,EAAYE,KAAKA,KAAK,GAAGD,WAC7CR,EAAcK,EAChB,GACF,IAAE,OACK,WACLP,GAASY,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,UACtB,GACJ,C,iMC7BA,IACMC,EAAiB,6B,IAAA,G,EAAA,E,gaAIrB,WAAYC,GAAO,sBACjB,cAAMA,GAEN,IAAMC,EAASC,EAAAA,EAAAA,iBAA6BF,EAAMG,SAASC,QAKzD,OAHF,EAAKC,MAAQ,CACXC,gBAAYC,EACZN,OAAQA,GACR,CACJ,CA0EC,OA1EA,yCAED,WACEO,KAAK1B,gBAAe,EACtB,GAAC,oBAED,WAAS,WACP,EAA+B0B,KAAKH,MAA5BC,EAAU,EAAVA,WAAYL,EAAM,EAANA,OAEpB,IAAKK,EACH,OAAO,gBAAC,KAAqB,MAG/B,IAAMG,EAAc,CAClBC,EAAAA,GACA,CACEC,KAAKd,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,gBAAuB,CACrCc,UAAWN,EAAWM,UAAUnB,KAChCoB,KAAML,KAAKM,QAAQ5B,eAErBO,KAAMa,EAAWM,UAAUnB,MAE7B,CACEkB,KAAKd,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,iBAAwB,CACtCc,UAAWN,EAAWM,UAAUnB,KAChCa,WAAYA,EAAWb,KACvBoB,KAAML,KAAKM,QAAQ5B,eAErBO,KAAMa,EAAWb,MAEnB,CAAEA,KAAM,oBAGV,OACE,gBAAC,WAAc,KACb,gBAAC,KAAgB,CACfsB,OAAQ,kBAAM,EAAKjC,gBAAe,EAAK,EACvCwB,WAAYA,EACZL,OAAQA,EACRe,aAAc,SAACf,GAAM,OACnB,EAAKe,aAAaf,GAAQ,kBAAM,EAAKnB,gBAAe,EAAK,GAAC,EAE5D2B,YAAaA,EACbQ,UAAU,WACVJ,KAAML,KAAKM,QAAQ5B,eAErB,gBAAC,KAAI,KACH,2BAASgC,UAAU,QACjB,gBAAC,KAAqB,CACpBC,SAAUb,EAAWc,eAAeC,SAASF,SAC7Cb,WAAYA,EAAWb,KACvBmB,UAAWN,EAAWM,UAAUnB,KAChCQ,OAAQA,EACRe,aAAc,SAACM,GAAC,OAAK,EAAKN,aAAaM,EAAE,MAMrD,GAAC,4BAED,SAAuBvC,GAAa,YAClCD,EAAAA,EAAAA,GAAe,CACbC,YAAAA,EACAC,YAAawB,KAAKR,MAAMuB,YACxBtC,SAAUuB,KAAKR,MAAMf,SACrBC,aAAcsB,KAAKM,QAAQ5B,aAC3BC,cAAe,SAACmB,GAAU,OAAK,EAAKkB,SAAS,CAAElB,WAAAA,GAAa,EAC5DlB,YAAaoB,KAAKH,MAAMJ,QAE5B,GAAC,wBAED,WACE,OAAOC,EAAAA,EAAAA,mBACT,KAAC,EAvFoB,CAASuB,EAAAA,WA0FhC,SAAeC,EAAAA,EAAAA,IAAW3B,GAE1BA,EAAkB4B,YAAcC,EAAAA,C","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-content.tsx"],"sourcesContent":["import { CollectionAPI, CollectionDetailType } from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n  alerts?: AlertType[];\n}\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  selectedRepo,\n  setCollection,\n  stateParams,\n}) {\n  CollectionAPI.getCached(\n    matchParams['namespace'],\n    matchParams['collection'],\n    selectedRepo,\n    { ...stateParams, include_related: 'my_permissions' },\n    forceReload,\n  )\n    .then((result) => {\n      return CollectionAPI.list(\n        {\n          name: matchParams['collection'],\n        },\n        selectedRepo,\n      ).then((collections) => {\n        result.deprecated = collections.data.data[0].deprecated;\n        setCollection(result);\n      });\n    })\n    .catch(() => {\n      navigate(formatPath(Paths.notFound));\n    });\n}\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  CollectionContentList,\n  CollectionHeader,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(false);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: t`Content` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          reload={() => this.loadCollection(true)}\n          collection={collection}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadCollection(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionContentList\n              contents={collection.latest_version.metadata.contents}\n              collection={collection.name}\n              namespace={collection.namespace.name}\n              params={params}\n              updateParams={(p) => this.updateParams(p)}\n            ></CollectionContentList>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadCollection(forceReload) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      selectedRepo: this.context.selectedRepo,\n      setCollection: (collection) => this.setState({ collection }),\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\n\nCollectionContent.contextType = AppContext;\n"],"names":["loadCollection","forceReload","matchParams","navigate","selectedRepo","setCollection","stateParams","CollectionAPI","include_related","then","result","name","collections","deprecated","data","formatPath","Paths","CollectionContent","props","params","ParamHelper","location","search","state","collection","undefined","this","breadcrumbs","namespaceBreadcrumb","url","namespace","repo","context","reload","updateParams","activeTab","className","contents","latest_version","metadata","p","routeParams","setState","React","withRouter","contextType","AppContext"],"sourceRoot":""}
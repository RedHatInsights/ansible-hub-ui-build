{"version":3,"file":"js/5576.f03217af2738603243cd.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-content.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collectionsCount?: number;\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\n// Caches the collection data when matching, prevents redundant fetches between collection detail tabs\nconst cache = {\n  repository: null,\n  namespace: null,\n  name: null,\n  version: null,\n\n  collections: [],\n  collectionsCount: 0,\n  collection: null,\n  content: null,\n};\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  // try loading from cache\n  if (\n    !forceReload &&\n    cache.repository === repo &&\n    cache.namespace === namespace &&\n    cache.name === name &&\n    cache.version === version\n  ) {\n    setCollection(\n      cache.collections,\n      cache.collection,\n      cache.content,\n      cache.collectionsCount,\n    );\n    return;\n  }\n\n  const requestParams = {\n    ...(repo ? { repository_name: repo } : {}),\n    namespace,\n    name,\n  };\n\n  const currentVersion = (\n    version\n      ? CollectionVersionAPI.list({ ...requestParams, version })\n      : CollectionVersionAPI.list({ ...requestParams, is_highest: true })\n  ).then(({ data }) => data.data[0]);\n\n  const content = currentVersion\n    .then((collection) =>\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ),\n    )\n    .then(({ data: { results } }) => results[0])\n    .catch(() => navigate(formatPath(Paths.notFound)));\n\n  // Note: this only provides the first page - containing the latest version, and all items for the version *selector*,\n  // but the version *modal* is using a separate call, in CollectionHeader updatePaginationParams\n  const versions = CollectionVersionAPI.list({\n    ...requestParams,\n    order_by: '-version',\n    page_size: 10,\n  })\n    .then(({ data }) => data)\n    .catch(() => ({ data: [], meta: { count: 0 } }));\n\n  return Promise.all([versions, currentVersion, content]).then(\n    ([\n      {\n        data: collections,\n        meta: { count: collectionsCount },\n      },\n      collection,\n      content,\n    ]) => {\n      setCollection(collections, collection, content, collectionsCount);\n\n      cache.repository = repo;\n      cache.namespace = namespace;\n      cache.name = name;\n      cache.version = version;\n\n      cache.collections = collections;\n      cache.collectionsCount = collectionsCount;\n      cache.collection = collection;\n      cache.content = content;\n    },\n  );\n}\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport {\n  CollectionContentList,\n  CollectionHeader,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collections: [],\n      collectionsCount: 0,\n      collection: null,\n      content: null,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollections(false);\n  }\n\n  render() {\n    const { collections, collectionsCount, collection, params, content } =\n      this.state;\n\n    if (collections.length <= 0) {\n      return <LoadingPageWithHeader />;\n    }\n\n    const { collection_version, repository } = collection;\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceDetail, {\n          namespace: collection_version.namespace,\n        }),\n        name: collection_version.namespace,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection_version.namespace,\n          collection: collection_version.name,\n          repo: repository.name,\n        }),\n        name: collection_version.name,\n      },\n      { name: t`Content` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          reload={() => this.loadCollections(true)}\n          collections={collections}\n          collectionsCount={collectionsCount}\n          collection={collection}\n          content={content}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadCollections(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n        />\n        <Main>\n          <section className='body'>\n            <CollectionContentList\n              contents={content.contents}\n              collection={collection}\n              params={params}\n              updateParams={(p) => this.updateParams(p)}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadCollections(forceReload) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      setCollection: (collections, collection, content, collectionsCount) =>\n        this.setState({ collections, collection, content, collectionsCount }),\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\n\nCollectionContent.contextType = AppContext;\n"],"names":["cache","repository","namespace","name","version","collections","collectionsCount","collection","content","loadCollection","_ref","forceReload","matchParams","navigate","setCollection","stateParams","repo","requestParams","_objectSpread","repository_name","currentVersion","CollectionVersionAPI","is_highest","then","_ref2","data","CollectionAPI","collection_version","_ref3","results","formatPath","Paths","versions","order_by","page_size","_ref4","meta","count","Promise","all","_ref5","_ref6","_slicedToArray","_ref6$","CollectionContent","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","_createClass","key","value","this","loadCollections","_this2","_this$state","length","React","LoadingPageWithHeader","breadcrumbs","namespaceBreadcrumb","url","i18n","CollectionHeader","reload","updateParams","activeTab","Main","className","CollectionContentList","contents","p","_this3","routeParams","setState","get","withRouter","contextType","AppContext"],"sourceRoot":""}
{"version":3,"file":"js/signature-keys-list.1670186733773.b5f0c3bb8df6ba229614.js","mappings":"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","sources":["webpack:///./src/containers/signature-keys/list.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport {\n  DropdownItem,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { ParamHelper, filterIsSet, errorMessage } from '../../utilities';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  ClipboardCopy,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  closeAlertMixin,\n} from 'src/components';\nimport { SigningServiceAPI, SigningServiceType } from 'src/api';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: SigningServiceType[];\n  itemCount: number;\n  alerts: AlertType[];\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class SignatureKeysList extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 100;\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.query();\n    }\n  }\n\n  render() {\n    const { params, itemCount, loading, items, alerts, unauthorised } =\n      this.state;\n\n    const noData = items.length === 0 && !filterIsSet(params, ['name']);\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <BaseHeader title={t`Signature Keys`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No signature keys yet`}\n            description={t`Signature keys will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-list-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) => {\n                              p['page'] = 1;\n                              this.updateParams(p, () => this.query());\n                            }}\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name',\n                                title: t`Name`,\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.query())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.query());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name: t`Name`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) => this.updateParams(p, () => this.query())}\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (!items.length) {\n      return <EmptyStateFilter />;\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Name`,\n          type: 'none',\n          id: 'name',\n        },\n        {\n          title: t`Key fingerprint`,\n          type: 'none',\n          id: 'pubkey_fingerprint',\n        },\n        {\n          title: t`Created on`,\n          type: 'none',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Public key`,\n          type: 'none',\n          id: 'public_key',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'kebab',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Signature keys`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => {\n            p['page'] = 1;\n            this.updateParams(p, () => this.query());\n          }}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, pubkey_fingerprint, public_key, pulp_created } = item;\n\n    const dropdownItems = [\n      <DropdownItem\n        key='download-key'\n        onClick={() => {\n          document.location =\n            'data:application/octet-stream,' + encodeURIComponent(public_key);\n        }}\n      >\n        {t`Download key`}\n      </DropdownItem>,\n    ];\n\n    return (\n      <tr key={index}>\n        <td>{name}</td>\n        <td>{pubkey_fingerprint}</td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <ClipboardCopy isCode isReadOnly variant={'expansion'}>\n            {public_key}\n          </ClipboardCopy>\n        </td>\n        <ListItemActions kebabItems={dropdownItems} />\n      </tr>\n    );\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private query() {\n    this.setState({ loading: true }, () => {\n      SigningServiceAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n          });\n          this.addAlert({\n            title: t`Signature keys could not be displayed.`,\n            variant: 'danger',\n            description: errorMessage(status, statusText),\n          });\n        });\n    });\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(SignatureKeysList);\n\nSignatureKeysList.contextType = AppContext;\n"],"names":["SignatureKeysList","props","params","ParamHelper","location","search","state","items","loading","itemCount","alerts","unauthorised","inputText","this","context","user","is_anonymous","setState","query","noData","length","filterIsSet","closeAlert","i","title","description","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","count","isTop","ignoredParams","niceNames","name","renderTable","sortTableOptions","headers","type","options","map","item","renderTableRow","index","pubkey_fingerprint","public_key","pulp_created","dropdownItems","DropdownItem","key","onClick","document","encodeURIComponent","date","isCode","isReadOnly","variant","kebabItems","closeAlertMixin","SigningServiceAPI","then","result","data","results","e","response","status","statusText","addAlert","errorMessage","alert","React","withRouter","contextType","AppContext"],"sourceRoot":""}
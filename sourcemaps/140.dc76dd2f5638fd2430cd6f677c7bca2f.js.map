{"version":3,"file":"js/140.1673911840215.fa5f224da32138fe621b.js","mappings":"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","sources":["webpack:///./src/containers/search/search.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { DataList, Switch, DropdownItem, Button } from '@patternfly/react-core';\nimport './search.scss';\nimport {\n  DeleteCollectionUtils,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n  withRouter,\n} from 'src/utilities';\nimport {\n  BaseHeader,\n  CardListSwitcher,\n  CollectionCard,\n  CollectionFilter,\n  CollectionListItem,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LoadingPageSpinner,\n  Pagination,\n  RepoSelector,\n  StatefulDropdown,\n  AlertList,\n  AlertType,\n  closeAlertMixin,\n  ImportModal,\n  DeleteCollectionModal,\n} from 'src/components';\nimport {\n  CollectionAPI,\n  CollectionListType,\n  SyncListType,\n  MySyncListAPI,\n  MyNamespaceAPI,\n} from 'src/api';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\n\ninterface IState {\n  collections: CollectionListType[];\n  numberOfResults: number;\n  params: {\n    page?: number;\n    page_size?: number;\n    keywords?: string;\n    tags?: string[];\n    view_type?: string;\n  };\n  loading: boolean;\n  synclist: SyncListType;\n  alerts: AlertType[];\n  updateCollection: CollectionListType;\n  showImportModal: boolean;\n  redirect: string;\n  noDependencies: boolean;\n  deleteCollection: CollectionListType;\n  confirmDelete: boolean;\n  isDeletionPending: boolean;\n}\n\nclass Search extends React.Component<RouteProps, IState> {\n  tags: string[];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = Constants.CARD_DEFAULT_PAGE_SIZE;\n    }\n\n    // Load view type from local storage if it's not set. This allows a\n    // user's view type preference to persist\n    if (!params['view_type']) {\n      params['view_type'] = localStorage.getItem(\n        Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n      );\n    }\n\n    this.state = {\n      collections: [],\n      params: params,\n      numberOfResults: 0,\n      loading: true,\n      synclist: undefined,\n      alerts: [],\n      updateCollection: null,\n      showImportModal: false,\n      redirect: null,\n      noDependencies: false,\n      deleteCollection: null,\n      confirmDelete: false,\n      isDeletionPending: false,\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  private load() {\n    this.queryCollections();\n\n    if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE) {\n      this.getSynclist();\n    }\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const {\n      loading,\n      collections,\n      params,\n      numberOfResults,\n      showImportModal,\n      updateCollection,\n      deleteCollection,\n      confirmDelete,\n      isDeletionPending,\n    } = this.state;\n    const noData =\n      collections.length === 0 &&\n      !filterIsSet(params, ['keywords', 'tags', 'sign_state']);\n\n    const updateParams = (p) =>\n      this.updateParams(p, () => this.queryCollections());\n\n    return (\n      <div className='search-page'>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <DeleteCollectionModal\n          deleteCollection={deleteCollection}\n          isDeletionPending={isDeletionPending}\n          confirmDelete={confirmDelete}\n          setConfirmDelete={(confirmDelete) => this.setState({ confirmDelete })}\n          cancelAction={() => this.setState({ deleteCollection: null })}\n          deleteAction={() =>\n            this.setState({ isDeletionPending: true }, () =>\n              DeleteCollectionUtils.deleteCollection({\n                collection: deleteCollection,\n                setState: (state) => this.setState(state),\n                load: () => this.load(),\n                redirect: false,\n                selectedRepo: this.context.selectedRepo,\n                addAlert: (alert) => this.addAlert(alert),\n              }),\n            )\n          }\n        />\n\n        {showImportModal && (\n          <ImportModal\n            isOpen={showImportModal}\n            onUploadSuccess={() =>\n              this.setState({\n                redirect: formatPath(\n                  Paths.myImports,\n                  {},\n                  {\n                    namespace: updateCollection.namespace.name,\n                  },\n                ),\n              })\n            }\n            // onCancel\n            setOpen={(isOpen, warn) => this.toggleImportModal(isOpen, warn)}\n            collection={updateCollection}\n            namespace={updateCollection.namespace.name}\n          />\n        )}\n        <BaseHeader\n          className='header'\n          title={t`Collections`}\n          contextSelector={\n            <RepoSelector\n              path={Paths.searchByRepo}\n              selectedRepo={this.context.selectedRepo}\n            />\n          }\n        >\n          {!noData && (\n            <div className='hub-toolbar-wrapper'>\n              <div className='toolbar'>\n                <CollectionFilter\n                  ignoredParams={['page', 'page_size', 'sort', 'view_type']}\n                  params={params}\n                  updateParams={updateParams}\n                />\n\n                <div className='hub-pagination-container'>\n                  <div className='card-list-switcher'>\n                    <CardListSwitcher\n                      size='sm'\n                      params={params}\n                      updateParams={(p) =>\n                        this.updateParams(p, () =>\n                          // Note, we have to use this.state.params instead\n                          // of params in the callback because the callback\n                          // executes before the page can re-run render\n                          // which means params doesn't contain the most\n                          // up to date state\n                          localStorage.setItem(\n                            Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n                            this.state.params.view_type,\n                          ),\n                        )\n                      }\n                    />\n                  </div>\n\n                  <Pagination\n                    params={params}\n                    updateParams={updateParams}\n                    count={numberOfResults}\n                    perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                    isTop\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        {loading ? (\n          <LoadingPageSpinner />\n        ) : noData ? (\n          <EmptyStateNoData\n            title={t`No collections yet`}\n            description={t`Collections will appear once uploaded`}\n          />\n        ) : (\n          <React.Fragment>\n            <section className='collection-container'>\n              {this.renderCollections(collections, params, updateParams)}\n            </section>\n            <section className='footer'>\n              <Pagination\n                params={params}\n                updateParams={(p) =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                count={numberOfResults}\n              />\n            </section>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n\n  private toggleImportModal(isOpen: boolean, warning?: string) {\n    if (warning) {\n      this.setState({\n        alerts: [...this.state.alerts, { title: warning, variant: 'warning' }],\n      });\n    }\n    this.setState({ showImportModal: isOpen });\n  }\n\n  private renderCollections(collections, params, updateParams) {\n    if (collections.length === 0) {\n      return (\n        <EmptyStateFilter\n          clearAllFilters={() => {\n            ParamHelper.clearAllFilters({\n              params,\n              ignoredParams: ['page', 'page_size', 'sort', 'view_type'],\n              updateParams,\n            });\n          }}\n        />\n      );\n    }\n    if (params.view_type === 'list') {\n      return this.renderList(collections);\n    } else {\n      return this.renderCards(collections);\n    }\n  }\n\n  private renderCards(collections) {\n    return (\n      <div className='hub-cards'>\n        {collections.map((c) => {\n          return (\n            <CollectionCard\n              className='card'\n              key={c.id}\n              {...c}\n              footer={this.renderSyncToogle(c.name, c.namespace.name)}\n              repo={this.context.selectedRepo}\n              menu={this.renderMenu(false, c)}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  private handleControlClick(collection) {\n    CollectionAPI.setDeprecation(\n      collection,\n      !collection.deprecated,\n      this.context.selectedRepo,\n    )\n      .then((res) => {\n        const taskId = parsePulpIDFromURL(res.data.task);\n        return waitForTask(taskId).then(() => {\n          const title = !collection.deprecated\n            ? t`The collection \"${collection.name}\" has been successfully deprecated.`\n            : t`The collection \"${collection.name}\" has been successfully undeprecated.`;\n          this.setState({\n            alerts: [\n              ...this.state.alerts,\n              {\n                title: title,\n                variant: 'success',\n              },\n            ],\n          });\n          this.load();\n        });\n      })\n      .catch((err) => {\n        const { status, statusText } = err.response;\n        this.setState({\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: !collection.deprecated\n                ? t`Collection \"${collection.name}\" could not be deprecated.`\n                : t`Collection \"${collection.name}\" could not be undeprecated.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private renderMenu(list, collection) {\n    const { hasPermission } = this.context;\n    const menuItems = [\n      DeleteCollectionUtils.deleteMenuOption({\n        canDeleteCollection: hasPermission('ansible.delete_collection'),\n        noDependencies: null,\n        onClick: () =>\n          DeleteCollectionUtils.tryOpenDeleteModalWithConfirm({\n            addAlert: (alert) => this.addAlert(alert),\n            setState: (state) => this.setState(state),\n            collection,\n          }),\n      }),\n      <DropdownItem\n        onClick={() => this.handleControlClick(collection)}\n        key='deprecate'\n      >\n        {collection.deprecated ? t`Undeprecate` : t`Deprecate`}\n      </DropdownItem>,\n    ];\n\n    if (!list) {\n      menuItems.push(\n        <DropdownItem\n          onClick={() => this.checkUploadPrivilleges(collection)}\n          key='upload new version'\n        >\n          {t`Upload new version`}\n        </DropdownItem>,\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {list && (\n          <Button\n            onClick={() => this.checkUploadPrivilleges(collection)}\n            variant='secondary'\n          >\n            {t`Upload new version`}\n          </Button>\n        )}\n        <StatefulDropdown\n          items={menuItems.filter(Boolean)}\n          ariaLabel='collection-kebab'\n        />\n      </React.Fragment>\n    );\n  }\n\n  private renderSyncToogle(name: string, namespace: string): React.ReactNode {\n    const { synclist } = this.state;\n\n    if (!synclist) {\n      return null;\n    }\n\n    return (\n      <Switch\n        id={namespace + '.' + name}\n        className='sync-toggle'\n        label={t`Sync`}\n        isChecked={this.isCollectionSynced(name, namespace)}\n        onChange={() => this.toggleCollectionSync(name, namespace)}\n      />\n    );\n  }\n\n  private checkUploadPrivilleges(collection) {\n    const addAlert = () => {\n      this.setState({\n        alerts: [\n          ...this.state.alerts,\n          {\n            title: t`You don't have rights to do this operation.`,\n            variant: 'warning',\n          },\n        ],\n      });\n    };\n\n    MyNamespaceAPI.get(collection.namespace.name, {\n      include_related: 'my_permissions',\n    })\n      .then((value) => {\n        if (\n          value.data.related_fields.my_permissions.includes(\n            'galaxy.upload_to_namespace',\n          )\n        ) {\n          this.setState({\n            updateCollection: collection,\n            showImportModal: true,\n          });\n        } else {\n          addAlert();\n        }\n      })\n      .catch(() => {\n        addAlert();\n      });\n  }\n\n  private toggleCollectionSync(name: string, namespace: string) {\n    const synclist = { ...this.state.synclist };\n\n    const colIndex = synclist.collections.findIndex(\n      (el) => el.name === name && el.namespace === namespace,\n    );\n\n    if (colIndex < 0) {\n      synclist.collections.push({ name: name, namespace: namespace });\n    } else {\n      synclist.collections.splice(colIndex, 1);\n    }\n\n    MySyncListAPI.update(synclist.id, synclist).then((response) => {\n      this.setState({ synclist: response.data });\n      MySyncListAPI.curate(synclist.id).then(() => null);\n    });\n  }\n\n  private isCollectionSynced(name: string, namespace: string): boolean {\n    const { synclist } = this.state;\n    const found = synclist.collections.find(\n      (el) => el.name === name && el.namespace === namespace,\n    );\n\n    if (synclist.policy === 'include') {\n      return !(found === undefined);\n    } else {\n      return found === undefined;\n    }\n  }\n\n  private renderList(collections) {\n    return (\n      <div className='list-container'>\n        <div className='hub-list'>\n          <DataList className='data-list' aria-label={t`List of Collections`}>\n            {collections.map((c) => (\n              <CollectionListItem\n                showNamespace={true}\n                key={c.id}\n                {...c}\n                controls={\n                  <>\n                    {this.renderSyncToogle(c.name, c.namespace.name)}\n                    {this.renderMenu(true, c)}\n                  </>\n                }\n                repo={this.context.selectedRepo}\n              />\n            ))}\n          </DataList>\n        </div>\n      </div>\n    );\n  }\n\n  private getSynclist() {\n    MySyncListAPI.list().then((result) => {\n      // ignore results if more than 1 is returned\n      // TODO: should we throw an error for this or just ignore it?\n      if (result.data.meta.count === 1) {\n        this.setState({ synclist: result.data.data[0] });\n      } else {\n        console.error(\n          `my-synclist returned ${result.data.meta.count} synclists`,\n        );\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () => {\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, ['view_type']),\n          deprecated: false,\n        },\n        this.context.selectedRepo,\n      ).then((result) => {\n        this.setState({\n          collections: result.data.data,\n          numberOfResults: result.data.meta.count,\n          loading: false,\n        });\n      });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(Search);\n\nSearch.contextType = AppContext;\n"],"names":["Search","props","params","ParamHelper","location","search","Constants","localStorage","getItem","state","collections","numberOfResults","loading","synclist","undefined","alerts","updateCollection","showImportModal","redirect","noDependencies","deleteCollection","confirmDelete","isDeletionPending","this","load","queryCollections","DEPLOYMENT_MODE","getSynclist","alert","setState","closeAlertMixin","Navigate","to","noData","length","filterIsSet","updateParams","p","className","closeAlert","i","setConfirmDelete","cancelAction","deleteAction","DeleteCollectionUtils","collection","selectedRepo","context","addAlert","isOpen","onUploadSuccess","formatPath","Paths","namespace","name","setOpen","warn","toggleImportModal","title","contextSelector","path","ignoredParams","size","setItem","view_type","count","perPageOptions","isTop","description","renderCollections","warning","variant","clearAllFilters","renderList","renderCards","map","c","key","id","footer","renderSyncToogle","repo","menu","renderMenu","CollectionAPI","deprecated","then","res","taskId","parsePulpIDFromURL","data","task","waitForTask","err","response","status","statusText","errorMessage","list","hasPermission","menuItems","canDeleteCollection","onClick","DropdownItem","handleControlClick","push","checkUploadPrivilleges","Button","items","filter","Boolean","ariaLabel","Switch","label","isChecked","isCollectionSynced","onChange","toggleCollectionSync","MyNamespaceAPI","include_related","value","related_fields","my_permissions","includes","colIndex","findIndex","el","splice","MySyncListAPI","found","find","policy","DataList","showNamespace","controls","result","meta","console","error","React","withRouter","contextType","AppContext"],"sourceRoot":""}
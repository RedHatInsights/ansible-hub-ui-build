{"version":3,"file":"js/5868.321a2502051df1716dde.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  LabelGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  AnsibleDistributionAPI,\n  AnsibleRepositoryAPI,\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n  Repositories,\n} from 'src/api';\nimport { Repository } from 'src/api/response-types/repositories';\nimport {\n  ApproveModal,\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RepositoriesUtils,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n    status?: string;\n    sort?: string;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersionSearch[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersionSearch[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersionSearch;\n  approveModalInfo: {\n    collectionVersion;\n  };\n  approvedRepositoryList: Repository[];\n  stagingRepoNames: string[];\n  rejectedRepoName: string;\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['status']) {\n      params['status'] = Constants.NEEDSREVIEW;\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      approvedRepositoryList: [],\n      rejectedRepoName: null,\n      stagingRepoNames: [],\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      const promises = [];\n\n      promises.push(this.loadRepo('staging'));\n      promises.push(this.loadRepo('rejected'));\n\n      promises.push(\n        RepositoriesUtils.listApproved()\n          .then((data) => {\n            this.setState({ approvedRepositoryList: data });\n          })\n          .catch(({ response: { status, statusText } }) => {\n            this.addAlertObj({\n              title: t`Failed to load repositories.`,\n              variant: 'danger',\n              description: errorMessage(status, statusText),\n            });\n          }),\n      );\n\n      promises.push(this.queryCollections(false));\n\n      Promise.all(promises).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  private loadRepo(pipeline) {\n    return Repositories.list({ pulp_label_select: `pipeline=${pipeline}` })\n      .then((data) => {\n        if (data.data.results.length > 0) {\n          if (pipeline == 'staging') {\n            this.setState({\n              stagingRepoNames: data.data.results.map((res) => res.name),\n            });\n          }\n\n          if (pipeline == 'rejected') {\n            this.setState({ rejectedRepoName: data.data.results[0].name });\n          }\n        }\n      })\n      .catch((error) => {\n        this.addAlert(\n          t`Error loading repository with label ${pipeline}.`,\n          'danger',\n          error?.message,\n        );\n      });\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader />;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () =>\n                            this.queryCollections(true),\n                          )\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'status',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.APPROVED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    status: {\n                      [Constants.APPROVED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    status: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={\n                  this.state.approveModalInfo.collectionVersion\n                }\n                addAlert={(alert) => this.addAlertObj(alert)}\n                allRepositories={this.state.approvedRepositoryList}\n                stagingRepoNames={this.state.stagingRepoNames}\n                rejectedRepoName={this.state.rejectedRepoName}\n              />\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'status']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repository`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private isVersionUpdating(collection: CollectionVersionSearch) {\n    return this.state.updatingVersions.find((v) => {\n      return v == collection;\n    });\n  }\n\n  private renderStatus(collectionData: CollectionVersionSearch) {\n    const { repository } = collectionData;\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isVersionUpdating(collectionData)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n\n    if (this.isApproved(collectionData)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && collectionData.is_signed\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {!collectionData.is_signed &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(collectionData: CollectionVersionSearch, index) {\n    const { collection_version: version, repository } = collectionData;\n    const data_cy = `CertificationDashboard-row-${collectionData.repository.name}-${collectionData.collection_version.namespace}-${collectionData.collection_version.name}`;\n    return (\n      <tr key={index} data-cy={data_cy}>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: repository.name,\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(\n                repository,\n                version.namespace,\n                version.name,\n                version.version,\n              );\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.pulp_created} />\n        </td>\n        <td>\n          <LabelGroup>{repository.name}</LabelGroup>\n        </td>\n        <td>{this.renderStatus(collectionData)}</td>\n        {this.renderButtons(collectionData)}\n      </tr>\n    );\n  }\n\n  private renderButtons(collectionData: CollectionVersionSearch) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const { collection_version: version, repository } = collectionData;\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.isVersionUpdating(collectionData)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && !collectionData.is_signed;\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button\n            onClick={() => this.openUploadCertificateModal(collectionData)}\n          >\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() => {\n          this.approve(collectionData);\n        }}\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => this.approve(collectionData)}\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => {\n          this.reject(collectionData);\n        }}\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isApproved(collectionData)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true),\n            rejectDropDown(false),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      // render reject button if version is in multiple repositories including rejected state - handles inconsistency\n      // and allows user to reject it again to move it all to rejected state\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false),\n            rejectDropDown(true),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      return (\n        <ListItemActions\n          kebabItems={[rejectDropDown(false), importsLink]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersionSearch) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const { collection_version, repository } =\n      this.state.versionToUploadCertificate;\n    const signed_collection = collection_version.pulp_href;\n    const { name, namespace, version } = collection_version;\n    CertificateUploadAPI.upload({\n      file,\n      repository: repository.pulp_href,\n      signed_collection,\n    })\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${namespace} ${name} v${version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${namespace} ${name} v${version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private isApproved(collection: CollectionVersionSearch) {\n    if (!collection) {\n      return false;\n    }\n\n    return this.state.approvedRepositoryList.find(\n      (r) => r.name == collection.repository.name,\n    );\n  }\n\n  private approve(collection) {\n    if (!collection) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Approval failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    const { approvedRepositoryList } = this.state;\n\n    if (approvedRepositoryList.length == 1) {\n      if (collection.repository) {\n        this.updateCertification(\n          collection.collection_version,\n          collection.repository.name,\n          this.state.approvedRepositoryList[0].name,\n        );\n      } else {\n        // I hope that this may not occure ever, but to be sure...\n        this.addAlert(\n          t`Approval failed.`,\n          'danger',\n          t`Collection has to be in rejected or staging repository.`,\n        );\n      }\n    } else {\n      this.transformToCollectionVersion(collection).then(\n        (collectionVersion) => {\n          this.setState({ approveModalInfo: { collectionVersion } });\n        },\n      );\n    }\n  }\n\n  private reject(collection) {\n    const originalRepo = collection.repository.name;\n    const version = collection.collection_version;\n\n    this.transformToCollectionVersion(collection)\n      .then((versionWithRepos) => {\n        this.setState({ updatingVersions: [collection] });\n        if (\n          versionWithRepos.repository_list.includes(this.state.rejectedRepoName)\n        ) {\n          // collection already in rejected repository, so remove it from aproved repo\n\n          RepositoriesUtils.deleteCollection(originalRepo, version.pulp_href)\n            .then(() => {\n              this.addAlert(\n                t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n                'success',\n              );\n              this.queryCollections(true);\n            })\n            .catch((error) => {\n              this.setState({ updatingVersions: [] });\n              const description = !error.response\n                ? error\n                : errorMessage(\n                    error.response.status,\n                    error.response.statusText,\n                  );\n\n              this.addAlert(\n                t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                'danger',\n                description,\n              );\n            });\n        } else {\n          // collection is not in rejected state, move it there\n          this.updateCertification(\n            version,\n            originalRepo,\n            this.state.rejectedRepoName,\n          );\n        }\n      })\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private async distributionByRepoName(name) {\n    const repository = (await AnsibleRepositoryAPI.list({ name }))?.data\n      ?.results?.[0];\n    if (!repository) {\n      return Promise.reject(t`Failed to find repository ${name}`);\n    }\n\n    const distribution = (\n      await AnsibleDistributionAPI.list({ repository: repository.pulp_href })\n    )?.data?.results?.[0];\n    if (!distribution) {\n      return Promise.reject(\n        t`Failed to find a distribution for repository ${name}`,\n      );\n    }\n\n    return distribution;\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    // galaxy_ng CollectionRepositoryMixing.get_repos uses the distribution base path to look up repository pk\n    // there ..may be room for simplification since we already know the repo; OTOH also compatibility concerns\n    return Promise.all([\n      this.distributionByRepoName(originalRepo),\n      this.distributionByRepoName(destinationRepo),\n    ])\n      .then(([source, destination]) =>\n        CollectionVersionAPI.move(\n          version.namespace,\n          version.name,\n          version.version,\n          source.base_path,\n          destination.base_path,\n        ),\n      )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    const { status, sort, ...params } = this.state.params;\n\n    const updatedParams = {\n      order_by: sort,\n      ...params,\n    };\n\n    if (status) {\n      updatedParams['repository_label'] = `pipeline=${status}`;\n    }\n\n    return CollectionVersionAPI.list(updatedParams)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private download(\n    repository: CollectionVersionSearch['repository'],\n    namespace: string,\n    name: string,\n    version: string,\n  ) {\n    CollectionAPI.getDownloadURL(repository, namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n\n  async getCollectionRepoList(collection: CollectionVersionSearch) {\n    const { name, namespace, version } = collection.collection_version;\n\n    // get repository list for selected collection\n    const collectionInRepos = await CollectionVersionAPI.list({\n      namespace,\n      name,\n      version,\n      page_size: 100000,\n      offset: 0,\n    });\n\n    const collectionRepos = collectionInRepos.data.data.map(\n      ({ repository }) => repository.name,\n    );\n\n    return collectionRepos;\n  }\n\n  // compose from collectionVersionSearch to CollectionVersion structure for approval modal\n  async transformToCollectionVersion(collection: CollectionVersionSearch) {\n    const repoList = await this.getCollectionRepoList(collection);\n\n    const { collection_version } = collection;\n    const id = parsePulpIDFromURL(collection_version.pulp_href);\n    const collectionVersion = {\n      id,\n      version: collection_version.version,\n      namespace: collection_version.namespace,\n      name: collection_version.name,\n      repository_list: repoList,\n    };\n\n    return collectionVersion;\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_transformToCollectionVersion","_getCollectionRepoList","_distributionByRepoName","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","Constants","NEEDSREVIEW","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","approvedRepositoryList","rejectedRepoName","stagingRepoNames","_createClass","key","value","_this2","_this$context","this","context","user","hasPermission","is_anonymous","setState","promises","push","loadRepo","RepositoriesUtils","listApproved","then","data","_ref","_ref$response","response","status","statusText","addAlertObj","title","i18n","_","variant","description","errorMessage","queryCollections","Promise","all","pipeline","_this3","Repositories","list","pulp_label_select","concat","results","length","map","res","name","error","addAlert","message","_status","_this4","_this$state","React","BaseHeader","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","inputType","options","NOTCERTIFIED","APPROVED","Pagination","count","isTop","AppliedFilters","ignoredParams","niceValues","_defineProperty","niceNames","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","alert","allRepositories","LoadingPageWithHeader","_this5","filterIsSet","EmptyStateFilter","EmptyStateNoData","sortTableOptions","headers","type","SortTable","version","renderRow","collection","find","v","collectionData","_repository$pulp_labe","repoStatus","repository","pulp_labels","isVersionUpdating","isApproved","display_signatures","featureFlags","Label","color","icon","CheckCircleIcon","is_signed","ExclamationCircleIcon","_this$context$feature","can_upload_signatures","require_upload_signatures","ExclamationTriangleIcon","index","_this6","collection_version","data_cy","namespace","Link","to","formatPath","Paths","collectionByRepo","repo","Button","ButtonVariant","link","onClick","download","DownloadIcon","DateComponent","date","pulp_created","LabelGroup","renderStatus","renderButtons","_repository$pulp_labe2","_this7","_this$context$feature2","collection_auto_sign","ListItemActions","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","approve","filter","Boolean","importsLink","DropdownItem","component","myImports","certifyDropDown","rejectDropDown","reject","kebabItems","buttons","file","_this8","_this$state$versionTo","signed_collection","pulp_href","CertificateUploadAPI","upload","result","waitForTask","parsePulpIDFromURL","task","r","_this9","updateCertification","transformToCollectionVersion","_this10","originalRepo","versionWithRepos","repository_list","includes","deleteCollection","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$AnsibleReposit","_yield$AnsibleReposit2","_yield$AnsibleReposit3","_yield$AnsibleDistrib","_yield$AnsibleDistrib2","_yield$AnsibleDistrib3","distribution","_context","prev","next","AnsibleRepositoryAPI","t1","sent","t0","t2","abrupt","AnsibleDistributionAPI","t4","t3","t5","stop","_x","apply","arguments","destinationRepo","_this11","distributionByRepoName","_ref2","_ref3","_slicedToArray","source","destination","CollectionVersionAPI","move","base_path","remove_task_id","waitMs","handleLoading","_this12","_this$state$params","updatedParams","_objectSpread","order_by","sort","_objectWithoutProperties","_excluded","meta","CollectionAPI","getDownloadURL","downloadURL","window","assign","get","updateParamsMixin","closeAlertMixin","_toConsumableArray","_callee2","_collection$collectio","collectionInRepos","collectionRepos","_context2","page_size","offset","_ref4","_x2","_callee3","repoList","_context3","getCollectionRepoList","_x3","withRouter","contextType","AppContext"],"sourceRoot":""}
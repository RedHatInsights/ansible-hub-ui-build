{"version":3,"file":"js/2613.98c134acfd312e97f698.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"sourcesContent":["import { i18n } from '@lingui/core';\nimport { t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  Pagination,\n  Sort,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps } from 'src/utilities';\nimport { errorMessage, filterIsSet } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n  inputText: string;\n}\n\ninterface IProps extends RouteProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n      inputText: params['keywords'] || '',\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: this.context.alerts || [] });\n    this.context.setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading, inputText } =\n      this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // Namespaces or Partners\n    const title = i18n._(namespaceBreadcrumb.name);\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceDetail,\n                {\n                  namespace: result.name,\n                },\n                { tab: 'collections' },\n              ),\n            })\n          }\n        ></NamespaceModal>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={title}>\n          {!this.context.user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs\n                  tabs={[\n                    {\n                      title: t`All`,\n                      link: formatPath(Paths[NAMESPACE_TERM]),\n                      active: !filterOwner,\n                    },\n                    {\n                      title: t`My namespaces`,\n                      link: formatPath(Paths.myNamespaces),\n                      active: filterOwner,\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n          {noData ? null : (\n            <div className='toolbar'>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarGroup style={{ marginLeft: 0 }}>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={inputText}\n                        onChange={(text) => this.setState({ inputText: text })}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                        params={params}\n                        filterConfig={[{ id: 'keywords', title: t`keywords` }]}\n                      />\n                      <AppliedFilters\n                        style={{ marginTop: '16px' }}\n                        updateParams={(p) => {\n                          this.updateParams(p, () => this.loadNamespaces());\n                          this.setState({ inputText: '' });\n                        }}\n                        params={params}\n                        ignoredParams={['page_size', 'page', 'sort']}\n                        niceNames={{ keywords: t`keywords` }}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                  <ToolbarGroup style={{ alignSelf: 'start' }}>\n                    <ToolbarItem>\n                      <Sort\n                        options={[\n                          { title: t`Name`, id: 'name', type: 'alpha' },\n                        ]}\n                        params={params}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                      />\n                    </ToolbarItem>\n                    {hasPermission('galaxy.add_namespace') && (\n                      <ToolbarItem key='create-button'>\n                        <Button\n                          variant='primary'\n                          onClick={this.handleModalToggle}\n                        >\n                          {t`Create`}\n                        </Button>\n                      </ToolbarItem>\n                    )}\n                  </ToolbarGroup>\n                </ToolbarContent>\n              </Toolbar>\n              <div>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.loadNamespaces())\n                  }\n                  count={itemCount}\n                  isCompact\n                  perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        <section className='card-area'>{this.renderBody()}</section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={(p) =>\n                this.updateParams(p, () => this.loadNamespaces())\n              }\n              perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody() {\n    const { namespaces, loading } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner></LoadingPageSpinner>;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n              })}\n              key={i}\n              {...ns}\n            ></NamespaceCard>\n          </div>\n        ))}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceList.contextType = AppContext;\n","import * as React from 'react';\nimport { Paths } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass Partners extends React.Component<RouteProps> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceDetail}\n        filterOwner={false}\n      />\n    );\n  }\n}\n\nexport default withRouter(Partners);\n"],"names":["NamespaceList","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","setState","_ref","isModalOpen","params","ParamHelper","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","inputText","_createClass","key","value","_this2","this","context","setAlerts","filterOwner","MyNamespaceAPI","then","results","data","meta","count","loadNamespaces","e","_e$response","response","status","statusText","addAlert","variant","title","i18n","description","errorMessage","_this3","redirect","React","Navigate","to","_this$state","noData","filterIsSet","length","LoadingPageWithHeader","namespaceBreadcrumb","className","NamespaceModal","isOpen","toggleModal","handleModalToggle","onCreateSuccess","result","formatPath","Paths","namespace","name","tab","AlertList","closeAlert","i","BaseHeader","user","is_anonymous","LinkTabs","tabs","link","active","Toolbar","ToolbarContent","ToolbarGroup","style","marginLeft","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","AppliedFilters","marginTop","ignoredParams","niceNames","keywords","alignSelf","Sort","options","type","Button","onClick","Pagination","isCompact","perPageOptions","Constants","renderBody","_this4","_this$state2","_this$props","namespacePath","noDataTitle","noDataDescription","noDataButton","LoadingPageSpinner","EmptyStateFilter","EmptyStateNoData","button","map","ns","NamespaceCard","_extends","namespaceURL","_this5","api","NamespaceAPI","list","_e$response2","get","nonURLParams","alert","concat","_toConsumableArray","closeAlertMixin","contextType","AppContext","Partners","apply","arguments","withRouter"],"sourceRoot":""}
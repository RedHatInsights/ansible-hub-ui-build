{"version":3,"file":"js/9784.637ee1879ec0b033fc87.js","mappings":"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","sources":["webpack:///./src/containers/token/token-insights.tsx"],"sourcesContent":["import { Trans, t } from '@lingui/macro';\nimport { Alert, Button, ClipboardCopyVariant } from '@patternfly/react-core';\nimport React from 'react';\nimport { MyDistributionAPI } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  ClipboardCopy,\n  ExternalLink,\n  Main,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { RouteProps, errorMessage, withRouter } from 'src/utilities';\nimport { getRepoURL } from 'src/utilities';\n\ninterface IState {\n  alerts: AlertType[];\n  synclistBasePath?: string;\n  tokenData?: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n}\n\nclass TokenInsights extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      alerts: [],\n      synclistBasePath: null,\n      tokenData: null,\n    };\n  }\n\n  componentDidMount() {\n    this.getTokenData();\n    this.getSynclistBasePath();\n  }\n\n  getTokenData() {\n    if (!window.insights?.chrome) {\n      // outside insights platform\n      return;\n    }\n\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    // so it never works the first time .. loadToken() causes a reload and then it works => no error handling\n    window.insights.chrome.auth\n      .getOfflineToken()\n      .then(({ data: tokenData }) => this.setState({ tokenData }));\n  }\n\n  getSynclistBasePath() {\n    MyDistributionAPI.list()\n      .then(({ data }) => {\n        const syncDistro = data.data.find(({ base_path }) =>\n          base_path.includes('synclist'),\n        );\n        this.setState({\n          synclistBasePath: syncDistro?.base_path,\n        });\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          synclistBasePath: null,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Server URL could not be displayed.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  render() {\n    const { alerts, synclistBasePath, tokenData } = this.state;\n    const renewTokenCmd = `curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=\"cloud-services\" -d refresh_token=\"${\n      tokenData?.refresh_token ?? '{{ user_token }}'\n    }\" --fail --silent --show-error --output /dev/null`;\n\n    return (\n      <>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={t`Connect to Hub`} />\n        <Main>\n          <section className='pf-c-content'>\n            <section className='body'>\n              <h2>{t`Connect Private Automation Hub`}</h2>\n              <p>\n                <Trans>\n                  Use the Server URL below to sync certified collections to the\n                  Red Hat Certified repository in your private Automation Hub.\n                  If you wish to sync validated content, you can add a remote\n                  with a server url pointed to the validated repo.\n                </Trans>\n              </p>\n            </section>\n            <section className='body'>\n              <h2>{t`Connect the ansible-galaxy client`}</h2>\n              <p>\n                <Trans>\n                  Documentation on how to configure the{' '}\n                  <code>ansible-galaxy</code> client can be found{' '}\n                  <ExternalLink href={UI_DOCS_URL}>here</ExternalLink>. Use the\n                  following parameters to configure the client.\n                </Trans>\n              </p>\n            </section>\n            <section className='body'>\n              <h2>{t`Offline token`}</h2>\n              <p>\n                <Trans>\n                  Use this token to authenticate clients that need to download\n                  content from Automation Hub. This is a secret token used to\n                  protect your content. Store your API token in a secure\n                  location.\n                </Trans>\n              </p>\n              {tokenData ? (\n                <div>\n                  <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n                </div>\n              ) : (\n                <div>\n                  <Button\n                    onClick={() => this.loadToken()}\n                  >{t`Load token`}</Button>\n                </div>\n              )}\n              <div style={{ paddingTop: 'var(--pf-global--spacer--md)' }}>\n                <span>\n                  <Trans>\n                    The token will expire after 30 days of inactivity. Run the\n                    command below periodically to prevent your token from\n                    expiring.\n                  </Trans>\n                </span>\n                <ClipboardCopy\n                  isCode\n                  isReadOnly\n                  variant={ClipboardCopyVariant.expansion}\n                >\n                  {renewTokenCmd}\n                </ClipboardCopy>\n              </div>\n              <h2>{t`Manage tokens`}</h2>\n              <Trans>\n                To revoke a token or see all of your tokens, visit the{' '}\n                <ExternalLink href='https://sso.redhat.com/auth/realms/redhat-external/account/#/applications'>\n                  offline API token management\n                </ExternalLink>{' '}\n                page.\n              </Trans>\n            </section>\n            <section className='body'>\n              <h2>{t`Server URL`}</h2>\n              <p>\n                <Trans>\n                  Use this URL to configure the API endpoints that clients need\n                  to download <strong>certified</strong> content from Automation\n                  Hub.{' '}\n                </Trans>\n              </p>\n              <ClipboardCopy isReadOnly>\n                {getRepoURL('published', true)}\n              </ClipboardCopy>\n              <p style={{ paddingTop: 'var(--pf-global--spacer--md)' }}>\n                <Trans>\n                  Use this URL for <strong>validated</strong> content from\n                  Automation Hub.{' '}\n                </Trans>\n              </p>\n              <ClipboardCopy isReadOnly>\n                {getRepoURL('validated')}\n              </ClipboardCopy>\n              <p style={{ paddingTop: 'var(--pf-global--spacer--md)' }}>\n                <Trans>\n                  Synclists are deprecated in AAP 2.4 and will be removed in a\n                  future release, use client-side <code>requirements.yml</code>{' '}\n                  instead.\n                  <br />\n                  If you&apos;re using sync toggles with AAP 2.3 or older, you\n                  will need to use a different URL:\n                </Trans>\n              </p>\n              {synclistBasePath ? (\n                <ClipboardCopy isReadOnly>\n                  {getRepoURL(synclistBasePath)}\n                </ClipboardCopy>\n              ) : (\n                <Alert\n                  variant='danger'\n                  isInline\n                  title={t`Synclist distribution was not found.`}\n                  className='hub-content-alert-fix'\n                />\n              )}\n            </section>\n            <section className='body'>\n              <h2>{t`SSO URL`}</h2>\n              <p>\n                <Trans>\n                  Use this URL to configure the authentication URLs that clients\n                  need to download content from Automation Hub.\n                </Trans>\n              </p>\n              <ClipboardCopy isReadOnly>\n                https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n              </ClipboardCopy>\n            </section>\n            <section className='body'>\n              <h2>{t`CRC public key`}</h2>\n              <p>\n                <Trans>\n                  We use a number of keys to sign our software packages. The\n                  necessary public keys are included in the relevant products\n                  and are used to automatically verify software updates. You can\n                  also verify the packages manually using the keys on this page.\n                  More information can be found{' '}\n                  <ExternalLink href='https://access.redhat.com/security/team/key'>\n                    here.\n                  </ExternalLink>\n                </Trans>\n              </p>\n            </section>\n          </section>\n        </Main>\n      </>\n    );\n  }\n\n  private loadToken() {\n    // doOffline causes the page to refresh and will make the data\n    // available to getOfflineToken() when the component mounts after\n    // the reload\n    window.insights.chrome.auth.doOffline();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TokenInsights);\nTokenInsights.contextType = AppContext;\n"],"names":["TokenInsights","_React$Component","props","_this","_classCallCheck","_callSuper","state","alerts","synclistBasePath","tokenData","_inherits","_createClass","key","value","this","getTokenData","getSynclistBasePath","_window$insights","_this2","window","insights","chrome","auth","getOfflineToken","then","_ref","data","setState","_this3","MyDistributionAPI","list","_ref2","syncDistro","find","_ref3","base_path","includes","e","_e$response","response","status","statusText","concat","_toConsumableArray","variant","title","i18n","_","id","description","errorMessage","_tokenData$refresh_to","_this4","_this$state","renewTokenCmd","refresh_token","React","AlertList","closeAlert","i","BaseHeader","Main","className","Trans","components","ExternalLink","href","UI_DOCS_URL","ClipboardCopy","Button","onClick","loadToken","style","paddingTop","isCode","isReadOnly","ClipboardCopyVariant","expansion","getRepoURL","Alert","isInline","doOffline","get","closeAlertMixin","withRouter","contextType","AppContext"],"sourceRoot":""}
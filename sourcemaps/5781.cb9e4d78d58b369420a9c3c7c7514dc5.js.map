{"version":3,"file":"js/5781.03b62516dc81410e445f.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collectionsCount?: number;\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\n// Caches the collection data when matching, prevents redundant fetches between collection detail tabs\nconst cache = {\n  repository: null,\n  namespace: null,\n  name: null,\n  version: null,\n\n  collections: [],\n  collectionsCount: 0,\n  collection: null,\n  content: null,\n};\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  // try loading from cache\n  if (\n    !forceReload &&\n    cache.repository === repo &&\n    cache.namespace === namespace &&\n    cache.name === name &&\n    cache.version === version\n  ) {\n    setCollection(\n      cache.collections,\n      cache.collection,\n      cache.content,\n      cache.collectionsCount,\n    );\n    return;\n  }\n\n  const requestParams = {\n    ...(repo ? { repository_name: repo } : {}),\n    namespace,\n    name,\n  };\n\n  const currentVersion = (\n    version\n      ? CollectionVersionAPI.list({ ...requestParams, version })\n      : CollectionVersionAPI.list({ ...requestParams, is_highest: true })\n  ).then(({ data }) => data.data[0]);\n\n  const content = currentVersion\n    .then((collection) =>\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ),\n    )\n    .then(({ data: { results } }) => results[0])\n    .catch(() => navigate(formatPath(Paths.notFound)));\n\n  // Note: this only provides the first page - containing the latest version, and all items for the version *selector*,\n  // but the version *modal* is using a separate call, in CollectionHeader updatePaginationParams\n  const versions = CollectionVersionAPI.list({\n    ...requestParams,\n    order_by: '-version',\n    page_size: 10,\n  })\n    .then(({ data }) => data)\n    .catch(() => ({ data: [], meta: { count: 0 } }));\n\n  return Promise.all([versions, currentVersion, content]).then(\n    ([\n      {\n        data: collections,\n        meta: { count: collectionsCount },\n      },\n      collection,\n      content,\n    ]) => {\n      setCollection(collections, collection, content, collectionsCount);\n\n      cache.repository = repo;\n      cache.namespace = namespace;\n      cache.name = name;\n      cache.version = version;\n\n      cache.collections = collections;\n      cache.collectionsCount = collectionsCount;\n      cache.collection = collection;\n      cache.content = content;\n    },\n  );\n}\n","import { isEqual } from 'lodash';\nimport React from 'react';\nimport {\n  AlertList,\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collections: [],\n      collectionsCount: 0,\n      collection: null,\n      content: null,\n      distroBasePath: null,\n      params: params,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollections(true);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.location, this.props.location)) {\n      this.loadCollections(false);\n    }\n  }\n\n  render() {\n    const {\n      collections,\n      collectionsCount,\n      collection,\n      content,\n      params,\n      alerts,\n    } = this.state;\n\n    if (collections.length <= 0) {\n      return <LoadingPageWithHeader />;\n    }\n\n    const { collection_version: version } = collection;\n\n    const breadcrumbs = [\n      namespaceBreadcrumb(),\n      {\n        url: formatPath(Paths.namespaceDetail, {\n          namespace: version.namespace,\n        }),\n        name: version.namespace,\n      },\n      {\n        name: version.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <CollectionHeader\n          reload={() => this.loadCollections(true)}\n          collections={collections}\n          collectionsCount={collectionsCount}\n          collection={collection}\n          content={content}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.loadCollections(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='install'\n          repo={this.props.routeParams.repo}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionInfo\n              {...collection}\n              content={content}\n              updateParams={(p) => this.updateParams(p)}\n              params={this.state.params}\n              addAlert={(variant, title, description) =>\n                this.setState({\n                  alerts: [\n                    ...this.state.alerts,\n                    {\n                      variant,\n                      title,\n                      description,\n                    },\n                  ],\n                })\n              }\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadCollections(forceReload) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      setCollection: (collections, collection, content, collectionsCount) =>\n        this.setState({\n          collections,\n          collection,\n          content,\n          collectionsCount,\n        }),\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CollectionDetail);\n\nCollectionDetail.contextType = AppContext;\n"],"names":["cache","repository","namespace","name","version","collections","collectionsCount","collection","content","loadCollection","_ref","forceReload","matchParams","navigate","setCollection","stateParams","repo","requestParams","_objectSpread","repository_name","currentVersion","CollectionVersionAPI","list","is_highest","then","_ref2","data","CollectionAPI","getContent","collection_version","_ref3","results","formatPath","Paths","notFound","versions","order_by","page_size","_ref4","meta","count","Promise","all","_ref5","_ref6","_slicedToArray","_ref6$","CollectionDetail","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","state","distroBasePath","alerts","_createClass","key","value","this","loadCollections","prevProps","isEqual","_this2","_this$state","length","React","LoadingPageWithHeader","breadcrumbs","namespaceBreadcrumb","url","namespaceDetail","AlertList","closeAlert","i","CollectionHeader","reload","updateParams","p","activeTab","routeParams","Main","className","CollectionInfo","_extends","addAlert","variant","title","description","setState","concat","_toConsumableArray","_this3","get","updateParamsMixin","closeAlertMixin","withRouter","contextType","AppContext"],"sourceRoot":""}
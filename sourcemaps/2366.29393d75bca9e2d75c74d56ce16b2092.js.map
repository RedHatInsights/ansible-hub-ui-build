{"version":3,"file":"js/2366.489a95c45a8bc0542515.js","mappings":"8RAKiD,IAE3CA,EAAY,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,I,IAAAE,G,EAAAH,E,gaAAA,SAAAA,IAAA,OAAAI,EAAAA,EAAAA,GAAA,KAAAJ,GAAAG,EAAAE,MAAA,KAAAC,UAAA,CAYf,OAZeC,EAAAA,EAAAA,GAAAP,EAAA,EAAAQ,IAAA,SAAAC,MAChB,WACE,OAAKC,KAAKC,QAAQC,MAAQF,KAAKC,QAAQC,KAAKC,aACnCC,IAAAA,cAACC,EAAAA,GAAsB,MAG9BD,IAAAA,cAACE,EAAAA,GAAaC,EAAAA,EAAAA,GAAA,GACRP,KAAKQ,MAAK,CACdC,cAAeC,EAAAA,GAAMC,gBACrBC,aAAa,IAGnB,KAACtB,CAAA,CAZe,CAASc,IAAAA,WAe3B,SAAeS,EAAAA,EAAAA,IAAWvB,GAC1BA,EAAawB,YAAcC,EAAAA,C,8yBC+BpB,IAAMT,EAAa,SAAAf,IAAAC,EAAAA,EAAAA,GAAAc,EAAAf,GAAA,I,IAAAE,G,EAAAa,E,gaAGxB,SAAAA,EAAYE,GAAO,IAAAQ,GAAAtB,EAAAA,EAAAA,GAAA,KAAAY,GACjBU,EAAAvB,EAAAwB,KAAA,KAAMT,IAAOU,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,eAHA,CAAC,YAASE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,qBA6BG,WAC1BA,EAAKI,UAAS,SAAAC,GAAc,MAAQ,CAClCC,aAD0BD,EAAXC,YAEhB,GACH,IA5BE,IAAMC,EAASC,EAAAA,GAAYC,iBAAiBjB,EAAMkB,SAASC,OAAQ,CACjE,OACA,cAmBA,OAhBGJ,EAAkB,YACrBA,EAAkB,UAAI,IAGnBA,EAAa,OAChBA,EAAa,KAAI,QAGnBP,EAAKY,MAAQ,CACXC,OAAQ,GACRC,gBAAYC,EACZC,UAAW,EACXT,OAAQA,EACRU,eAAe,EACfX,aAAa,EACbY,SAAS,GACTlB,CACJ,CAsQC,OAtQAnB,EAAAA,EAAAA,GAAAS,EAAA,EAAAR,IAAA,oBAAAC,MAQD,WAAoB,IAAAoC,EAAA,KAClBnC,KAAKoB,SAAS,CAAES,OAAQ7B,KAAKC,QAAQ4B,QAAU,KAC/C7B,KAAKC,QAAQmC,UAAU,IAEnBpC,KAAKQ,MAAMI,YAGbyB,EAAAA,GAAeC,KAAK,CAAC,GAClBC,MAAK,SAACC,GAC2B,IAA5BA,EAAQC,KAAKC,KAAKC,MACpBR,EAAKS,iBAELT,EAAKf,SAAS,CACZa,eAAe,EACfH,WAAY,GACZI,SAAS,GAGf,IAAE,OACK,SAACW,GACN,IAAAC,EAA+BD,EAAEE,SAAzBC,EAAMF,EAANE,OAAQC,EAAUH,EAAVG,WAChBd,EAAKf,SACH,CACEU,WAAY,GACZE,UAAW,EACXE,SAAS,IAEX,kBACEC,EAAKe,SAAS,CACZC,QAAS,SACTC,MAAKC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACPC,aAAaC,EAAAA,EAAAA,IAAaT,EAAQC,IAClC,GAER,IAEFjD,KAAK4C,gBAET,GAAC,CAAA9C,IAAA,SAAAC,MAED,WAAS,IAAA2D,EAAA,KACP,GAAI1D,KAAK4B,MAAM+B,SACb,OAAOvD,IAAAA,cAACwD,EAAAA,SAAQ,CAACC,GAAI7D,KAAK4B,MAAM+B,WAGlC,IAAAG,EAA2D9D,KAAK4B,MAAxDC,EAAMiC,EAANjC,OAAQC,EAAUgC,EAAVhC,WAAYP,EAAMuC,EAANvC,OAAQS,EAAS8B,EAAT9B,UAAWE,EAAO4B,EAAP5B,QACvCtB,EAAgBZ,KAAKQ,MAArBI,YACAqB,EAAkBjC,KAAKC,QAAvBgC,cAEF8B,IACHC,EAAAA,EAAAA,IAAYhE,KAAK4B,MAAML,OAAQ,CAAC,mBAClBQ,IAAfD,GACsB,IAAtBA,EAAWmC,OAEb,GAAI/B,EACF,OAAO9B,IAAAA,cAAC8D,EAAAA,GAAqB,MAI/B,IAAMd,GAAQe,EAAAA,EAAAA,MAAsBC,KAE9BC,EAAe,SAACC,GAAC,OACrBZ,EAAKW,aAAaC,GAAG,kBAAMZ,EAAKd,gBAAgB,GAAC,EAE7C2B,EAAe,CAAC,CAAEhB,GAAI,WAAYH,MAAKC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,aACzCiB,EAAc,CAClB,CAAEpB,MAAKC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WAASA,GAAI,OAAQkB,KAAM,UAEhCC,EAAU,CACdzC,EAAc,wBACZ7B,IAAAA,cAACuE,EAAAA,OAAM,CAACxB,QAAQ,UAAUyB,QAAS5E,KAAK6E,mBAAkBxB,EAAAA,GAAAC,EACvD,CAAAC,GAAA,YAED,MAGN,OACEnD,IAAAA,cAAA,OAAK0E,UAAU,sBACb1E,IAAAA,cAAC2E,EAAAA,GAAc,CACbC,OAAQhF,KAAK4B,MAAMN,YACnB2D,YAAajF,KAAK6E,kBAClBK,gBAAiB,SAACC,GAAM,OACtBzB,EAAKtC,SAAS,CACZuC,UAAUyB,EAAAA,EAAAA,IACR1E,EAAAA,GAAMC,gBACN,CACE0E,UAAWF,EAAOf,MAEpB,CAAEkB,IAAK,iBAET,IAGNlF,IAAAA,cAACmF,EAAAA,GAAS,CAAC1D,OAAQA,EAAQ2D,WAAY,SAACC,GAAC,OAAK/B,EAAK8B,WAAWC,EAAE,IAChErF,IAAAA,cAACsF,EAAAA,GAAU,CAACtC,MAAOA,IACfpD,KAAKC,QAAQC,KAAKC,cAClBC,IAAAA,cAAA,OAAK0E,UAAU,0BACb1E,IAAAA,cAAA,OAAK0E,UAAU,QACb1E,IAAAA,cAACuF,EAAAA,GAAQ,CACPC,KAAM,CACJ,CACExC,MAAKC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACPsC,MAAMT,EAAAA,EAAAA,IAAW1E,EAAAA,GAAoB,UACrCoF,QAASlF,GAEX,CACEwC,MAAKC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACPsC,MAAMT,EAAAA,EAAAA,IAAW1E,EAAAA,GAAMqF,cACvBD,OAAQlF,SAQrBmD,EAAS,KACR3D,IAAAA,cAAC4F,EAAAA,GAAc,CACbtB,QAASA,EACT/B,MAAOX,EACPuC,aAAcA,EACd0B,cAAe,CAAC,OAAQ,YAAa,QACrC1E,OAAQA,EACRiD,YAAaA,EACbH,aAAcA,IAGlBjE,IAAAA,cAAA,WAAS0E,UAAU,aAChB9E,KAAKkG,WAAW,CAAE7B,aAAAA,KAEpBN,GAAU7B,EAAU,KACnB9B,IAAAA,cAAA,WAAS0E,UAAU,UACjB1E,IAAAA,cAAC+F,EAAAA,GAAU,CACT5E,OAAQA,EACR8C,aAAcA,EACd1B,MAAOX,KAMnB,GAAC,CAAAlC,IAAA,aAAAC,MAED,SAAAqG,GAAqC,IAAAC,EAAAC,EAAA,KAAhBjC,EAAY+B,EAAZ/B,aACnBkC,EAAmDvG,KAAK4B,MAAhDI,EAASuE,EAATvE,UAAWE,EAAOqE,EAAPrE,QAASJ,EAAUyE,EAAVzE,WAAYP,EAAMgF,EAANhF,OACxCiF,EAAuCxG,KAAKQ,MAApCC,EAAa+F,EAAb/F,cAAeG,EAAW4F,EAAX5F,YACfqB,EAAkBjC,KAAKC,QAAvBgC,cAEFwE,EAAWpD,EAAAA,GAAAC,EAAG,CAAAC,GAAA,WACdmD,EAAqB9F,EACeyC,EAAAA,GAAAC,EACtC,CAAAC,GAAA,WAFkCF,EAAAA,GAAAC,EAClC,CAAAC,GAAA,WAGEoD,EAAe1E,EAAc,wBACjC7B,IAAAA,cAACuE,EAAAA,OAAM,CAACxB,QAAQ,UAAUyB,QAAS,kBAAM0B,EAAKzB,mBAAmB,GAACxB,EAAAA,GAAAC,EAC/D,CAAAC,GAAA,YAED,KAEJ,OAAIrB,EAEA9B,IAAAA,cAAA,eACEA,IAAAA,cAACwG,EAAAA,GAAkB,MAAG,KAKF,IAAtB9E,EAAWmC,OAEX7D,IAAAA,cAAA,gBACG4D,EAAAA,EAAAA,IAAYhE,KAAK4B,MAAML,OAAQ,CAAC,aAC/BnB,IAAAA,cAACyG,EAAAA,GAAgB,MAEjBzG,IAAAA,cAAC0G,EAAAA,GAAgB,CACf1D,MAAOqD,EACPjD,YAAakD,EACbK,OAAQJ,KAQhBvG,IAAAA,cAAA,WAAS0E,UAAU,mBAChBhD,EAAWkF,KAAI,SAACC,EAAIxB,GAAC,OACpBrF,IAAAA,cAAA,OAAKN,IAAK2F,EAAGX,UAAU,gBACrB1E,IAAAA,cAAC8G,EAAAA,GAAa,CACZC,cAAc/B,EAAAA,EAAAA,IAAW3E,EAAe,CACtC4E,UAAW4B,EAAG7C,OAEhBtE,IAAK2F,EACLJ,UAAW4B,IAET,IAEPjF,EAAYT,EAAO6F,WAAwB,QAAff,EAAI9E,EAAO8F,YAAI,IAAAhB,EAAAA,EAAI,GAC9CjG,IAAAA,cAAA,OAAK0E,UAAU,gBACb1E,IAAAA,cAACkH,EAAAA,GAAqB,CACpB1C,QAAS,eAAA2C,EAAA,OACPlD,EAAYmD,EAAAA,EAAC,CAAC,EAAIjG,GAAM,IAAE8F,MAAkB,QAAZE,EAAChG,EAAO8F,YAAI,IAAAE,EAAAA,EAAI,GAAK,IAAI,KAI7D,KAGV,GAAC,CAAAzH,IAAA,iBAAAC,MAED,WAAyB,IAAA0H,EAAA,KAEjBC,EADkB1H,KAAKQ,MAArBI,YACkByB,EAAAA,GAAiBsF,EAAAA,GAE3C3H,KAAKoB,SAAS,CAAEc,SAAS,IAAQ,WAC/BwF,EACGpF,KAAKmF,EAAK7F,MAAML,QAChBgB,MAAK,SAACC,GACLiF,EAAKrG,SAAS,CACZU,WAAYU,EAAQC,KAAKA,KACzBT,UAAWQ,EAAQC,KAAKC,KAAKC,MAC7BT,SAAS,GAEb,IAAE,OACK,SAACW,GACN,IAAA+E,EAA+B/E,EAAEE,SAAzBC,EAAM4E,EAAN5E,OAAQC,EAAU2E,EAAV3E,WAChBwE,EAAKrG,SACH,CACEU,WAAY,GACZE,UAAW,EACXE,SAAS,IAEX,kBACEuF,EAAKvE,SAAS,CACZC,QAAS,SACTC,MAAKC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACPC,aAAaC,EAAAA,EAAAA,IAAaT,EAAQC,IAClC,GAER,GACJ,GACF,GAAC,CAAAnD,IAAA,eAAA+H,IAED,WACE,OAAOrG,EAAAA,GAAYsG,kBAAkB9H,KAAK+H,aAC5C,GAAC,CAAAjI,IAAA,WAAAC,MAED,SAAiBiI,GACfhI,KAAKoB,SAAS,CACZS,OAAQ,GAAFoG,QAAAC,EAAAA,EAAAA,GAAMlI,KAAK4B,MAAMC,QAAM,CAAEmG,KAEnC,GAAC,CAAAlI,IAAA,aAAA+H,IAED,WACE,OAAOM,EAAAA,EAAAA,IAAgB,SACzB,KAAC7H,CAAA,CAlSuB,CAASF,IAAAA,WAqSnCE,EAAcQ,YAAcC,EAAAA,C","sources":["webpack:///./src/containers/namespace-list/my-namespaces.tsx","webpack:///./src/containers/namespace-list/namespace-list.tsx"],"sourcesContent":["import React from 'react';\nimport { EmptyStateUnauthorized } from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass MyNamespaces extends React.Component<RouteProps> {\n  render() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      return <EmptyStateUnauthorized />;\n    }\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceDetail}\n        filterOwner={true}\n      />\n    );\n  }\n}\n\nexport default withRouter(MyNamespaces);\nMyNamespaces.contextType = AppContext;\n","import { t } from '@lingui/macro';\nimport { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  HubListToolbar,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  NamespaceNextPageCard,\n  Pagination,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n} from 'src/utilities';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n}\n\ninterface IProps extends RouteProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: this.context.alerts || [] });\n    this.context.setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading } = this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader />;\n    }\n\n    // Namespaces or Partners\n    const title = namespaceBreadcrumb().name;\n\n    const updateParams = (p) =>\n      this.updateParams(p, () => this.loadNamespaces());\n\n    const filterConfig = [{ id: 'keywords', title: t`keywords` }];\n    const sortOptions = [\n      { title: t`Name`, id: 'name', type: 'alpha' as const },\n    ];\n    const buttons = [\n      hasPermission('galaxy.add_namespace') ? (\n        <Button variant='primary' onClick={this.handleModalToggle}>\n          {t`Create`}\n        </Button>\n      ) : null,\n    ];\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceDetail,\n                {\n                  namespace: result.name,\n                },\n                { tab: 'collections' },\n              ),\n            })\n          }\n        />\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={title}>\n          {!this.context.user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs\n                  tabs={[\n                    {\n                      title: t`All`,\n                      link: formatPath(Paths[NAMESPACE_TERM]),\n                      active: !filterOwner,\n                    },\n                    {\n                      title: t`My namespaces`,\n                      link: formatPath(Paths.myNamespaces),\n                      active: filterOwner,\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        {noData ? null : (\n          <HubListToolbar\n            buttons={buttons}\n            count={itemCount}\n            filterConfig={filterConfig}\n            ignoredParams={['page', 'page_size', 'sort']}\n            params={params}\n            sortOptions={sortOptions}\n            updateParams={updateParams}\n          />\n        )}\n        <section className='card-area'>\n          {this.renderBody({ updateParams })}\n        </section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={updateParams}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody({ updateParams }) {\n    const { itemCount, loading, namespaces, params } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner />;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='hub-card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n              })}\n              key={i}\n              namespace={ns}\n            />\n          </div>\n        ))}\n        {itemCount > params.page_size * (params.page ?? 1) ? (\n          <div className='card-wrapper'>\n            <NamespaceNextPageCard\n              onClick={() =>\n                updateParams({ ...params, page: (params.page ?? 1) + 1 })\n              }\n            />\n          </div>\n        ) : null}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceList.contextType = AppContext;\n"],"names":["MyNamespaces","_React$Component","_inherits","_super","_classCallCheck","apply","arguments","_createClass","key","value","this","context","user","is_anonymous","React","EmptyStateUnauthorized","NamespaceList","_extends","props","namespacePath","Paths","namespaceDetail","filterOwner","withRouter","contextType","AppContext","_this","call","_defineProperty","_assertThisInitialized","setState","_ref","isModalOpen","params","ParamHelper","parseParamString","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","_this2","setAlerts","MyNamespaceAPI","list","then","results","data","meta","count","loadNamespaces","e","_e$response","response","status","statusText","addAlert","variant","title","i18n","_","id","description","errorMessage","_this3","redirect","Navigate","to","_this$state","noData","filterIsSet","length","LoadingPageWithHeader","namespaceBreadcrumb","name","updateParams","p","filterConfig","sortOptions","type","buttons","Button","onClick","handleModalToggle","className","NamespaceModal","isOpen","toggleModal","onCreateSuccess","result","formatPath","namespace","tab","AlertList","closeAlert","i","BaseHeader","LinkTabs","tabs","link","active","myNamespaces","HubListToolbar","ignoredParams","renderBody","Pagination","_ref2","_params$page","_this4","_this$state2","_this$props","noDataTitle","noDataDescription","noDataButton","LoadingPageSpinner","EmptyStateFilter","EmptyStateNoData","button","map","ns","NamespaceCard","namespaceURL","page_size","page","NamespaceNextPageCard","_params$page2","_objectSpread","_this5","api","NamespaceAPI","_e$response2","get","updateParamsMixin","nonURLParams","alert","concat","_toConsumableArray","closeAlertMixin"],"sourceRoot":""}
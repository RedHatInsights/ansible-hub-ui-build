{"version":3,"file":"js/868.1c97c421671c4e32f4fa.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersion,\n  CollectionVersionAPI,\n  Repositories,\n} from 'src/api';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport {\n  ParamHelper,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersion;\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections());\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && version.sign_state === 'signed'\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {version.sign_state === 'unsigned' &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(version.namespace, version.name, version.version);\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        {this.renderButtons(version)}\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.state.updatingVersions.includes(version)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && version.sign_state === 'unsigned';\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button onClick={() => this.openUploadCertificateModal(version)}>\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() =>\n          this.updateCertification(\n            version,\n            Constants.NEEDSREVIEW,\n            Constants.PUBLISHED,\n          )\n        }\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true, Constants.PUBLISHED),\n            rejectDropDown(false, Constants.PUBLISHED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false, Constants.NOTCERTIFIED),\n            rejectDropDown(true, Constants.NOTCERTIFIED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            rejectDropDown(false, Constants.NEEDSREVIEW),\n            importsLink,\n          ]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersion) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const version = this.state.versionToUploadCertificate;\n    const signed_collection = `${PULP_API_BASE_PATH}content/ansible/collection_versions/${version.id}/`;\n\n    return Repositories.getRepository({\n      name: 'staging',\n    })\n      .then((response) =>\n        CertificateUploadAPI.upload({\n          file,\n          repository: response.data.results[0].pulp_href,\n          signed_collection,\n        }),\n      )\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections())\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    this.setState({ updatingVersions: [version] });\n\n    return CollectionVersionAPI.setRepository(\n      version.namespace,\n      version.name,\n      version.version,\n      originalRepo,\n      destinationRepo,\n    )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections())\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            versions: result.data.data,\n            itemCount: result.data.meta.count,\n            loading: false,\n            updatingVersions: [],\n          });\n        })\n        .catch((error) => {\n          this.addAlert(\n            t`Error loading collections.`,\n            'danger',\n            error?.message,\n          );\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }),\n    );\n  }\n\n  private download(namespace: string, name: string, version: string) {\n    CollectionAPI.getDownloadURL('staging', namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","_createClass","key","value","_this$context","this","context","user","hasPermission","is_anonymous","queryCollections","setState","_repository","_this2","_this$state","React","BaseHeader","title","i18n","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","inputType","options","Constants","Pagination","count","isTop","AppliedFilters","ignoredParams","niceValues","repository","_defineProperty","niceNames","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","LoadingPageWithHeader","_this3","length","filterIsSet","EmptyStateFilter","EmptyStateNoData","description","sortTableOptions","headers","type","SortTable","map","version","renderRow","includes","repository_list","display_signatures","featureFlags","Label","variant","color","icon","CheckCircleIcon","sign_state","ExclamationCircleIcon","_this$context$feature","can_upload_signatures","require_upload_signatures","ExclamationTriangleIcon","index","_this4","namespace","name","Link","to","formatPath","Paths","collection","repo","Button","ButtonVariant","onClick","download","DownloadIcon","DateComponent","date","created_at","renderStatus","renderButtons","_this5","_this$context$feature2","collection_auto_sign","ListItemActions","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","updateCertification","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","originalRepo","rejectDropDown","kebabItems","buttons","file","_this6","signed_collection","concat","PULP_API_BASE_PATH","Repositories","then","response","CertificateUploadAPI","data","results","pulp_href","result","waitForTask","parsePulpIDFromURL","task","addAlert","error","errorMessage","status","statusText","destinationRepo","_this7","CollectionVersionAPI","remove_task_id","waitMs","_this8","meta","message","CollectionAPI","downloadURL","window","assign","get","closeAlertMixin","_toConsumableArray","withRouter","contextType","AppContext"],"sourceRoot":""}
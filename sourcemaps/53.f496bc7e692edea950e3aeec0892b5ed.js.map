{"version":3,"file":"js/53.1674441432851.57aa7ec40b22e9a0520b.js","mappings":"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","sources":["webpack:///./src/containers/edit-namespace/edit-namespace.tsx"],"sourcesContent":["import { Trans, t } from '@lingui/macro';\nimport { ActionGroup, Button, Form, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceLinkType, NamespaceType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  NamespaceForm,\n  PartnerHeader,\n  ResourcesForm,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport {\n  ErrorMessagesType,\n  ParamHelper,\n  errorMessage,\n  mapErrorMessages,\n} from 'src/utilities';\n\ninterface IState {\n  namespace: NamespaceType;\n  newLinkName: string;\n  newLinkURL: string;\n  errorMessages: ErrorMessagesType;\n  saving: boolean;\n  loading: boolean;\n  redirect: string;\n  unsavedData: boolean;\n  alerts: AlertType[];\n  params: {\n    tab?: string;\n  };\n  unauthorized: boolean;\n}\n\nclass EditNamespace extends React.Component<RouteProps, IState> {\n  queryParams: URLSearchParams;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    if (!params['tab']) {\n      params['tab'] = 'edit-details';\n    }\n\n    this.state = {\n      loading: false,\n      alerts: [],\n      namespace: null,\n      newLinkURL: '',\n      newLinkName: '',\n      errorMessages: {},\n      saving: false,\n      redirect: null,\n      unsavedData: false,\n      params: params,\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true }, () => this.loadNamespace());\n  }\n\n  render() {\n    const {\n      namespace,\n      errorMessages,\n      saving,\n      redirect,\n      params,\n      unauthorized,\n      loading,\n    } = this.state;\n\n    const tabs = [\n      { id: 'edit-details', name: t`Edit details` },\n      { id: 'edit-resources', name: t`Edit resources` },\n    ];\n\n    if (redirect) {\n      return <Navigate to={redirect} />;\n    }\n\n    if (loading) {\n      return <LoadingPageSpinner />;\n    }\n\n    if (!namespace) {\n      return null;\n    }\n\n    const updateNamespace = (namespace) =>\n      this.setState({\n        namespace,\n        unsavedData: true,\n      });\n\n    return (\n      <React.Fragment>\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[\n            namespaceBreadcrumb,\n            {\n              name: namespace.name,\n              url: formatPath(Paths.namespaceByRepo, {\n                repo: this.context.selectedRepo,\n                namespace: namespace.name,\n              }),\n            },\n            { name: t`Edit` },\n          ]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n        ></PartnerHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main>\n            <section className='body'>\n              {params.tab === 'edit-details' ? (\n                <NamespaceForm\n                  errorMessages={errorMessages}\n                  namespace={namespace}\n                  updateNamespace={updateNamespace}\n                />\n              ) : null}\n              {params.tab === 'edit-resources' ? (\n                <ResourcesForm\n                  namespace={namespace}\n                  updateNamespace={updateNamespace}\n                />\n              ) : null}\n              <Form>\n                <ActionGroup>\n                  <Button\n                    isDisabled={this.isSaveDisabled()}\n                    variant='primary'\n                    onClick={() => this.saveNamespace()}\n                  >\n                    {t`Save`}\n                  </Button>\n                  <Button variant='secondary' onClick={() => this.cancel()}>\n                    {t`Cancel`}\n                  </Button>\n\n                  {saving ? <Spinner></Spinner> : null}\n                </ActionGroup>\n                {this.state.unsavedData ? (\n                  <div\n                    style={{ color: 'red' }}\n                  >{t`You have unsaved changes`}</div>\n                ) : null}\n              </Form>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private isSaveDisabled() {\n    const namespace = this.state.namespace;\n    return namespace.links.some(\n      (link) =>\n        NamespaceForm.validateName(link).validated == 'error' ||\n        NamespaceForm.validateUrl(link).validated == 'error',\n    );\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private loadNamespace() {\n    MyNamespaceAPI.get(this.props.routeParams.namespace)\n      .then((response) => {\n        // Add an empty link to the end of the links array to create an empty field\n        // on the link edit form for adding new links\n        const emptyLink: NamespaceLinkType = { name: '', url: '' };\n        response.data.links.push(emptyLink);\n        this.setState({ loading: false, namespace: response.data });\n      })\n      .catch(() => {\n        this.setState({ unauthorized: true, loading: false });\n      });\n  }\n\n  private saveNamespace() {\n    this.setState({ saving: true }, () => {\n      const namespace = { ...this.state.namespace };\n      const setLinks: NamespaceLinkType[] = [];\n\n      // remove any empty links from the list before saving\n      for (const link of namespace.links) {\n        if (link.url !== '' || link.name !== '') {\n          setLinks.push(link);\n        }\n      }\n\n      namespace.links = setLinks;\n\n      MyNamespaceAPI.update(this.state.namespace.name, namespace)\n        .then((result) => {\n          this.setState(\n            {\n              namespace: result.data,\n              errorMessages: {},\n              saving: false,\n              unsavedData: false,\n              redirect: formatPath(Paths.namespaceByRepo, {\n                repo: this.context.selectedRepo,\n                namespace: this.state.namespace.name,\n              }),\n            },\n            () =>\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'success',\n                  title: (\n                    <Trans>\n                      Saved changes to namespace &quot;\n                      {this.state.namespace.name}&quot;.\n                    </Trans>\n                  ),\n                },\n              ]),\n          );\n        })\n        .catch((error) => {\n          const result = error.response;\n          if (result.status === 400) {\n            this.setState({\n              errorMessages: mapErrorMessages(error),\n              saving: false,\n            });\n          } else if (result.status === 404) {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: t`Changes to namespace \"${this.state.namespace.name}\" could not be saved.`,\n                description: errorMessage(result.status, result.statusText),\n              }),\n              saving: false,\n            });\n          }\n        });\n    });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private cancel() {\n    this.setState({\n      redirect: formatPath(Paths.namespaceByRepo, {\n        repo: this.context.selectedRepo,\n        namespace: this.state.namespace.name,\n      }),\n    });\n  }\n}\n\nEditNamespace.contextType = AppContext;\n\nexport default withRouter(EditNamespace);\n"],"names":["EditNamespace","props","params","ParamHelper","location","search","state","loading","alerts","namespace","newLinkURL","newLinkName","errorMessages","saving","redirect","unsavedData","unauthorized","this","setState","loadNamespace","tabs","id","name","Navigate","to","updateNamespace","breadcrumbs","namespaceBreadcrumb","url","formatPath","Paths","repo","context","selectedRepo","updateParams","p","closeAlert","i","className","tab","Form","ActionGroup","Button","isDisabled","isSaveDisabled","variant","onClick","saveNamespace","cancel","Spinner","style","color","links","some","link","NamespaceForm","validated","MyNamespaceAPI","routeParams","then","response","data","push","setLinks","result","setAlerts","title","error","status","mapErrorMessages","concat","description","errorMessage","statusText","closeAlertMixin","React","contextType","AppContext","withRouter"],"sourceRoot":""}
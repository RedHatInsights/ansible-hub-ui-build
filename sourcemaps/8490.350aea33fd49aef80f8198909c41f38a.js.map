{"version":3,"file":"js/8490.b8f52360a0fe4c32b16a.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-distributions.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  CollectionVersionAPI.getCached(\n    {\n      ...(repo ? { repository_name: repo } : {}),\n      namespace,\n      name,\n      order_by: '-version',\n    },\n    forceReload,\n  )\n    .then((collections: CollectionVersionSearch[]) => {\n      const collection = version\n        ? collections.find(\n            ({ collection_version }) => collection_version.version == version,\n          )\n        : collections.find((cv) => cv.is_highest);\n\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ).then((res) => {\n        const [content] = res.data.results;\n        setCollection(collections, collection, content);\n      });\n    })\n    .catch(() => {\n      navigate(formatPath(Paths.notFound));\n    });\n}\n","import { t } from '@lingui/macro';\nimport { Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport React, { useEffect, useState } from 'react';\nimport { AnsibleDistributionAPI } from 'src/api';\nimport {\n  AppliedFilters,\n  ClipboardCopy,\n  CollectionHeader,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Main,\n  Pagination,\n  SortTable,\n} from 'src/components';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  filterIsSet,\n  getRepoUrl,\n  withRouter,\n} from 'src/utilities';\nimport { loadCollection } from './base';\n\nconst CollectionDistributions = (props: RouteProps) => {\n  const routeParams = ParamHelper.parseParamString(props.location.search);\n\n  const [collections, setCollections] = useState([]);\n  const [collection, setCollection] = useState(null);\n  const [content, setContent] = useState(null);\n  const [inputText, setInputText] = useState('');\n\n  const [distributions, setDistributions] = useState(null);\n  const [count, setCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  const [params, setParams] = useState(\n    Object.keys(routeParams).length\n      ? routeParams\n      : {\n          sort: '-pulp_created',\n        },\n  );\n  const loadCollections = (forceReload) => {\n    loadCollection({\n      forceReload,\n      matchParams: props.routeParams,\n      navigate: props.navigate,\n      setCollection: (collections, collection, content) => {\n        setCollections(collections);\n        setCollection(collection);\n        setContent(content);\n\n        loadDistributions(collection.repository.pulp_href);\n      },\n      stateParams: params,\n    });\n  };\n\n  const loadDistributions = async (repositoryHref: string) => {\n    setLoading(true);\n    const distroList = await AnsibleDistributionAPI.list({\n      repository: repositoryHref,\n      ...ParamHelper.getReduced(params, ['version']),\n    });\n\n    setDistributions(distroList.data.results);\n    setCount(distroList.data.count);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    loadCollections(false);\n  }, []);\n\n  useEffect(() => {\n    loadCollections(false);\n  }, [params]);\n\n  if (!collection || !content || collections.length <= 0) {\n    return <LoadingPageWithHeader></LoadingPageWithHeader>;\n  }\n\n  const { collection_version, repository } = collection;\n\n  const breadcrumbs = [\n    namespaceBreadcrumb,\n    {\n      url: formatPath(Paths.namespaceDetail, {\n        namespace: collection_version.namespace,\n      }),\n      name: collection_version.namespace,\n    },\n    {\n      url: formatPath(Paths.collectionByRepo, {\n        namespace: collection_version.namespace,\n        collection: collection_version.name,\n        repo: repository.name,\n      }),\n      name: collection_version.name,\n    },\n    { name: t`Distributions` },\n  ];\n\n  const cliConfig = (distribution) =>\n    [\n      '[galaxy]',\n      `server_list = ${distribution.base_path}`,\n      '',\n      `[galaxy_server.${distribution.base_path}]`,\n      `url=${getRepoUrl()}`,\n      'token=<put your token here>',\n    ].join('\\n');\n\n  const updateParamsMixin = (params) => {\n    props.navigate({\n      search: '?' + ParamHelper.getQueryString(params || []),\n    });\n\n    setParams(params);\n  };\n\n  const renderTable = (distributions, params) => {\n    if (distributions.length === 0) {\n      return filterIsSet(params, [\n        'name__icontains',\n        'base_path__icontains',\n      ]) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No distributions yet`}\n          description={t`Collection doesn't have any distribution assigned.`}\n        />\n      );\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Base path`,\n          type: 'alpha',\n          id: 'base_path',\n        },\n        {\n          title: t`Created`,\n          type: 'alpha',\n          id: 'pulp_created',\n        },\n        {\n          title: t`CLI configuration`,\n          type: 'none',\n          id: '',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection distributions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(params) => {\n            updateParamsMixin(params);\n          }}\n        />\n        <tbody>\n          {distributions.map((distribution, i) => (\n            <tr key={i}>\n              <td>{distribution.name}</td>\n              <td>{distribution.base_path}</td>\n              <td>\n                <DateComponent date={distribution.pulp_created} />\n              </td>\n              <td>\n                <ClipboardCopy isCode isReadOnly variant={'expansion'} key={i}>\n                  {cliConfig(distribution)}\n                </ClipboardCopy>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <CollectionHeader\n        reload={() => loadCollections(true)}\n        collections={collections}\n        collection={collection}\n        content={content}\n        params={params}\n        updateParams={(params) => {\n          updateParamsMixin(\n            ParamHelper.setParam(params, 'version', params.version),\n          );\n        }}\n        breadcrumbs={breadcrumbs}\n        activeTab='distributions'\n      />\n      <Main>\n        <section className='body'>\n          <div className='toolbar hub-toolbar'>\n            <Toolbar>\n              <ToolbarGroup>\n                <ToolbarItem>\n                  <CompoundFilter\n                    inputText={inputText}\n                    onChange={(text) => {\n                      setInputText(text);\n                    }}\n                    updateParams={(p) => {\n                      updateParamsMixin(p);\n                    }}\n                    params={params}\n                    filterConfig={[\n                      {\n                        id: 'name__icontains',\n                        title: t`Name`,\n                      },\n                      {\n                        id: 'base_path__icontains',\n                        title: t`Base path`,\n                      },\n                    ]}\n                  />\n                </ToolbarItem>\n              </ToolbarGroup>\n            </Toolbar>\n\n            <Pagination\n              params={params}\n              updateParams={(p) => {\n                updateParamsMixin(p);\n              }}\n              count={count}\n              isTop\n            />\n          </div>\n\n          <AppliedFilters\n            updateParams={(p) => {\n              updateParamsMixin(p);\n              setInputText('');\n            }}\n            params={params}\n            ignoredParams={['page_size', 'page', 'sort', 'version']}\n            niceNames={{\n              base_path__icontains: t`Base path`,\n              name__icontains: t`Name`,\n            }}\n          />\n          {loading ? (\n            <LoadingPageSpinner />\n          ) : (\n            renderTable(distributions, params)\n          )}\n          <Pagination\n            params={params}\n            updateParams={(p) => {\n              updateParamsMixin(p);\n            }}\n            count={count}\n          />\n        </section>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(CollectionDistributions);\n"],"names":["loadCollection","_ref","forceReload","matchParams","navigate","setCollection","version","stateParams","name","collection","namespace","repo","CollectionVersionAPI","_objectSpread","repository_name","order_by","then","collections","find","_ref2","collection_version","cv","is_highest","CollectionAPI","res","content","_slicedToArray","data","results","formatPath","Paths","withRouter","props","routeParams","ParamHelper","location","search","_useState","useState","_useState2","setCollections","_useState3","_useState4","_useState5","_useState6","setContent","_useState7","_useState8","inputText","setInputText","_useState9","_useState10","distributions","setDistributions","_useState11","_useState12","count","setCount","_useState13","_useState14","loading","setLoading","_useState15","Object","keys","length","sort","_useState16","params","setParams","loadCollections","loadDistributions","repository","pulp_href","_asyncToGenerator","_regeneratorRuntime","_callee","repositoryHref","distroList","_context","prev","next","AnsibleDistributionAPI","sent","stop","_x","apply","arguments","useEffect","React","LoadingPageWithHeader","breadcrumbs","namespaceBreadcrumb","url","i18n","updateParamsMixin","CollectionHeader","reload","updateParams","activeTab","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","p","filterConfig","id","title","Pagination","isTop","AppliedFilters","ignoredParams","niceNames","base_path__icontains","name__icontains","LoadingPageSpinner","filterIsSet","EmptyStateFilter","EmptyStateNoData","description","sortTableOptions","headers","type","SortTable","options","map","distribution","i","key","base_path","DateComponent","date","pulp_created","ClipboardCopy","isCode","isReadOnly","variant","concat","getRepoUrl","join","cliConfig","renderTable"],"sourceRoot":""}
{"version":3,"file":"js/5153.19afff1860f68727d390.js","mappings":"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","sources":["webpack:///./src/containers/task-management/task_detail.tsx"],"sourcesContent":["import { i18n } from '@lingui/core';\nimport { Trans, t } from '@lingui/macro';\nimport {\n  Button,\n  CodeBlock,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Title,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\nimport { capitalize } from 'lodash';\nimport React from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport { GenericPulpAPI, TaskManagementAPI } from 'src/api';\nimport { TaskType } from 'src/api/response-types/task';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  Breadcrumbs,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateCustom,\n  LoadingPageSpinner,\n  Main,\n  StatusIndicator,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { Paths, formatPath } from 'src/paths';\nimport { RouteProps, errorMessage, withRouter } from 'src/utilities';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport './task.scss';\n\ninterface IState {\n  loading: boolean;\n  task: TaskType;\n  parentTask: TaskType;\n  childTasks: TaskType[];\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  taskName: string;\n  resources: {\n    name?: string;\n    type: string;\n    pluginName?: string;\n  }[];\n  redirect: string;\n  polling: ReturnType<typeof setInterval>;\n}\n\nconst maybeTranslate = (name) =>\n  (Constants.TASK_NAMES[name] && i18n._(Constants.TASK_NAMES[name])) || name;\n\nclass TaskDetail extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      task: null,\n      parentTask: null,\n      childTasks: [],\n      alerts: [],\n      cancelModalVisible: false,\n      taskName: '',\n      resources: [],\n      redirect: null,\n      polling: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  componentWillUnmount() {\n    if (this.state.polling) {\n      clearInterval(this.state.polling);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.routeParams.task !== this.props.routeParams.task) {\n      this.setState({ loading: true });\n      this.loadContent();\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      task,\n      parentTask,\n      childTasks,\n      cancelModalVisible,\n      alerts,\n      taskName,\n      resources,\n      redirect,\n    } = this.state;\n    const breadcrumbs = [\n      { url: formatPath(Paths.taskList), name: t`Task management` },\n      { name: task ? taskName : '' },\n    ];\n    let parentTaskId = null;\n    if (parentTask) {\n      parentTaskId = parsePulpIDFromURL(parentTask.pulp_href);\n    }\n    if (redirect) {\n      return <Navigate to={redirect} />;\n    }\n\n    return loading ? (\n      <LoadingPageSpinner />\n    ) : (\n      <React.Fragment>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader\n          title={taskName}\n          breadcrumbs={<Breadcrumbs links={breadcrumbs} />}\n          pageControls={\n            ['running', 'waiting'].includes(task.state) && (\n              <Button\n                variant='secondary'\n                onClick={() => this.setState({ cancelModalVisible: true })}\n              >\n                {t`Stop task`}\n              </Button>\n            )\n          }\n          status={\n            <StatusIndicator\n              className={'hub-c-task-status'}\n              status={task.state}\n            />\n          }\n        />\n        <Main>\n          <Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task detail`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task name`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.name}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    {task.name !== taskName && (\n                      <DescriptionListGroup>\n                        <DescriptionListTerm>{t`Descriptive name`}</DescriptionListTerm>\n                        <DescriptionListDescription>\n                          {taskName}\n                        </DescriptionListDescription>\n                      </DescriptionListGroup>\n                    )}\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Finished at`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.finished_at} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Created on`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.pulp_created} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task groups`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task group`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.task_group ? task.task_group : t`No task group`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Parent task`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {parentTask ? (\n                          <Link\n                            to={formatPath(Paths.taskDetail, {\n                              task: parentTaskId,\n                            })}\n                          >\n                            {maybeTranslate(parentTask.name)}\n                          </Link>\n                        ) : (\n                          t`No parent task`\n                        )}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Child tasks`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {childTasks.length\n                          ? childTasks.map((childTask) => {\n                              const childTaskId = parsePulpIDFromURL(\n                                childTask.pulp_href,\n                              );\n                              return (\n                                <React.Fragment key={childTaskId}>\n                                  <Link\n                                    to={formatPath(Paths.taskDetail, {\n                                      task: childTaskId,\n                                    })}\n                                  >\n                                    {maybeTranslate(childTask.name)}\n                                  </Link>\n                                  <br />\n                                </React.Fragment>\n                              );\n                            })\n                          : t`No child task`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Reserve resources`}\n                  </Title>\n                  <br />\n                  {resources.length ? (\n                    <DescriptionList isHorizontal>\n                      {resources.map((resource, index) => {\n                        return (\n                          <React.Fragment key={resource.type + index}>\n                            <hr />\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>{t`Type`}</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {resource.type}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            {resource.pluginName && (\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>{t`Plugin`}</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {resource.pluginName}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                            {resource.name && (\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>{t`Name`}</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {resource.name}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                          </React.Fragment>\n                        );\n                      })}\n                    </DescriptionList>\n                  ) : (\n                    t`There's no resource record`\n                  )}\n                </section>\n              </FlexItem>\n            </Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                {!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Progress messages`}\n                    </Title>\n                    <br />\n                    {task.progress_reports.length ? (\n                      <DescriptionList isHorizontal>\n                        {task.progress_reports\n                          .reverse()\n                          .map((report, index) => {\n                            return (\n                              <React.Fragment key={index}>\n                                <hr />\n                                {Object.keys(report).map((key, index) => {\n                                  return (\n                                    !!report[key] && (\n                                      <DescriptionListGroup key={key + index}>\n                                        <DescriptionListTerm>\n                                          {{\n                                            message: t`Message`,\n                                            code: t`Code`,\n                                            state: t`State`,\n                                            done: t`Done`,\n                                          }[key] || capitalize(key)}\n                                        </DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                          {report[key]}\n                                        </DescriptionListDescription>\n                                      </DescriptionListGroup>\n                                    )\n                                  );\n                                })}{' '}\n                              </React.Fragment>\n                            );\n                          })}\n                      </DescriptionList>\n                    ) : (\n                      <EmptyStateCustom\n                        icon={CubesIcon}\n                        title={t`There is no progress message.`}\n                        description={t`There is no progress message.`}\n                      />\n                    )}\n                  </section>\n                )}\n                {!!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Error message`}\n                    </Title>\n                    <br />\n                    <React.Fragment>\n                      <Title headingLevel='h3'>{t`Description`}</Title>\n                      <CodeBlock>{task.error.description}</CodeBlock>\n                      <Title headingLevel='h3'>{t`Traceback`}</Title>\n                      <CodeBlock className={'hub-code-block'}>\n                        {task.error.traceback}\n                      </CodeBlock>\n                    </React.Fragment>\n                  </section>\n                )}\n              </FlexItem>\n            </Flex>\n          </Flex>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderCancelModal() {\n    const name = this.state.taskName;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        confirmAction={() => this.cancelTask()}\n        title={t`Stop task`}\n        confirmButtonTitle={t`Yes, stop`}\n      >\n        {t`${name} will stop running.`}\n      </ConfirmModal>\n    );\n  }\n\n  private cancelTask() {\n    const { task, taskName } = this.state;\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: taskName,\n              description: (\n                <Trans>Task &quot;{taskName}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.loadContent();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${taskName}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n        this.loadContent();\n      });\n  }\n\n  private loadContent() {\n    if (!this.state.polling && !this.state.task) {\n      this.setState({ polling: setInterval(() => this.loadContent(), 10000) });\n    }\n\n    const taskId = this.props.routeParams.task;\n    return TaskManagementAPI.get(taskId)\n      .then((result) => {\n        const allRelatedTasks = [];\n        let parentTask = null;\n        const childTasks = [];\n        const resources = [];\n        if (['canceled', 'completed', 'failed'].includes(result.data.state)) {\n          clearInterval(this.state.polling);\n          this.setState({ polling: null });\n        }\n        if (result.data.parent_task) {\n          const parentTaskId = parsePulpIDFromURL(result.data.parent_task);\n          allRelatedTasks.push(\n            TaskManagementAPI.get(parentTaskId)\n              .then((result) => {\n                parentTask = result.data;\n              })\n              .catch(() => {\n                return true;\n              }),\n          );\n        }\n        if (result.data.child_tasks.length) {\n          result.data.child_tasks.forEach((child) => {\n            const childTaskId = parsePulpIDFromURL(child);\n            allRelatedTasks.push(\n              TaskManagementAPI.get(childTaskId)\n                .then((result) => {\n                  childTasks.push(result.data);\n                })\n                .catch(() => {\n                  return true;\n                }),\n            );\n          });\n        }\n        if (result.data.reserved_resources_record.length) {\n          result.data.reserved_resources_record.forEach((resource) => {\n            const url = resource.replace(PULP_API_BASE_PATH, '');\n            const id = parsePulpIDFromURL(url);\n            const urlParts = url.split('/');\n            let resourceType = '';\n            let pluginName = '';\n\n            // pulp hrefs follow this pattern for resources added by plugins:\n            // /<resource name>/<plugin name>/<resource type>/<pk>/\n            // Locks can be added on the entire resource (ex /repositories/) or on a specific\n            // instance of a resource (ex /repositories/ansible/ansible/123123/\n\n            // if the url has 3 or more segements, parse out the resource, plugin name, and resource type\n            if (urlParts.length >= 3) {\n              resourceType = `${urlParts[0]}: ${urlParts[2]}`;\n              pluginName = urlParts[1];\n              // otherwise, just return the resource type\n            } else {\n              resource = urlParts[0];\n            }\n\n            if (id) {\n              allRelatedTasks.push(\n                GenericPulpAPI.get(url)\n                  .then((result) => {\n                    resources.push({\n                      name: result.data.name,\n                      type: resourceType,\n                      pluginName: pluginName,\n                    });\n                  })\n                  .catch(() => {\n                    return true;\n                  }),\n              );\n            } else {\n              resources.push({ type: resourceType });\n            }\n          });\n        }\n        return Promise.all(allRelatedTasks).then(() => {\n          this.setState({\n            task: result.data,\n            childTasks,\n            parentTask,\n            loading: false,\n            taskName: maybeTranslate(result.data.name),\n            resources,\n          });\n        });\n      })\n      .catch(() => {\n        this.setState({ redirect: formatPath(Paths.notFound) });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TaskDetail);\n"],"names":["maybeTranslate","name","Constants","i18n","TaskDetail","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","state","loading","task","parentTask","childTasks","alerts","cancelModalVisible","taskName","resources","redirect","polling","_createClass","key","value","this","loadContent","clearInterval","prevProps","routeParams","setState","_this2","_this$state","breadcrumbs","url","formatPath","Paths","parentTaskId","parsePulpIDFromURL","pulp_href","React","Navigate","to","LoadingPageSpinner","AlertList","closeAlert","i","renderCancelModal","BaseHeader","title","Breadcrumbs","links","pageControls","includes","Button","variant","onClick","status","StatusIndicator","className","Main","Flex","direction","default","flex","FlexItem","Title","headingLevel","size","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","DateComponent","date","finished_at","pulp_created","task_group","Link","length","map","childTask","childTaskId","resource","index","type","pluginName","error","progress_reports","reverse","report","Object","keys","message","code","done","capitalize","EmptyStateCustom","icon","CubesIcon","description","CodeBlock","traceback","_this3","ConfirmModal","cancelAction","confirmAction","cancelTask","confirmButtonTitle","_this4","_this$state2","TaskManagementAPI","then","concat","_toConsumableArray","Trans","id","values","e","_e$response","response","statusText","errorMessage","_this5","setInterval","taskId","result","allRelatedTasks","data","parent_task","push","child_tasks","forEach","child","reserved_resources_record","replace","PULP_API_BASE_PATH","urlParts","split","resourceType","GenericPulpAPI","Promise","all","get","closeAlertMixin","withRouter"],"sourceRoot":""}
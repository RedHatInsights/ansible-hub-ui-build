{"version":3,"file":"js/repository-list.1669600438278.06700c4d032fdb8d8d75.js","mappings":"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","sources":["webpack:///./src/containers/repositories/repository-list.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\n\nimport {\n  BaseHeader,\n  LoadingPageSpinner,\n  Main,\n  Tabs,\n  RemoteRepositoryTable,\n  LocalRepositoryTable,\n  RemoteForm,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n} from 'src/components';\nimport {\n  ParamHelper,\n  ErrorMessagesType,\n  mapErrorMessages,\n} from 'src/utilities';\nimport { Constants } from 'src/constants';\nimport {\n  RemoteAPI,\n  RemoteType,\n  DistributionAPI,\n  MyDistributionAPI,\n  DistributionType,\n} from 'src/api';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Button, ToolbarItem } from '@patternfly/react-core';\nimport { Paths } from 'src/paths';\n\nexport class Repository {\n  name: string;\n  url: string;\n  token: string;\n  ssoUrl: string;\n  yaml: string;\n  sync: boolean;\n}\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n    tab?: string;\n  };\n  itemCount: number;\n  loading: boolean;\n  showRemoteFormModal: boolean;\n  errorMessages: ErrorMessagesType; // RemoteForm modal messages\n  unauthorised: boolean;\n  content: RemoteType[] | DistributionType[];\n  remoteToEdit: RemoteType;\n}\n\nclass RepositoryList extends React.Component<RouteComponentProps, IState> {\n  nonQueryStringParams = ['repository'];\n  // Used to save a copy of the remote before it's edited. This can be used to determine\n  // which fields were changed when a user hits save.\n  unModifiedRemote: RemoteType;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['tab']) {\n      params['tab'] = 'local';\n    }\n\n    if (\n      !params['tab'] &&\n      DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE\n    ) {\n      params['tab'] = 'local';\n    }\n\n    this.state = {\n      itemCount: 1,\n      params: params,\n      loading: false,\n      showRemoteFormModal: false,\n      content: [],\n      remoteToEdit: undefined,\n      errorMessages: {},\n      unauthorised: false,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      this.setState({ unauthorised: true, loading: false });\n    } else {\n      this.loadContent();\n    }\n  }\n\n  render() {\n    const {\n      params,\n      loading,\n      content,\n      remoteToEdit,\n      showRemoteFormModal,\n      errorMessages,\n      unauthorised,\n    } = this.state;\n\n    const tabs = [\n      { id: 'local', name: t`Local` },\n      { id: 'remote', name: t`Remote` },\n    ];\n    return (\n      <React.Fragment>\n        {remoteToEdit && showRemoteFormModal && (\n          <RemoteForm\n            remote={remoteToEdit}\n            updateRemote={(r: RemoteType) => this.setState({ remoteToEdit: r })}\n            saveRemote={() => {\n              const { remoteToEdit } = this.state;\n\n              try {\n                const distro_path =\n                  remoteToEdit.repositories[0].distributions[0].base_path;\n\n                RemoteAPI.smartUpdate(\n                  distro_path,\n                  remoteToEdit,\n                  this.unModifiedRemote,\n                )\n                  .then(() => {\n                    this.setState(\n                      {\n                        errorMessages: {},\n                        showRemoteFormModal: false,\n                        remoteToEdit: undefined,\n                      },\n                      () => this.loadContent(),\n                    );\n                  })\n                  .catch((err) =>\n                    this.setState({ errorMessages: mapErrorMessages(err) }),\n                  );\n              } catch {\n                this.setState({\n                  errorMessages: {\n                    __nofield: t`Can't update remote without a distribution attached to it.`,\n                  },\n                });\n              }\n            }}\n            errorMessages={errorMessages}\n            showModal={showRemoteFormModal}\n            closeModal={() =>\n              this.setState({ showRemoteFormModal: false, errorMessages: {} })\n            }\n          />\n        )}\n        <BaseHeader\n          title={t`Repo Management`}\n          pageControls={this.renderControls()}\n        >\n          {DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE &&\n          !loading &&\n          !unauthorised ? (\n            <div className='header-bottom'>\n              <div className='hub-tab-link-container'>\n                <div className='tabs'>\n                  <Tabs\n                    tabs={tabs}\n                    params={params}\n                    updateParams={(p) => {\n                      // empty the content before updating the params to prevent\n                      // rendering from breaking when the wrong content is loaded\n                      this.setState({ content: [] }, () =>\n                        this.updateParams(p, () => this.loadContent()),\n                      );\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </BaseHeader>\n        {loading ? (\n          <LoadingPageSpinner />\n        ) : unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          this.renderContent(params, content)\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderContent(params, content) {\n    const { user } = this.context;\n    // Dont show remotes on insights\n    if (\n      DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE ||\n      (!!params.tab && params.tab.toLowerCase() === 'local')\n    ) {\n      return (\n        <Main className='repository-list'>\n          <section className='body'>\n            <LocalRepositoryTable\n              repositories={content}\n              updateParams={this.updateParams}\n            />\n          </section>\n        </Main>\n      );\n    }\n    if (!!params.tab && params.tab.toLowerCase() === 'remote') {\n      return content.length === 0 ? (\n        <EmptyStateNoData\n          title={t`No remote repositories yet`}\n          description={t`Remote repositories will appear once added`}\n        />\n      ) : (\n        <Main className='repository-list'>\n          <section className='body'>\n            <RemoteRepositoryTable\n              remotes={content}\n              updateParams={this.updateParams}\n              editRemote={(remote: RemoteType) =>\n                this.selectRemoteToEdit(remote)\n              }\n              syncRemote={(distro) =>\n                RemoteAPI.sync(distro).then(() => this.loadContent())\n              }\n              user={user}\n              refreshRemotes={this.refreshContent}\n            />\n          </section>\n        </Main>\n      );\n    }\n  }\n\n  private selectRemoteToEdit = (remote: RemoteType) => {\n    // save a copy of the remote to diff against\n    this.unModifiedRemote = { ...remote };\n\n    this.setState({\n      // create a copy of the remote to pass to the edit form, so that the\n      // list of remotes doesn't get updated by accident.\n      remoteToEdit: { ...remote },\n      showRemoteFormModal: true,\n    });\n  };\n\n  private refreshContent = () => {\n    this.loadContent(false);\n  };\n\n  private loadContent = (showLoading = true) => {\n    const { params } = this.state;\n    this.setState({ loading: showLoading }, () => {\n      if (params['tab'] == 'remote') {\n        RemoteAPI.list(\n          ParamHelper.getReduced(params, this.nonQueryStringParams),\n        ).then((result) => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      } else {\n        let APIClass = DistributionAPI;\n\n        if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE) {\n          APIClass = MyDistributionAPI;\n        }\n\n        APIClass.list().then((result) => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      }\n    });\n  };\n\n  private renderControls() {\n    if (this.state.params.tab == 'local') {\n      return (\n        <ToolbarItem>\n          <Link to={Paths.token}>\n            <Button>{t`Get token`}</Button>\n          </Link>\n        </ToolbarItem>\n      );\n    }\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n}\n\nexport default withRouter(RepositoryList);\nRepositoryList.contextType = AppContext;\n"],"names":["Repository","RepositoryList","props","remote","unModifiedRemote","setState","remoteToEdit","showRemoteFormModal","loadContent","showLoading","params","state","loading","RemoteAPI","ParamHelper","nonQueryStringParams","then","result","content","data","itemCount","meta","count","APIClass","DistributionAPI","DEPLOYMENT_MODE","Constants","MyDistributionAPI","list","location","search","undefined","errorMessages","unauthorised","this","context","user","is_anonymous","tabs","id","name","updateRemote","r","saveRemote","distro_path","repositories","distributions","base_path","err","mapErrorMessages","__nofield","showModal","closeModal","title","pageControls","renderControls","className","updateParams","p","renderContent","tab","toLowerCase","length","description","remotes","editRemote","selectRemoteToEdit","syncRemote","distro","refreshRemotes","refreshContent","ToolbarItem","Link","to","Paths","Button","React","withRouter","contextType","AppContext"],"sourceRoot":""}
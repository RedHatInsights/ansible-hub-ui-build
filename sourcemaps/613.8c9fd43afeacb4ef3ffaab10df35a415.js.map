{"version":3,"file":"js/613.1674055719003.6fb64430918c63073ff7.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"sourcesContent":["import { i18n } from '@lingui/core';\nimport { t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  Pagination,\n  Sort,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps } from 'src/utilities';\nimport { errorMessage, filterIsSet } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n  inputText: string;\n}\n\ninterface IProps extends RouteProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n      inputText: params['keywords'] || '',\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: this.context.alerts || [] });\n    this.context.setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading, inputText } =\n      this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // Namespaces or Partners\n    const title = i18n._(namespaceBreadcrumb.name);\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceByRepo,\n                {\n                  repo: 'published',\n                  namespace: result.name,\n                },\n                { tab: 'owners' },\n              ),\n            })\n          }\n        ></NamespaceModal>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={title}>\n          {!this.context.user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs\n                  tabs={[\n                    {\n                      title: t`All`,\n                      link: formatPath(Paths[NAMESPACE_TERM]),\n                      active: !filterOwner,\n                    },\n                    {\n                      title: t`My namespaces`,\n                      link: formatPath(Paths.myNamespaces),\n                      active: filterOwner,\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n          {noData ? null : (\n            <div className='toolbar'>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarGroup style={{ marginLeft: 0 }}>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={inputText}\n                        onChange={(text) => this.setState({ inputText: text })}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                        params={params}\n                        filterConfig={[{ id: 'keywords', title: t`keywords` }]}\n                      />\n                      <AppliedFilters\n                        style={{ marginTop: '16px' }}\n                        updateParams={(p) => {\n                          this.updateParams(p, () => this.loadNamespaces());\n                          this.setState({ inputText: '' });\n                        }}\n                        params={params}\n                        ignoredParams={['page_size', 'page', 'sort']}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                  <ToolbarGroup style={{ alignSelf: 'start' }}>\n                    <ToolbarItem>\n                      <Sort\n                        options={[\n                          { title: t`Name`, id: 'name', type: 'alpha' },\n                        ]}\n                        params={params}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                      />\n                    </ToolbarItem>\n                    {hasPermission('galaxy.add_namespace') && (\n                      <ToolbarItem key='create-button'>\n                        <Button\n                          variant='primary'\n                          onClick={this.handleModalToggle}\n                        >\n                          {t`Create`}\n                        </Button>\n                      </ToolbarItem>\n                    )}\n                  </ToolbarGroup>\n                </ToolbarContent>\n              </Toolbar>\n              <div>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.loadNamespaces())\n                  }\n                  count={itemCount}\n                  isCompact\n                  perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        <section className='card-area'>{this.renderBody()}</section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={(p) =>\n                this.updateParams(p, () => this.loadNamespaces())\n              }\n              perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody() {\n    const { namespaces, loading } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner></LoadingPageSpinner>;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n                repo: this.context.selectedRepo,\n              })}\n              key={i}\n              {...ns}\n            ></NamespaceCard>\n          </div>\n        ))}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceList.contextType = AppContext;\n","import * as React from 'react';\nimport { Paths } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass Partners extends React.Component<RouteProps> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceByRepo}\n        filterOwner={false}\n      />\n    );\n  }\n}\n\nexport default withRouter(Partners);\n"],"names":["NamespaceList","props","setState","isModalOpen","params","ParamHelper","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","inputText","this","context","setAlerts","filterOwner","MyNamespaceAPI","then","results","data","meta","count","loadNamespaces","e","response","status","statusText","addAlert","variant","title","description","errorMessage","redirect","Navigate","to","noData","filterIsSet","length","i18n","namespaceBreadcrumb","className","isOpen","toggleModal","handleModalToggle","onCreateSuccess","result","formatPath","Paths","repo","namespace","name","tab","closeAlert","i","user","is_anonymous","tabs","link","active","Toolbar","ToolbarContent","ToolbarGroup","style","marginLeft","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","marginTop","ignoredParams","alignSelf","options","type","key","Button","onClick","isCompact","perPageOptions","Constants","renderBody","namespacePath","noDataTitle","noDataDescription","noDataButton","button","map","ns","namespaceURL","selectedRepo","api","NamespaceAPI","list","nonURLParams","alert","closeAlertMixin","React","contextType","AppContext","Partners","withRouter"],"sourceRoot":""}
{"version":3,"file":"js/namespace_detail.fd5368cc1835787c71ce.js","mappings":"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","sources":["webpack:///./src/containers/edit-namespace/edit-namespace.tsx","webpack:///./src/containers/namespace-detail/import-modal/import-modal.tsx","webpack:///./src/containers/namespace-detail/namespace-detail.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Section, Spinner } from '@redhat-cloud-services/frontend-components';\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\n\nimport {\n  PartnerHeader,\n  NamespaceForm,\n  ResourcesForm,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  Main,\n  EmptyStateUnauthorized,\n} from 'src/components';\nimport {\n  MyNamespaceAPI,\n  NamespaceType,\n  ActiveUserAPI,\n  NamespaceLinkType,\n} from 'src/api';\n\nimport { Form, ActionGroup, Button } from '@patternfly/react-core';\n\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { ParamHelper, mapErrorMessages } from 'src/utilities';\n\ninterface IState {\n  namespace: NamespaceType;\n  newLinkName: string;\n  newLinkURL: string;\n  errorMessages: any;\n  saving: boolean;\n  redirect: string;\n  unsavedData: boolean;\n  alerts: AlertType[];\n  params: {\n    tab?: string;\n  };\n  userId: string;\n  unauthorized: boolean;\n}\n\nclass EditNamespace extends React.Component<RouteComponentProps, IState> {\n  queryParams: URLSearchParams;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    if (!params['tab']) {\n      params['tab'] = 'edit details';\n    }\n\n    this.state = {\n      alerts: [],\n      namespace: null,\n      userId: '',\n      newLinkURL: '',\n      newLinkName: '',\n      errorMessages: {},\n      saving: false,\n      redirect: null,\n      unsavedData: false,\n      params: params,\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    ActiveUserAPI.getUser().then(result => {\n      this.setState({ userId: result.account_number }, () =>\n        this.loadNamespace(),\n      );\n    });\n  }\n\n  render() {\n    const {\n      namespace,\n      errorMessages,\n      saving,\n      redirect,\n      params,\n      userId,\n      unauthorized,\n    } = this.state;\n\n    if (!namespace) {\n      return null;\n    }\n\n    if (redirect) {\n      return <Redirect to={redirect} />;\n    }\n    return (\n      <React.Fragment>\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[\n            namespaceBreadcrumb,\n            {\n              name: namespace.name,\n              url: formatPath(Paths.myCollections, {\n                namespace: namespace.name,\n              }),\n            },\n            { name: 'Edit' },\n          ]}\n          tabs={['Edit details', 'Edit resources']}\n          params={params}\n          updateParams={p => this.updateParams(p)}\n        ></PartnerHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={i => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main>\n            <Section className='body'>\n              {params.tab.toLowerCase() === 'edit details' ? (\n                <NamespaceForm\n                  userId={userId}\n                  namespace={namespace}\n                  errorMessages={errorMessages}\n                  updateNamespace={namespace =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                />\n              ) : (\n                <ResourcesForm\n                  updateNamespace={namespace =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                  namespace={namespace}\n                />\n              )}\n              <Form>\n                <ActionGroup>\n                  <Button\n                    variant='primary'\n                    onClick={() => this.saveNamespace()}\n                  >\n                    Save\n                  </Button>\n                  <Button variant='secondary' onClick={() => this.cancel()}>\n                    Cancel\n                  </Button>\n\n                  {saving ? <Spinner></Spinner> : null}\n                </ActionGroup>\n                {this.state.unsavedData ? (\n                  <div style={{ color: 'red' }}>You have unsaved changes</div>\n                ) : null}\n              </Form>\n            </Section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private loadNamespace() {\n    MyNamespaceAPI.get(this.props.match.params['namespace'])\n      .then(response => {\n        // Add an empty link to the end of the links array to create an empty field\n        // on the link edit form for adding new links\n        const emptyLink: NamespaceLinkType = { name: '', url: '' };\n        response.data.links.push(emptyLink);\n        this.setState({ namespace: response.data });\n      })\n      .catch(response => {\n        this.setState({ unauthorized: true });\n      });\n  }\n\n  private saveNamespace() {\n    this.setState({ saving: true }, () => {\n      const namespace = { ...this.state.namespace };\n      const setLinks: NamespaceLinkType[] = [];\n\n      // remove any empty links from the list before saving\n      for (const link of namespace.links) {\n        if (link.url !== '' || link.name !== '') {\n          setLinks.push(link);\n        }\n      }\n\n      namespace.links = setLinks;\n\n      MyNamespaceAPI.update(this.state.namespace.name, namespace)\n        .then(result => {\n          this.setState({\n            namespace: result.data,\n            errorMessages: {},\n            saving: false,\n            unsavedData: false,\n            redirect: formatPath(Paths.myCollections, {\n              namespace: this.state.namespace.name,\n            }),\n          });\n        })\n        .catch(error => {\n          const result = error.response;\n          if (result.status === 400) {\n            this.setState({\n              errorMessages: mapErrorMessages(error),\n              saving: false,\n            });\n          } else if (result.status === 404) {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: `API Error: ${error.response.status}`,\n                description: `You don't have permissions to update this namespace.`,\n              }),\n              saving: false,\n            });\n          }\n        });\n    });\n  }\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private cancel() {\n    this.setState({\n      redirect: formatPath(Paths.myCollections, {\n        namespace: this.state.namespace.name,\n      }),\n    });\n  }\n}\n\nexport default withRouter(EditNamespace);\n","import * as React from 'react';\nimport './import-modal.scss';\nimport axios from 'axios';\n\nimport { Modal, Button } from '@patternfly/react-core';\nimport { FolderOpenIcon, SpinnerIcon } from '@patternfly/react-icons';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  CollectionUploadType,\n} from 'src/api';\n\nenum Status {\n  uploading = 'uploading',\n  waiting = 'waiting',\n}\n\ninterface IProps {\n  isOpen: boolean;\n  setOpen: (isOpen, warnings?) => void;\n  onUploadSuccess: (result) => void;\n\n  collection?: CollectionListType;\n  namespace: string;\n}\n\ninterface IState {\n  file?: File;\n  errors?: string;\n  uploadProgress: number;\n  uploadStatus: Status;\n}\n\nexport class ImportModal extends React.Component<IProps, IState> {\n  acceptedFileTypes = ['application/x-gzip', 'application/gzip'];\n  cancelToken: any;\n  COLLECTION_NAME_REGEX = /[0-9a-z_]+\\-[0-9a-z_]+\\-[0-9A-Za-z.+-]+/;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      file: undefined,\n      errors: '',\n      uploadProgress: 0,\n      uploadStatus: Status.waiting,\n    };\n  }\n  render() {\n    const { isOpen, collection } = this.props;\n\n    const { file, errors, uploadProgress, uploadStatus } = this.state;\n    return (\n      <Modal\n        variant='small'\n        title={\n          collection ? 'New version of ' + collection.name : 'New collection'\n        }\n        isOpen={isOpen}\n        onClose={() => this.handleClose()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => this.saveFile()}\n            isDisabled={!this.canUpload()}\n          >\n            Upload\n          </Button>,\n          <Button\n            key='cancel'\n            variant='secondary'\n            onClick={() => this.handleClose()}\n          >\n            Cancel\n          </Button>,\n        ]}\n      >\n        <div className='upload-collection'>\n          <form>\n            <input\n              disabled={uploadStatus !== Status.waiting}\n              className='upload-file'\n              type='file'\n              id='collection-widget'\n              onChange={e => this.handleFileUpload(e.target.files)}\n            />\n            <label className='upload-file-label' htmlFor='collection-widget'>\n              <div className='upload-box'>\n                <div className='upload-button'>{this.renderFileIcon()}</div>\n                <div className='upload-text'>\n                  {file != null ? file.name : 'Select file'}\n                  <div\n                    className='loading-bar'\n                    style={{\n                      width: uploadProgress * 100 + '%',\n                    }}\n                  />\n                </div>\n              </div>\n            </label>\n          </form>\n          {errors ? (\n            <span className='file-error-messages'>\n              <i className='pficon-error-circle-o' /> {errors}\n            </span>\n          ) : null}\n        </div>\n      </Modal>\n    );\n  }\n\n  private canUpload() {\n    if (this.state.errors) {\n      return false;\n    }\n\n    if (this.state.uploadStatus !== Status.waiting) {\n      return false;\n    }\n\n    if (!this.state.file) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private renderFileIcon() {\n    switch (this.state.uploadStatus) {\n      case Status.uploading:\n        return <SpinnerIcon className='fa-spin'></SpinnerIcon>;\n      default:\n        return <FolderOpenIcon></FolderOpenIcon>;\n    }\n  }\n\n  private handleFileUpload(files) {\n    // Selects the artifact that will be uploaded and performs some basic\n    // preliminary checks on it.\n    const newCollection = files[0];\n    const { collection } = this.props;\n\n    if (files.length > 1) {\n      this.setState({\n        errors: 'Please select no more than one file.',\n      });\n    } else if (!this.acceptedFileTypes.includes(newCollection.type)) {\n      this.setState({\n        errors: 'Invalid file format.',\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (!this.COLLECTION_NAME_REGEX.test(newCollection.name)) {\n      this.setState({\n        errors: `Invalid file name. Collections must be formatted as 'namespace-collection_name-1.0.0'`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (\n      collection &&\n      collection.name !== newCollection.name.split('-')[1]\n    ) {\n      this.setState({\n        errors: `The collection you have selected doesn't appear to match ${collection.name}`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (this.props.namespace != newCollection.name.split('-')[0]) {\n      this.setState({\n        errors: `The collection you have selected does not match this namespace.`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else {\n      this.setState({\n        errors: '',\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    }\n  }\n\n  saveFile() {\n    this.setState({ uploadStatus: Status.uploading });\n    const artifact = {\n      file: this.state.file,\n      sha256: '',\n    } as CollectionUploadType;\n\n    this.cancelToken = CollectionAPI.getCancelToken();\n\n    CollectionAPI.upload(\n      'inbound-' + this.props.namespace,\n      artifact,\n      e => {\n        this.setState({\n          uploadProgress: e.loaded / e.total,\n        });\n      },\n      this.cancelToken,\n    )\n      .then(response => {\n        this.props.onUploadSuccess(response);\n      })\n      .catch(errors => {\n        let errorMessage = '';\n\n        // If request was canceled by the user\n        if (!axios.isCancel(errors)) {\n          // Upload fails\n          if (errors.response.data.errors) {\n            const messages = [];\n            for (let err of errors.response.data.errors) {\n              messages.push(\n                err.detail ||\n                  err.title ||\n                  err.code ||\n                  'API error. Status code: ' + err.status,\n              );\n            }\n            errorMessage = messages.join(', ');\n          } else {\n            errorMessage = 'API error. Status code: ' + errors.response.status;\n          }\n        }\n\n        this.setState({\n          uploadStatus: Status.waiting,\n          errors: errorMessage,\n        });\n      })\n      .finally(_ => {\n        this.cancelToken = null;\n      });\n  }\n\n  handleClose() {\n    let msg = null;\n    if (this.cancelToken && this.state.uploadStatus === Status.uploading) {\n      msg = 'Collection upload canceled';\n      this.cancelToken.cancel(msg);\n    }\n\n    this.setState(\n      {\n        file: undefined,\n        errors: '',\n        uploadProgress: 0,\n        uploadStatus: Status.waiting,\n      },\n      () => this.props.setOpen(false, msg),\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {\n  withRouter,\n  RouteComponentProps,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport {\n  Button,\n  DropdownItem,\n  Alert,\n  AlertActionCloseButton,\n  ClipboardCopy,\n} from '@patternfly/react-core';\n\nimport * as ReactMarkdown from 'react-markdown';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  NamespaceAPI,\n  MyNamespaceAPI,\n  NamespaceType,\n} from 'src/api';\n\nimport {\n  CollectionList,\n  PartnerHeader,\n  StatefulDropdown,\n  LoadingPageWithHeader,\n  Main,\n  EmptyStateUnauthorized,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  RepoSelector,\n} from 'src/components';\n\nimport { ImportModal } from './import-modal/import-modal';\n\nimport { ParamHelper, getRepoUrl, filterIsSet } from 'src/utilities';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  collections: CollectionListType[];\n  namespace: NamespaceType;\n  params: {\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tab?: string;\n    keywords?: string;\n    namespace?: string;\n  };\n  redirect: string;\n  itemCount: number;\n  showImportModal: boolean;\n  warning: string;\n  updateCollection: CollectionListType;\n  showControls: boolean;\n}\n\ninterface IProps extends RouteComponentProps {\n  selectedRepo: string;\n}\n\nexport class NamespaceDetail extends React.Component<IProps, IState> {\n  nonAPIParams = ['tab'];\n\n  // namespace is a positional url argument, so don't include it in the\n  // query params\n  nonQueryStringParams = ['namespace'];\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    params['namespace'] = props.match.params['namespace'];\n\n    this.state = {\n      collections: [],\n      namespace: null,\n      params: params,\n      redirect: null,\n      itemCount: 0,\n      showImportModal: false,\n      warning: '',\n      updateCollection: null,\n      showControls: false, // becomes true when my-namespaces doesn't 404\n    };\n  }\n\n  componentDidMount() {\n    this.loadAll();\n  }\n\n  render() {\n    const {\n      collections,\n      namespace,\n      params,\n      redirect,\n      itemCount,\n      showImportModal,\n      warning,\n      updateCollection,\n    } = this.state;\n\n    if (redirect) {\n      return <Redirect to={redirect} />;\n    }\n\n    if (!namespace) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const tabs = ['Collections'];\n\n    if (this.state.showControls) {\n      tabs.push('CLI Configuration');\n    }\n    const tab = params['tab'] || 'collections';\n\n    if (namespace.resources) {\n      tabs.push('Resources');\n    }\n\n    const repositoryUrl = getRepoUrl('inbound-' + namespace.name);\n\n    const noData = itemCount === 0 && !filterIsSet(params, ['keywords']);\n\n    return (\n      <React.Fragment>\n        <ImportModal\n          isOpen={showImportModal}\n          onUploadSuccess={result =>\n            this.props.history.push(\n              formatPath(\n                Paths.myImports,\n                {},\n                {\n                  namespace: namespace.name,\n                },\n              ),\n            )\n          }\n          // onCancel\n          setOpen={(isOpen, warn) => this.toggleImportModal(isOpen, warn)}\n          collection={updateCollection}\n          namespace={namespace.name}\n        />\n        {warning ? (\n          <Alert\n            style={{\n              position: 'fixed',\n              right: '5px',\n              top: '80px',\n              zIndex: 300,\n            }}\n            variant='warning'\n            title={warning}\n            actionClose={\n              <AlertActionCloseButton\n                onClose={() => this.setState({ warning: '' })}\n              />\n            }\n          ></Alert>\n        ) : null}\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[namespaceBreadcrumb, { name: namespace.name }]}\n          tabs={tabs}\n          params={params}\n          updateParams={p => this.updateParams(p)}\n          pageControls={this.renderPageControls()}\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={this.props.match.path as any} // Paths.namespaceByRepo or Paths.myCollectionsByRepo\n              pathParams={{ namespace: namespace.name }}\n            />\n          }\n        ></PartnerHeader>\n        <Main>\n          {tab.toLowerCase() === 'collections' ? (\n            noData ? (\n              <EmptyStateNoData\n                title={'No collections yet'}\n                description={'Collections will appear once uploaded'}\n                button={\n                  this.state.showControls && (\n                    <Button\n                      onClick={() => this.setState({ showImportModal: true })}\n                    >\n                      Upload collection\n                    </Button>\n                  )\n                }\n              />\n            ) : (\n              <Section className='body'>\n                <CollectionList\n                  updateParams={params =>\n                    this.updateParams(params, () => this.loadCollections())\n                  }\n                  params={params}\n                  collections={collections}\n                  itemCount={itemCount}\n                  showControls={this.state.showControls}\n                  handleControlClick={(id, action) =>\n                    this.handleCollectionAction(id, action)\n                  }\n                  repo={this.context.selectedRepo}\n                />\n              </Section>\n            )\n          ) : null}\n          {tab.toLowerCase() === 'cli configuration' ? (\n            <Section className='body'>\n              <div>\n                <ClipboardCopy isReadOnly>{repositoryUrl}</ClipboardCopy>\n                <div>\n                  <b>Note:</b> Use this URL to configure ansible-galaxy to\n                  upload collections to this namespace. More information on\n                  ansible-galaxy configurations can be found{' '}\n                  <a\n                    href='https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#configuring-the-ansible-galaxy-client'\n                    target='_blank'\n                  >\n                    here\n                  </a>\n                  .\n                </div>\n              </div>\n            </Section>\n          ) : null}\n          {tab.toLowerCase() === 'resources'\n            ? this.renderResources(namespace)\n            : null}\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private handleCollectionAction(id, action) {\n    const collection = this.state.collections.find(x => x.id === id);\n\n    switch (action) {\n      case 'upload':\n        this.setState({\n          updateCollection: collection,\n          showImportModal: true,\n        });\n        break;\n      case 'deprecate':\n        CollectionAPI.setDeprecation(\n          collection,\n          !collection.deprecated,\n          this.context.selectedRepo,\n        )\n          .then(() => this.loadCollections())\n          .catch(error => {\n            this.setState({\n              warning: 'API Error: Failed to set deprecation.',\n            });\n          });\n        break;\n    }\n  }\n\n  private renderResources(namespace: NamespaceType) {\n    return (\n      <div className='pf-c-content preview'>\n        <ReactMarkdown source={namespace.resources} />\n      </div>\n    );\n  }\n\n  private loadCollections() {\n    CollectionAPI.list(\n      {\n        ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n      },\n      this.context.selectedRepo,\n    ).then(result => {\n      this.setState({\n        collections: result.data.data,\n        itemCount: result.data.meta.count,\n      });\n    });\n  }\n\n  private loadAll() {\n    Promise.all([\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n        },\n        this.context.selectedRepo,\n      ),\n      NamespaceAPI.get(this.props.match.params['namespace']),\n      MyNamespaceAPI.get(this.props.match.params['namespace']).catch(\n        // expecting 404 - it just means we can not edit the namespace (unless both NamespaceAPI and MyNamespaceAPI fail)\n        e =>\n          e.response && e.response.status === 404 ? null : Promise.reject(e),\n      ),\n    ])\n      .then(val => {\n        this.setState({\n          collections: val[0].data.data,\n          itemCount: val[0].data.meta.count,\n          namespace: val[1].data,\n          showControls: !!val[2],\n        });\n      })\n      .catch(response => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n\n  private renderPageControls() {\n    const { collections } = this.state;\n    if (!this.state.showControls) {\n      return <div style={{ display: 'flex', alignItems: 'center' }}></div>;\n    }\n    return (\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        {' '}\n        {collections.length !== 0 && (\n          <Button onClick={() => this.setState({ showImportModal: true })}>\n            Upload collection\n          </Button>\n        )}\n        <StatefulDropdown\n          items={[\n            <DropdownItem\n              key='1'\n              component={\n                <Link\n                  to={formatPath(Paths.editNamespace, {\n                    namespace: this.state.namespace.name,\n                  })}\n                >\n                  Edit namespace\n                </Link>\n              }\n            />,\n            <DropdownItem\n              key='2'\n              component={\n                <Link\n                  to={formatPath(\n                    Paths.myImports,\n                    {},\n                    {\n                      namespace: this.state.namespace.name,\n                    },\n                  )}\n                >\n                  Imports\n                </Link>\n              }\n            />,\n          ]}\n        />\n      </div>\n    );\n  }\n\n  private toggleImportModal(isOpen: boolean, warning?: string) {\n    const newState = { showImportModal: isOpen };\n    if (warning) {\n      newState['warning'] = warning;\n    }\n\n    if (!isOpen) {\n      newState['updateCollection'] = null;\n    }\n\n    this.setState(newState);\n  }\n}\n\nNamespaceDetail.contextType = AppContext;\n\nexport default withRouter(NamespaceDetail);\n"],"names":["EditNamespace","props","params","ParamHelper","location","search","state","alerts","namespace","userId","newLinkURL","newLinkName","errorMessages","saving","redirect","unsavedData","unauthorized","ActiveUserAPI","then","result","setState","account_number","loadNamespace","this","to","breadcrumbs","namespaceBreadcrumb","name","url","formatPath","Paths","tabs","updateParams","p","closeAlert","i","className","tab","toLowerCase","updateNamespace","variant","onClick","saveNamespace","cancel","style","color","MyNamespaceAPI","match","response","data","links","push","setLinks","link","error","status","mapErrorMessages","concat","title","description","closeAlertMixin","React","withRouter","Status","ImportModal","file","undefined","errors","uploadProgress","uploadStatus","waiting","isOpen","collection","Modal","onClose","handleClose","actions","Button","key","saveFile","isDisabled","canUpload","disabled","type","id","onChange","e","handleFileUpload","target","files","htmlFor","renderFileIcon","width","uploading","newCollection","length","acceptedFileTypes","includes","COLLECTION_NAME_REGEX","test","split","artifact","sha256","cancelToken","CollectionAPI","loaded","total","onUploadSuccess","errorMessage","axios","messages","err","detail","code","join","_","msg","setOpen","NamespaceDetail","collections","itemCount","showImportModal","warning","updateCollection","showControls","loadAll","resources","repositoryUrl","getRepoUrl","noData","filterIsSet","history","warn","toggleImportModal","Alert","position","right","top","zIndex","actionClose","AlertActionCloseButton","pageControls","renderPageControls","contextSelector","selectedRepo","context","path","pathParams","button","Section","loadCollections","handleControlClick","action","handleCollectionAction","repo","ClipboardCopy","isReadOnly","href","renderResources","find","x","deprecated","source","nonAPIParams","meta","count","Promise","all","NamespaceAPI","reject","val","nonQueryStringParams","display","alignItems","items","DropdownItem","component","newState","contextType","AppContext"],"sourceRoot":""}
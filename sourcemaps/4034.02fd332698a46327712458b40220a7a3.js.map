{"version":3,"file":"js/4034.c5d1ed608cdf05a0367d.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport { Button } from '@patternfly/react-core';\nimport React, { Component } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  HubListToolbar,\n  HubPagination,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  NamespaceNextPageCard,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext, IAppContextType } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n} from 'src/utilities';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n}\n\ninterface IProps extends RouteProps {\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends Component<IProps, IState> {\n  static contextType = AppContext;\n\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: (this.context as IAppContextType).alerts || [] });\n    (this.context as IAppContextType).setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading } = this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context as IAppContextType;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader />;\n    }\n\n    const updateParams = (p) =>\n      this.updateParams(p, () => this.loadNamespaces());\n\n    const filterConfig = [{ id: 'keywords', title: t`keywords` }];\n\n    const sortOptions = [\n      { title: t`Name`, id: 'name', type: 'alpha' as const },\n    ];\n\n    const buttons = [\n      hasPermission('galaxy.add_namespace') ? (\n        <Button variant='primary' onClick={this.handleModalToggle}>\n          {t`Create`}\n        </Button>\n      ) : null,\n    ];\n\n    const tabs = [\n      {\n        title: t`All`,\n        link: formatPath(Paths.namespaces),\n        active: !filterOwner,\n      },\n      {\n        title: t`My namespaces`,\n        link: formatPath(Paths.myNamespaces),\n        active: filterOwner,\n      },\n    ];\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceDetail,\n                {\n                  namespace: result.name,\n                },\n                { tab: 'collections' },\n              ),\n            })\n          }\n        />\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={IS_INSIGHTS ? t`Partners` : t`Namespaces`}>\n          {!(this.context as IAppContextType).user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs tabs={tabs} />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        {noData ? null : (\n          <HubListToolbar\n            buttons={buttons}\n            count={itemCount}\n            filterConfig={filterConfig}\n            ignoredParams={['page', 'page_size', 'sort']}\n            params={params}\n            sortOptions={sortOptions}\n            updateParams={updateParams}\n          />\n        )}\n        <section className='card-area'>\n          {this.renderBody({ updateParams })}\n        </section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <HubPagination\n              params={params}\n              updateParams={updateParams}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody({ updateParams }) {\n    const { itemCount, loading, namespaces, params } = this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context as IAppContextType;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner />;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='hub-card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard showDetailLink key={i} namespace={ns} />\n          </div>\n        ))}\n        {itemCount > params.page_size * (params.page ?? 1) ? (\n          <div className='card-wrapper'>\n            <NamespaceNextPageCard\n              onClick={() =>\n                updateParams({ ...params, page: (params.page ?? 1) + 1 })\n              }\n            />\n          </div>\n        ) : null}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n","import React, { Component } from 'react';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass Partners extends Component<RouteProps> {\n  render() {\n    return <NamespaceList {...this.props} />;\n  }\n}\n\nexport default withRouter(Partners);\n"],"names":["NamespaceList","_Component","props","_this","_classCallCheck","_callSuper","_defineProperty","_assertThisInitialized","setState","_ref","isModalOpen","params","ParamHelper","parseParamString","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","_inherits","_createClass","key","value","_this2","this","context","setAlerts","filterOwner","MyNamespaceAPI","list","then","results","data","meta","count","loadNamespaces","e","_e$response","response","status","statusText","addAlert","variant","title","i18n","_","id","description","errorMessage","_this3","redirect","React","Navigate","to","_this$state","noData","filterIsSet","length","LoadingPageWithHeader","updateParams","p","filterConfig","sortOptions","type","buttons","Button","onClick","handleModalToggle","tabs","link","formatPath","Paths","active","myNamespaces","className","NamespaceModal","isOpen","toggleModal","onCreateSuccess","result","namespaceDetail","namespace","name","tab","AlertList","closeAlert","i","BaseHeader","user","is_anonymous","LinkTabs","HubListToolbar","ignoredParams","renderBody","HubPagination","_ref3","_params$page","_this4","_this$state2","noDataTitle","noDataDescription","noDataButton","LoadingPageSpinner","EmptyStateFilter","EmptyStateNoData","button","map","ns","NamespaceCard","showDetailLink","page_size","page","NamespaceNextPageCard","_params$page2","_objectSpread","_this5","api","NamespaceAPI","_e$response2","get","updateParamsMixin","nonURLParams","alert","concat","_toConsumableArray","closeAlertMixin","Component","AppContext","Partners","arguments","withRouter"],"sourceRoot":""}
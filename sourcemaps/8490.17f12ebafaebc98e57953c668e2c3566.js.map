{"version":3,"file":"js/8490.181bd2486f8d602a753f.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-distributions.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collectionsCount?: number;\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\n// Caches the collection data when matching, prevents redundant fetches between collection detail tabs\nconst cache = {\n  repository: null,\n  namespace: null,\n  name: null,\n  version: null,\n\n  collections: [],\n  collectionsCount: 0,\n  collection: null,\n  content: null,\n};\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  // try loading from cache\n  if (\n    !forceReload &&\n    cache.repository === repo &&\n    cache.namespace === namespace &&\n    cache.name === name &&\n    cache.version === version\n  ) {\n    setCollection(\n      cache.collections,\n      cache.collection,\n      cache.content,\n      cache.collectionsCount,\n    );\n    return;\n  }\n\n  const requestParams = {\n    ...(repo ? { repository_name: repo } : {}),\n    namespace,\n    name,\n  };\n\n  const currentVersion = (\n    version\n      ? CollectionVersionAPI.list({ ...requestParams, version })\n      : CollectionVersionAPI.list({ ...requestParams, is_highest: true })\n  ).then(({ data }) => data.data[0]);\n\n  const content = currentVersion\n    .then((collection) =>\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ),\n    )\n    .then(({ data: { results } }) => results[0])\n    .catch(() => navigate(formatPath(Paths.notFound)));\n\n  // Note: this only provides the first page - containing the latest version, and all items for the version *selector*,\n  // but the version *modal* is using a separate call, in CollectionHeader updatePaginationParams\n  const versions = CollectionVersionAPI.list({\n    ...requestParams,\n    order_by: '-version',\n    page_size: 10,\n  })\n    .then(({ data }) => data)\n    .catch(() => ({ data: [], meta: { count: 0 } }));\n\n  return Promise.all([versions, currentVersion, content]).then(\n    ([\n      {\n        data: collections,\n        meta: { count: collectionsCount },\n      },\n      collection,\n      content,\n    ]) => {\n      setCollection(collections, collection, content, collectionsCount);\n\n      cache.repository = repo;\n      cache.namespace = namespace;\n      cache.name = name;\n      cache.version = version;\n\n      cache.collections = collections;\n      cache.collectionsCount = collectionsCount;\n      cache.collection = collection;\n      cache.content = content;\n    },\n  );\n}\n","import { t } from '@lingui/macro';\nimport { Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport React, { useEffect, useState } from 'react';\nimport { AnsibleDistributionAPI } from 'src/api';\nimport {\n  AppliedFilters,\n  ClipboardCopy,\n  CollectionHeader,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Main,\n  Pagination,\n  SortTable,\n} from 'src/components';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  filterIsSet,\n  getRepoURL,\n  withRouter,\n} from 'src/utilities';\nimport { loadCollection } from './base';\n\nconst CollectionDistributions = (props: RouteProps) => {\n  const routeParams = ParamHelper.parseParamString(props.location.search);\n\n  const [collections, setCollections] = useState([]);\n  const [collectionsCount, setCollectionsCount] = useState(0);\n  const [collection, setCollection] = useState(null);\n  const [content, setContent] = useState(null);\n  const [inputText, setInputText] = useState('');\n\n  const [distributions, setDistributions] = useState(null);\n  const [count, setCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  const [params, setParams] = useState(\n    Object.keys(routeParams).length\n      ? routeParams\n      : {\n          sort: '-pulp_created',\n        },\n  );\n  const loadCollections = (forceReload) => {\n    loadCollection({\n      forceReload,\n      matchParams: props.routeParams,\n      navigate: props.navigate,\n      setCollection: (collections, collection, content, collectionsCount) => {\n        setCollections(collections);\n        setCollectionsCount(collectionsCount);\n        setCollection(collection);\n        setContent(content);\n\n        loadDistributions(collection.repository.pulp_href);\n      },\n      stateParams: params,\n    });\n  };\n\n  const loadDistributions = async (repositoryHref: string) => {\n    setLoading(true);\n    const distroList = await AnsibleDistributionAPI.list({\n      repository: repositoryHref,\n      ...ParamHelper.getReduced(params, ['version']),\n    });\n\n    setDistributions(distroList.data.results);\n    setCount(distroList.data.count);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    loadCollections(false);\n  }, []);\n\n  useEffect(() => {\n    loadCollections(false);\n  }, [params]);\n\n  if (!collection || !content || collections.length <= 0) {\n    return <LoadingPageWithHeader />;\n  }\n\n  const { collection_version, repository } = collection;\n\n  const breadcrumbs = [\n    namespaceBreadcrumb(),\n    {\n      url: formatPath(Paths.namespaceDetail, {\n        namespace: collection_version.namespace,\n      }),\n      name: collection_version.namespace,\n    },\n    {\n      url: formatPath(Paths.collectionByRepo, {\n        namespace: collection_version.namespace,\n        collection: collection_version.name,\n        repo: repository.name,\n      }),\n      name: collection_version.name,\n    },\n    { name: t`Distributions` },\n  ];\n\n  const cliConfig = (distribution) =>\n    [\n      '[galaxy]',\n      `server_list = ${distribution.base_path}`,\n      '',\n      `[galaxy_server.${distribution.base_path}]`,\n      `url=${getRepoURL(distribution.base_path)}`,\n      'token=<put your token here>',\n    ].join('\\n');\n\n  const updateParamsMixin = (params) => {\n    props.navigate({\n      search: '?' + ParamHelper.getQueryString(params || []),\n    });\n\n    setParams(params);\n  };\n\n  const renderTable = (distributions, params) => {\n    if (distributions.length === 0) {\n      return filterIsSet(params, [\n        'name__icontains',\n        'base_path__icontains',\n      ]) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No distributions yet`}\n          description={t`Collection doesn't have any distribution assigned.`}\n        />\n      );\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Base path`,\n          type: 'alpha',\n          id: 'base_path',\n        },\n        {\n          title: t`Created`,\n          type: 'alpha',\n          id: 'pulp_created',\n        },\n        {\n          title: t`CLI configuration`,\n          type: 'none',\n          id: '',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection distributions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(params) => {\n            updateParamsMixin(params);\n          }}\n        />\n        <tbody>\n          {distributions.map((distribution, i) => (\n            <tr key={i}>\n              <td>{distribution.name}</td>\n              <td>{distribution.base_path}</td>\n              <td>\n                <DateComponent date={distribution.pulp_created} />\n              </td>\n              <td>\n                <ClipboardCopy isCode isReadOnly variant={'expansion'} key={i}>\n                  {cliConfig(distribution)}\n                </ClipboardCopy>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <CollectionHeader\n        reload={() => loadCollections(true)}\n        collections={collections}\n        collectionsCount={collectionsCount}\n        collection={collection}\n        content={content}\n        params={params}\n        updateParams={(params) => {\n          updateParamsMixin(\n            ParamHelper.setParam(params, 'version', params.version),\n          );\n        }}\n        breadcrumbs={breadcrumbs}\n        activeTab='distributions'\n      />\n      <Main>\n        <section className='body'>\n          <div className='toolbar hub-toolbar'>\n            <Toolbar>\n              <ToolbarGroup>\n                <ToolbarItem>\n                  <CompoundFilter\n                    inputText={inputText}\n                    onChange={(text) => {\n                      setInputText(text);\n                    }}\n                    updateParams={(p) => {\n                      updateParamsMixin(p);\n                    }}\n                    params={params}\n                    filterConfig={[\n                      {\n                        id: 'name__icontains',\n                        title: t`Name`,\n                      },\n                      {\n                        id: 'base_path__icontains',\n                        title: t`Base path`,\n                      },\n                    ]}\n                  />\n                </ToolbarItem>\n              </ToolbarGroup>\n            </Toolbar>\n\n            <Pagination\n              params={params}\n              updateParams={(p) => {\n                updateParamsMixin(p);\n              }}\n              count={count}\n              isTop\n            />\n          </div>\n\n          <AppliedFilters\n            updateParams={(p) => {\n              updateParamsMixin(p);\n              setInputText('');\n            }}\n            params={params}\n            ignoredParams={['page_size', 'page', 'sort', 'version']}\n            niceNames={{\n              base_path__icontains: t`Base path`,\n              name__icontains: t`Name`,\n            }}\n          />\n          {loading ? (\n            <LoadingPageSpinner />\n          ) : (\n            renderTable(distributions, params)\n          )}\n          <Pagination\n            params={params}\n            updateParams={(p) => {\n              updateParamsMixin(p);\n            }}\n            count={count}\n          />\n        </section>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(CollectionDistributions);\n"],"names":["cache","repository","namespace","name","version","collections","collectionsCount","collection","content","loadCollection","_ref","forceReload","matchParams","navigate","setCollection","stateParams","repo","requestParams","_objectSpread","repository_name","currentVersion","CollectionVersionAPI","list","is_highest","then","_ref2","data","CollectionAPI","getContent","collection_version","_ref3","results","formatPath","Paths","notFound","versions","order_by","page_size","_ref4","meta","count","Promise","all","_ref5","_ref6","_slicedToArray","_ref6$","withRouter","props","routeParams","ParamHelper","parseParamString","location","search","_useState","useState","_useState2","setCollections","_useState3","_useState4","setCollectionsCount","_useState5","_useState6","_useState7","_useState8","setContent","_useState9","_useState10","inputText","setInputText","_useState11","_useState12","distributions","setDistributions","_useState13","_useState14","setCount","_useState15","_useState16","loading","setLoading","_useState17","Object","keys","length","sort","_useState18","params","setParams","loadCollections","loadDistributions","pulp_href","_asyncToGenerator","_regeneratorRuntime","_callee","repositoryHref","distroList","_context","prev","next","AnsibleDistributionAPI","getReduced","sent","stop","_x","apply","arguments","useEffect","React","LoadingPageWithHeader","breadcrumbs","namespaceBreadcrumb","url","namespaceDetail","collectionByRepo","i18n","_","id","updateParamsMixin","getQueryString","CollectionHeader","reload","updateParams","setParam","activeTab","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","p","filterConfig","title","Pagination","isTop","AppliedFilters","ignoredParams","niceNames","base_path__icontains","name__icontains","LoadingPageSpinner","filterIsSet","EmptyStateFilter","EmptyStateNoData","description","sortTableOptions","headers","type","SortTable","options","map","distribution","i","key","base_path","DateComponent","date","pulp_created","ClipboardCopy","isCode","isReadOnly","variant","concat","getRepoURL","join","cliConfig","renderTable"],"sourceRoot":""}
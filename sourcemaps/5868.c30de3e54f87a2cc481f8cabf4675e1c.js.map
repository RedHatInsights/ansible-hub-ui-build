{"version":3,"file":"js/5868.f03490d1f06cbc30dcee.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  LabelGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n  Repositories,\n} from 'src/api';\nimport { Repository } from 'src/api/response-types/repositories';\nimport {\n  ApproveModal,\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RepositoriesUtils,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n    status?: string;\n    sort?: string;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersionSearch[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersionSearch[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersionSearch;\n  approveModalInfo: {\n    collectionVersion;\n  };\n  approvedRepositoryList: Repository[];\n  stagingRepoNames: string[];\n  rejectedRepoName: string;\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['status']) {\n      params['status'] = Constants.NEEDSREVIEW;\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      approvedRepositoryList: [],\n      rejectedRepoName: null,\n      stagingRepoNames: [],\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      const promises = [];\n\n      promises.push(this.loadRepos('staging'));\n      promises.push(this.loadRepos('rejected'));\n\n      promises.push(\n        RepositoriesUtils.listApproved()\n          .then((data) => {\n            this.setState({ approvedRepositoryList: data });\n          })\n          .catch(({ response: { status, statusText } }) => {\n            this.addAlertObj({\n              title: t`Failed to load repositories.`,\n              variant: 'danger',\n              description: errorMessage(status, statusText),\n            });\n          }),\n      );\n\n      promises.push(this.queryCollections(false));\n\n      Promise.all(promises).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  private loadRepos(pipeline) {\n    return Repositories.list({ pulp_label_select: `pipeline=${pipeline}` })\n      .then((data) => {\n        if (data.data.results.length > 0) {\n          if (pipeline == 'staging') {\n            this.setState({\n              stagingRepoNames: data.data.results.map((res) => res.name),\n            });\n          }\n\n          if (pipeline == 'rejected') {\n            this.setState({ rejectedRepoName: data.data.results[0].name });\n          }\n        }\n      })\n      .catch((error) => {\n        this.addAlert(\n          t`Error loading repository with label ${pipeline}.`,\n          'danger',\n          error?.message,\n        );\n      });\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader />;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () =>\n                            this.queryCollections(true),\n                          )\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'status',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.APPROVED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    status: {\n                      [Constants.APPROVED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    status: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={\n                  this.state.approveModalInfo.collectionVersion\n                }\n                addAlert={(alert) => this.addAlertObj(alert)}\n                allRepositories={this.state.approvedRepositoryList}\n                stagingRepoNames={this.state.stagingRepoNames}\n                rejectedRepoName={this.state.rejectedRepoName}\n              />\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'status']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repository`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private isVersionUpdating(collection: CollectionVersionSearch) {\n    return this.state.updatingVersions.find((v) => {\n      return v == collection;\n    });\n  }\n\n  private renderStatus(collectionData: CollectionVersionSearch) {\n    const { repository } = collectionData;\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isVersionUpdating(collectionData)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n\n    if (this.isApproved(collectionData)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && collectionData.is_signed\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {!collectionData.is_signed &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(collectionData: CollectionVersionSearch, index) {\n    const { collection_version: version, repository } = collectionData;\n    const data_cy = `CertificationDashboard-row-${collectionData.repository.name}-${collectionData.collection_version.namespace}-${collectionData.collection_version.name}`;\n    return (\n      <tr key={index} data-cy={data_cy}>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: repository.name,\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(\n                repository,\n                version.namespace,\n                version.name,\n                version.version,\n              );\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.pulp_created} />\n        </td>\n        <td>\n          <LabelGroup>{repository.name}</LabelGroup>\n        </td>\n        <td>{this.renderStatus(collectionData)}</td>\n        {this.renderButtons(collectionData)}\n      </tr>\n    );\n  }\n\n  private renderButtons(collectionData: CollectionVersionSearch) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const { collection_version: version, repository } = collectionData;\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.isVersionUpdating(collectionData)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && !collectionData.is_signed;\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button\n            onClick={() => this.openUploadCertificateModal(collectionData)}\n          >\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() => {\n          this.approve(collectionData);\n        }}\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => this.approve(collectionData)}\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => {\n          this.reject(collectionData);\n        }}\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isApproved(collectionData)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true),\n            rejectDropDown(false),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      // render reject button if version is in multiple repositories including rejected state - handles inconsistency\n      // and allows user to reject it again to move it all to rejected state\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false),\n            rejectDropDown(true),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      return (\n        <ListItemActions\n          kebabItems={[rejectDropDown(false), importsLink]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersionSearch) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const { collection_version, repository } =\n      this.state.versionToUploadCertificate;\n    const signed_collection = collection_version.pulp_href;\n    const { name, namespace, version } = collection_version;\n    CertificateUploadAPI.upload({\n      file,\n      repository: repository.pulp_href,\n      signed_collection,\n    })\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${namespace} ${name} v${version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${namespace} ${name} v${version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private isApproved(collection: CollectionVersionSearch) {\n    if (!collection) {\n      return false;\n    }\n\n    return this.state.approvedRepositoryList.find(\n      (r) => r.name == collection.repository.name,\n    );\n  }\n\n  private approve(collection) {\n    if (!collection) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Approval failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    const { approvedRepositoryList } = this.state;\n\n    if (approvedRepositoryList.length == 1) {\n      if (collection.repository) {\n        this.updateCertification(\n          collection.collection_version,\n          collection.repository.name,\n          this.state.approvedRepositoryList[0].name,\n        );\n      } else {\n        // I hope that this may not occure ever, but to be sure...\n        this.addAlert(\n          t`Approval failed.`,\n          'danger',\n          t`Collection has to be in rejected or staging repository.`,\n        );\n      }\n    } else {\n      this.transformToCollectionVersion(collection).then(\n        (collectionVersion) => {\n          this.setState({ approveModalInfo: { collectionVersion } });\n        },\n      );\n    }\n  }\n\n  private reject(collection) {\n    const originalRepo = collection.repository.name;\n    const version = collection.collection_version;\n\n    this.transformToCollectionVersion(collection)\n      .then((versionWithRepos) => {\n        this.setState({ updatingVersions: [collection] });\n        if (\n          versionWithRepos.repository_list.includes(this.state.rejectedRepoName)\n        ) {\n          // collection already in rejected repository, so remove it from aproved repo\n\n          RepositoriesUtils.deleteCollection(originalRepo, version.pulp_href)\n            .then(() => {\n              this.addAlert(\n                t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n                'success',\n              );\n              this.queryCollections(true);\n            })\n            .catch((error) => {\n              this.setState({ updatingVersions: [] });\n              const description = !error.response\n                ? error\n                : errorMessage(\n                    error.response.status,\n                    error.response.statusText,\n                  );\n\n              this.addAlert(\n                t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                'danger',\n                description,\n              );\n            });\n        } else {\n          // collection is not in rejected state, move it there\n          this.updateCertification(\n            version,\n            originalRepo,\n            this.state.rejectedRepoName,\n          );\n        }\n      })\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    // galaxy_ng CollectionRepositoryMixing.get_repos uses the distribution base path to look up repository pk\n    // there ..may be room for simplification since we already know the repo; OTOH also compatibility concerns\n    return Promise.all([\n      RepositoriesUtils.distributionByRepoName(originalRepo),\n      RepositoriesUtils.distributionByRepoName(destinationRepo),\n    ])\n      .then(([source, destination]) =>\n        CollectionVersionAPI.move(\n          version.namespace,\n          version.name,\n          version.version,\n          source.base_path,\n          destination.base_path,\n        ),\n      )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    const { status, sort, ...params } = this.state.params;\n\n    const updatedParams = {\n      order_by: sort,\n      ...params,\n    };\n\n    if (status) {\n      updatedParams['repository_label'] = `pipeline=${status}`;\n    }\n\n    return CollectionVersionAPI.list(updatedParams)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private download(\n    repository: CollectionVersionSearch['repository'],\n    namespace: string,\n    name: string,\n    version: string,\n  ) {\n    CollectionAPI.getDownloadURL(repository, namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n\n  // compose from collectionVersionSearch to CollectionVersion structure for approval modal\n  async transformToCollectionVersion(collection: CollectionVersionSearch) {\n    const repoList = await RepositoriesUtils.getCollectionRepoList(collection);\n\n    const { collection_version } = collection;\n    const id = parsePulpIDFromURL(collection_version.pulp_href);\n    const collectionVersion = {\n      id,\n      version: collection_version.version,\n      namespace: collection_version.namespace,\n      name: collection_version.name,\n      repository_list: repoList,\n    };\n\n    return collectionVersion;\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_transformToCollectionVersion","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","Constants","NEEDSREVIEW","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","approvedRepositoryList","rejectedRepoName","stagingRepoNames","_createClass","key","value","_this2","_this$context","this","context","user","hasPermission","is_anonymous","setState","promises","push","loadRepos","RepositoriesUtils","listApproved","then","data","_ref","_ref$response","response","status","statusText","addAlertObj","title","i18n","_","id","variant","description","errorMessage","queryCollections","Promise","all","pipeline","_this3","Repositories","list","pulp_label_select","concat","results","length","map","res","name","error","addAlert","values","message","_status","_this4","_this$state","React","BaseHeader","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","inputType","options","NOTCERTIFIED","APPROVED","Pagination","count","isTop","AppliedFilters","ignoredParams","niceValues","_defineProperty","niceNames","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","alert","allRepositories","LoadingPageWithHeader","_this5","filterIsSet","EmptyStateFilter","EmptyStateNoData","sortTableOptions","headers","type","SortTable","version","renderRow","collection","find","v","collectionData","_repository$pulp_labe","repoStatus","repository","pulp_labels","isVersionUpdating","isApproved","display_signatures","featureFlags","Label","color","icon","CheckCircleIcon","is_signed","ExclamationCircleIcon","_this$context$feature","can_upload_signatures","require_upload_signatures","ExclamationTriangleIcon","index","_this6","collection_version","data_cy","namespace","Link","to","formatPath","Paths","collectionByRepo","repo","Button","ButtonVariant","link","onClick","download","DownloadIcon","DateComponent","date","pulp_created","LabelGroup","renderStatus","renderButtons","_repository$pulp_labe2","_this7","_this$context$feature2","collection_auto_sign","ListItemActions","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","approve","filter","Boolean","importsLink","DropdownItem","component","myImports","certifyDropDown","rejectDropDown","reject","kebabItems","buttons","file","_this8","_this$state$versionTo","signed_collection","pulp_href","CertificateUploadAPI","upload","result","waitForTask","parsePulpIDFromURL","task","r","_this9","updateCertification","transformToCollectionVersion","_this10","originalRepo","versionWithRepos","repository_list","includes","deleteCollection","destinationRepo","_this11","distributionByRepoName","_ref2","_ref3","_slicedToArray","source","destination","CollectionVersionAPI","move","base_path","remove_task_id","waitMs","handleLoading","_this12","_this$state$params","updatedParams","_objectSpread","order_by","sort","_objectWithoutProperties","_excluded","meta","CollectionAPI","getDownloadURL","downloadURL","window","assign","get","updateParamsMixin","closeAlertMixin","_toConsumableArray","_asyncToGenerator","_regeneratorRuntime","_callee","repoList","_context","prev","next","getCollectionRepoList","sent","abrupt","stop","_x","apply","arguments","withRouter","contextType","AppContext"],"sourceRoot":""}
{"version":3,"file":"js/2366.b3d37b5f215176575b08.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/my-namespaces.tsx","webpack:///./src/containers/namespace-list/namespace-list.tsx"],"sourcesContent":["import React from 'react';\nimport { EmptyStateUnauthorized } from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass MyNamespaces extends React.Component<RouteProps> {\n  render() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      return <EmptyStateUnauthorized />;\n    }\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceDetail}\n        filterOwner={true}\n      />\n    );\n  }\n}\n\nexport default withRouter(MyNamespaces);\nMyNamespaces.contextType = AppContext;\n","import { t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  Pagination,\n  Sort,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps } from 'src/utilities';\nimport { errorMessage, filterIsSet } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n  inputText: string;\n}\n\ninterface IProps extends RouteProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n      inputText: params['keywords'] || '',\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: this.context.alerts || [] });\n    this.context.setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading, inputText } =\n      this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader />;\n    }\n\n    // Namespaces or Partners\n    const title = namespaceBreadcrumb().name;\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceDetail,\n                {\n                  namespace: result.name,\n                },\n                { tab: 'collections' },\n              ),\n            })\n          }\n        />\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={title}>\n          {!this.context.user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs\n                  tabs={[\n                    {\n                      title: t`All`,\n                      link: formatPath(Paths[NAMESPACE_TERM]),\n                      active: !filterOwner,\n                    },\n                    {\n                      title: t`My namespaces`,\n                      link: formatPath(Paths.myNamespaces),\n                      active: filterOwner,\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n          {noData ? null : (\n            <div className='toolbar'>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarGroup style={{ marginLeft: 0 }}>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={inputText}\n                        onChange={(text) => this.setState({ inputText: text })}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                        params={params}\n                        filterConfig={[{ id: 'keywords', title: t`keywords` }]}\n                      />\n                      <AppliedFilters\n                        style={{ marginTop: '16px' }}\n                        updateParams={(p) => {\n                          this.updateParams(p, () => this.loadNamespaces());\n                          this.setState({ inputText: '' });\n                        }}\n                        params={params}\n                        ignoredParams={['page_size', 'page', 'sort']}\n                        niceNames={{ keywords: t`keywords` }}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                  <ToolbarGroup style={{ alignSelf: 'start' }}>\n                    <ToolbarItem>\n                      <Sort\n                        options={[\n                          { title: t`Name`, id: 'name', type: 'alpha' },\n                        ]}\n                        params={params}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                      />\n                    </ToolbarItem>\n                    {hasPermission('galaxy.add_namespace') && (\n                      <ToolbarItem key='create-button'>\n                        <Button\n                          variant='primary'\n                          onClick={this.handleModalToggle}\n                        >\n                          {t`Create`}\n                        </Button>\n                      </ToolbarItem>\n                    )}\n                  </ToolbarGroup>\n                </ToolbarContent>\n              </Toolbar>\n              <div>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.loadNamespaces())\n                  }\n                  count={itemCount}\n                  isCompact\n                  perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        <section className='card-area'>{this.renderBody()}</section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={(p) =>\n                this.updateParams(p, () => this.loadNamespaces())\n              }\n              perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody() {\n    const { namespaces, loading } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner />;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n              })}\n              key={i}\n              {...ns}\n            />\n          </div>\n        ))}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceList.contextType = AppContext;\n"],"names":["MyNamespaces","_React$Component","_inherits","_super","_classCallCheck","apply","arguments","_createClass","key","value","this","context","user","is_anonymous","React","EmptyStateUnauthorized","NamespaceList","_extends","props","namespacePath","Paths","namespaceDetail","filterOwner","withRouter","contextType","AppContext","_this","call","_defineProperty","_assertThisInitialized","setState","_ref","isModalOpen","params","ParamHelper","parseParamString","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","inputText","_this2","setAlerts","MyNamespaceAPI","list","then","results","data","meta","count","loadNamespaces","e","_e$response","response","status","statusText","addAlert","variant","title","i18n","_","id","description","errorMessage","_this3","redirect","Navigate","to","_this$state","noData","filterIsSet","length","LoadingPageWithHeader","namespaceBreadcrumb","name","className","NamespaceModal","isOpen","toggleModal","handleModalToggle","onCreateSuccess","result","formatPath","namespace","tab","AlertList","closeAlert","i","BaseHeader","LinkTabs","tabs","link","active","myNamespaces","Toolbar","ToolbarContent","ToolbarGroup","style","marginLeft","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","AppliedFilters","marginTop","ignoredParams","niceNames","keywords","alignSelf","Sort","options","type","Button","onClick","Pagination","isCompact","perPageOptions","Constants","CARD_DEFAULT_PAGINATION_OPTIONS","renderBody","_this4","_this$state2","_this$props","noDataTitle","noDataDescription","noDataButton","LoadingPageSpinner","EmptyStateFilter","EmptyStateNoData","button","map","ns","NamespaceCard","namespaceURL","_this5","api","NamespaceAPI","_e$response2","get","updateParamsMixin","nonURLParams","alert","concat","_toConsumableArray","closeAlertMixin"],"sourceRoot":""}
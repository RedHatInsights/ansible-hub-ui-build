{"version":3,"file":"js/settings.1646615979683.0a49b8fe5cc9e84dbd2e.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/info-circle-icon.js","webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx","webpack:///./src/containers/token/token-insights.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const InfoCircleIconConfig = {\n  name: 'InfoCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const InfoCircleIcon = createIcon(InfoCircleIconConfig);\n\nexport default InfoCircleIcon;","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  Main,\n} from 'src/components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n} from '@patternfly/react-core';\n\nimport {\n  InfoCircleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n} from '@patternfly/react-icons';\n\nimport { CollectionVersionAPI, CollectionVersion, TaskAPI } from 'src/api';\nimport { errorMessage, filterIsSet, ParamHelper } from 'src/utilities';\nimport {\n  LoadingPageWithHeader,\n  StatefulDropdown,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n  inputText: string;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !this.context.user ||\n      this.context.user.is_anonymous ||\n      !this.context.user.model_permissions.move_collection\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-certification-dashboard-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections());\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <CheckCircleIcon\n            style={{ color: 'var(--pf-global--success-color--100)' }}\n          />{' '}\n          {t`Approved`}\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <ExclamationCircleIcon\n            style={{ color: 'var(--pf-global--danger-color--100)' }}\n          />{' '}\n          {t`Rejected`}\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <InfoCircleIcon\n            style={{ color: 'var(--pf-global--info-color--100)' }}\n          />{' '}\n          {t`Needs Review`}\n        </span>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        <td style={{ paddingRight: '0px', textAlign: 'right' }}>\n          {this.renderButtons(version)}\n        </td>\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return;\n    }\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(true, Constants.PUBLISHED),\n              rejectDropDown(false, Constants.PUBLISHED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(false, Constants.NOTCERTIFIED),\n              rejectDropDown(true, Constants.NOTCERTIFIED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <Button\n            onClick={() =>\n              this.updateCertification(\n                version,\n                Constants.NEEDSREVIEW,\n                Constants.PUBLISHED,\n              )\n            }\n          >\n            <span>{t`Approve`}</span>\n          </Button>\n          <StatefulDropdown\n            items={[rejectDropDown(false, Constants.NEEDSREVIEW), importsLink]}\n          />\n        </span>\n      );\n    }\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    const { alerts } = this.state;\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: [],\n      },\n      () =>\n        CollectionVersionAPI.setRepository(\n          version.namespace,\n          version.name,\n          version.version,\n          originalRepo,\n          destinationRepo,\n        )\n          .then(\n            (result) =>\n              // Since pulp doesn't reply with the new object, perform a\n              // second query to get the updated data\n              {\n                this.setState({\n                  updatingVersions: [version],\n                });\n                this.waitForUpdate(result.data.remove_task_id, version);\n              },\n            this.addAlert(\n              <Trans>\n                Certification status for collection &quot;{version.namespace}{' '}\n                {version.name} v{version.version}&quot; has been successfully\n                updated.\n              </Trans>,\n              'success',\n            ),\n          )\n          .catch((error) => {\n            const { status, statusText } = error.response;\n            this.setState({\n              updatingVersions: [],\n              alerts: alerts.concat({\n                variant: 'danger',\n                title: t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                description: errorMessage(status, statusText),\n              }),\n            });\n          }),\n    );\n  }\n\n  private waitForUpdate(result, version) {\n    const taskId = result;\n    return TaskAPI.get(taskId).then(async (result) => {\n      if (result.data.state === 'waiting' || result.data.state === 'running') {\n        await new Promise((r) => setTimeout(r, 500));\n        this.waitForUpdate(taskId, version);\n      } else if (result.data.state === 'completed') {\n        return CollectionVersionAPI.list(this.state.params).then(\n          async (result) => {\n            this.setState({\n              versions: result.data.data,\n              updatingVersions: [],\n            });\n          },\n        );\n      } else {\n        this.setState({\n          updatingVersions: [],\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n            description: errorMessage(500, t`Internal Server Error`),\n          }),\n        });\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        });\n      }),\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { ClipboardCopyVariant, Button } from '@patternfly/react-core';\n\nimport { Paths } from 'src/paths';\nimport {\n  BaseHeader,\n  Main,\n  ClipboardCopy,\n  AlertList,\n  AlertType,\n  closeAlertMixin,\n} from 'src/components';\nimport { errorMessage, getRepoUrl } from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\nimport { MyDistributionAPI } from 'src/api';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n  alerts: AlertType[];\n  repoUrl: string;\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n      alerts: [],\n      repoUrl: '',\n    };\n  }\n\n  private getMyDistributionPath() {\n    MyDistributionAPI.list()\n      .then(({ data }) => {\n        const syncDistro =\n          data.data.find(({ base_path }) => base_path.includes('synclist'))\n            ?.base_path || '';\n        this.setState({\n          repoUrl: syncDistro,\n        });\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          repoUrl: '',\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Server URL could not be displayed.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    window.insights.chrome.auth\n      .getOfflineToken()\n      .then((result) => {\n        this.setState({ tokenData: result.data });\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          tokenData: undefined,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Token could not be displayed.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n\n    this.getMyDistributionPath();\n  }\n\n  render() {\n    const { user } = this.context;\n    const { tokenData, alerts } = this.state;\n    const renewTokenCmd = `curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=\"${\n      user.username\n    }\" -d refresh_token=\"${\n      tokenData?.refresh_token ?? '{{ user_token }}'\n    }\" --fail --silent --show-error --output /dev/null`;\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <BaseHeader title={t`Connect to Hub`}></BaseHeader>\n        <Main>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect Private Automation Hub`}</h2>\n            <p>\n              <Trans>\n                Use the{' '}\n                <Link to={Paths.repositories}>Repository Management</Link> page\n                to sync collections curated by your organization to the Red Hat\n                Certified repository in your private Automation Hub. Users with\n                the correct permissions can use the sync toggles on the{' '}\n                <Link to={Paths.search}>Collections</Link> page to control which\n                collections are added to their organization&apos;s sync\n                repository.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect the ansible-galaxy client`}</h2>\n            <p>\n              <Trans>\n                Documentation on how to configure the{' '}\n                <code>ansible-galaxy</code> client can be found{' '}\n                <a\n                  href='https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/'\n                  target='_blank'\n                  rel='noreferrer'\n                >\n                  here\n                </a>\n                . Use the following parameters to configure the client.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Offline token`}</h2>\n            <p>\n              <Trans>\n                Use this token to authenticate clients that need to download\n                content from Automation Hub. This is a secret token used to\n                protect your content. Store your API token in a secure location.\n              </Trans>\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <div>\n                <Button\n                  onClick={() => this.loadToken()}\n                >{t`Load token`}</Button>\n              </div>\n            )}\n            <div\n              className='pf-c-content'\n              style={{ paddingTop: 'var(--pf-global--spacer--md)' }}\n            >\n              <span>\n                <Trans>\n                  The token will expire after 30 days of inactivity. Run the\n                  command below periodically to prevent your token from\n                  expiring.\n                </Trans>\n              </span>\n              <ClipboardCopy\n                isCode\n                isReadOnly\n                variant={ClipboardCopyVariant.expansion}\n              >\n                {renewTokenCmd}\n              </ClipboardCopy>\n            </div>\n            <h2>{t`Manage tokens`}</h2>\n            <Trans>\n              To revoke a token or see all of your tokens, visit the{' '}\n              <a\n                href='https://sso.redhat.com/auth/realms/redhat-external/account/applications'\n                target='_blank'\n                rel='noreferrer'\n              >\n                offline API token management\n              </a>{' '}\n              page.\n            </Trans>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Server URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the API endpoints that clients need to\n                download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              {getRepoUrl(this.state.repoUrl)}\n            </ClipboardCopy>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`SSO URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the authentication URLs that clients\n                need to download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n            </ClipboardCopy>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    // doOffline causes the page to refresh and will make the data\n    // available to getOfflineToken() when the component mounts after\n    // the reload\n    window.insights.chrome.auth.doOffline();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TokenPage);\nTokenPage.contextType = AppContext;\n"],"names":["InfoCircleIcon","name","height","width","svgPath","yOffset","xOffset","CertificationDashboard","props","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","this","context","user","is_anonymous","model_permissions","move_collection","queryCollections","setState","title","closeAlert","i","className","Toolbar","ToolbarGroup","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","inputType","options","Constants","count","isTop","ignoredParams","niceValues","repository","niceNames","renderTable","length","filterIsSet","description","sortTableOptions","headers","type","map","version","renderRow","includes","repository_list","style","color","index","key","namespace","Link","to","formatPath","Paths","collection","repo","date","created_at","renderStatus","paddingRight","textAlign","renderButtons","importsLink","DropdownItem","component","certifyDropDown","isDisabled","originalRepo","onClick","updateCertification","rejectDropDown","items","Button","destinationRepo","CollectionVersionAPI","then","result","waitForUpdate","data","remove_task_id","addAlert","error","response","status","statusText","concat","variant","errorMessage","taskId","TaskAPI","Promise","r","setTimeout","meta","closeAlertMixin","React","withRouter","contextType","AppContext","TokenPage","tokenData","repoUrl","MyDistributionAPI","syncDistro","find","base_path","e","window","insights","chrome","auth","getOfflineToken","getMyDistributionPath","renewTokenCmd","username","refresh_token","href","target","rel","loadToken","paddingTop","isCode","isReadOnly","ClipboardCopyVariant","getRepoUrl","doOffline"],"sourceRoot":""}
{"version":3,"file":"js/5868.7301eaebd394bab50177.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport {\n  AnsibleRepositoryAPI,\n  AnsibleRepositoryType,\n  CertificateUploadAPI,\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n} from 'src/api';\nimport {\n  ApprovalRow,\n  ApproveModal,\n  BaseHeader,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  repositoryBasePath,\n  waitForTask,\n  waitForTaskUrl,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n    repository_label?: string;\n    sort?: string;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersionSearch[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersionSearch[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersionSearch;\n  approveModalInfo?: CollectionVersionSearch;\n  repositories: {\n    approved?: AnsibleRepositoryType;\n    rejected?: AnsibleRepositoryType;\n  };\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository_label']) {\n      params['repository_label'] = 'pipeline=staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      repositories: { approved: null, rejected: null },\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      Promise.all([\n        this.queryCollections(false),\n        this.queryRepositories(),\n      ]).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  private queryRepositories() {\n    const repoOrNull = (pipeline) =>\n      AnsibleRepositoryAPI.list({\n        page: 1,\n        page_size: 1,\n        pulp_label_select: `pipeline=${pipeline}`,\n      })\n        .then(({ data: { count, results } }) =>\n          count === 1 ? results[0] : null,\n        )\n        .catch((error) => {\n          this.addAlert(\n            t`Error loading repository with label ${pipeline}.`,\n            'danger',\n            error?.message,\n          );\n          return null;\n        });\n\n    return Promise.all([repoOrNull('approved'), repoOrNull('rejected')]).then(\n      ([approved, rejected]) =>\n        this.setState({\n          repositories: { approved, rejected },\n        }),\n    );\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader />;\n    }\n\n    return (\n      <>\n        <BaseHeader title={t`Approval dashboard`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='hub-toolbar'>\n                <Toolbar>\n                  <ToolbarContent>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <CompoundFilter\n                          inputText={this.state.inputText}\n                          onChange={(text) => {\n                            this.setState({ inputText: text });\n                          }}\n                          updateParams={(p) =>\n                            this.updateParams(p, () =>\n                              this.queryCollections(true),\n                            )\n                          }\n                          params={params}\n                          filterConfig={[\n                            {\n                              id: 'namespace',\n                              title: t`Namespace`,\n                            },\n                            {\n                              id: 'name',\n                              title: t`Collection name`,\n                            },\n                            {\n                              id: 'repository_label',\n                              title: t`Status`,\n                              inputType: 'select',\n                              options: [\n                                {\n                                  id: 'pipeline=rejected',\n                                  title: t`Rejected`,\n                                },\n                                {\n                                  id: 'pipeline=staging',\n                                  title: t`Needs Review`,\n                                },\n                                {\n                                  id: 'pipeline=approved',\n                                  title: t`Approved`,\n                                },\n                              ],\n                            },\n                          ]}\n                        />\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository_label: {\n                      'pipeline=approved': t`Approved`,\n                      'pipeline=rejected': t`Rejected`,\n                      'pipeline=staging': t`Needs Review`,\n                    },\n                  }}\n                  niceNames={{\n                    name: t`Collection name`,\n                    namespace: t`Namespace`,\n                    repository_label: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={this.state.approveModalInfo}\n                addAlert={(alert) => this.addAlertObj(alert)}\n              />\n            )}\n          </Main>\n        )}\n      </>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository_label']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repository`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'repository_label',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => (\n            <ApprovalRow\n              approve={(v) => this.approve(v)}\n              collectionVersion={version}\n              context={this.context}\n              isVersionUpdating={(v) => this.isVersionUpdating(v)}\n              key={i}\n              openUploadCertificateModal={(v) =>\n                this.openUploadCertificateModal(v)\n              }\n              reject={(v) => this.reject(v)}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private isVersionUpdating(collection: CollectionVersionSearch) {\n    return !!this.state.updatingVersions.find((v) => {\n      return v == collection;\n    });\n  }\n\n  private openUploadCertificateModal(version: CollectionVersionSearch) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const { collection_version, repository } =\n      this.state.versionToUploadCertificate;\n    const signed_collection = collection_version.pulp_href;\n    const { name, namespace, version } = collection_version;\n\n    CertificateUploadAPI.upload({\n      file,\n      repository: repository.pulp_href,\n      signed_collection,\n    })\n      .then(({ data: { task } }) => waitForTask(task))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${namespace} ${name} v${version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${namespace} ${name} v${version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private setUpdatingVersion(collectionVersion) {\n    const { updatingVersions } = this.state;\n    this.setState({\n      updatingVersions: [...updatingVersions, collectionVersion],\n    });\n  }\n\n  private unsetUpdatingVersion(collectionVersion) {\n    const { updatingVersions } = this.state;\n    this.setState({\n      updatingVersions: updatingVersions.filter((v) => v !== collectionVersion),\n    });\n  }\n\n  private async approve(collection) {\n    const { repositories } = this.state;\n\n    if (repositories.approved) {\n      this.move(collection, repositories.approved);\n    } else {\n      this.setState({ approveModalInfo: collection });\n    }\n  }\n\n  private async reject(collection) {\n    const { repositories } = this.state;\n\n    if (!repositories.rejected) {\n      const version = collection.collection_version;\n      this.addAlert(\n        t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n        'danger',\n        t`There must be only one repository with pipeline=rejected.`,\n      );\n      return;\n    }\n\n    if (await this.isRejected(collection)) {\n      // collection already in rejected repository, so remove it from aproved repo\n      this.remove(collection);\n    } else {\n      // collection is not in rejected state, move it there\n      this.move(collection, repositories.rejected);\n    }\n  }\n\n  private move(collection, destinationRepo) {\n    const { collection_version: version, repository: originalRepo } =\n      collection;\n\n    this.setUpdatingVersion(collection);\n    return Promise.all([\n      repositoryBasePath(originalRepo.name, originalRepo.pulp_href),\n      repositoryBasePath(destinationRepo.name, destinationRepo.pulp_href),\n    ])\n      .then(([source, destination]) =>\n        CollectionVersionAPI.move(\n          version.namespace,\n          version.name,\n          version.version,\n          source,\n          destination,\n        ),\n      )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.unsetUpdatingVersion(collection));\n  }\n\n  private remove(collection) {\n    const { collection_version: version, repository } = collection;\n\n    this.setUpdatingVersion(collection);\n    return AnsibleRepositoryAPI.removeContent(\n      parsePulpIDFromURL(repository.pulp_href),\n      version.pulp_href,\n    )\n      .then(({ data: { task } }) => waitForTaskUrl(task))\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.unsetUpdatingVersion(collection));\n  }\n\n  // is collection *also* in the rejected repo (regardless of collection.repository)\n  // really a \"wouldRejectionFail\"\n  private async isRejected(collection) {\n    const { repositories } = this.state;\n    const { name, namespace, version } = collection.collection_version;\n\n    return CollectionVersionAPI.list({\n      name,\n      namespace,\n      page: 1,\n      page_size: 1,\n      repository: parsePulpIDFromURL(repositories.rejected.pulp_href),\n      version,\n    })\n      .then((result) => !!result.data.meta.count)\n      .catch(() => false);\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    const { sort, ...params } = this.state.params;\n    const updatedParams = {\n      order_by: sort,\n      ...params,\n    };\n\n    return CollectionVersionAPI.list(updatedParams)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_isRejected","_reject","_approve","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","repositories","approved","rejected","_createClass","key","value","_this2","_this$context","this","context","user","hasPermission","is_anonymous","setState","Promise","all","queryCollections","queryRepositories","then","_this3","repoOrNull","pipeline","AnsibleRepositoryAPI","list","page","page_size","pulp_label_select","concat","_ref","_ref$data","data","count","results","error","addAlert","i18n","_","id","values","message","_ref2","_ref3","_slicedToArray","_this4","_this$state","React","BaseHeader","title","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","inputType","options","Pagination","isTop","AppliedFilters","ignoredParams","niceValues","repository_label","niceNames","name","namespace","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","alert","addAlertObj","LoadingPageWithHeader","_this5","length","filterIsSet","EmptyStateFilter","EmptyStateNoData","description","sortTableOptions","headers","type","SortTable","map","version","ApprovalRow","approve","v","isVersionUpdating","openUploadCertificateModal","reject","collection","find","file","_this6","_this$state$versionTo","collection_version","repository","signed_collection","pulp_href","CertificateUploadAPI","upload","_ref4","task","waitForTask","response","errorMessage","status","statusText","_toConsumableArray","filter","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","move","stop","_x","apply","arguments","_callee2","_context2","abrupt","isRejected","sent","remove","_x2","destinationRepo","_this7","originalRepo","setUpdatingVersion","repositoryBasePath","_ref5","_ref6","source","destination","CollectionVersionAPI","result","remove_task_id","waitMs","unsetUpdatingVersion","_this8","removeContent","parsePulpIDFromURL","_ref7","waitForTaskUrl","_callee3","_collection$collectio","_context3","meta","_x3","handleLoading","_this9","_this$state$params","updatedParams","_objectSpread","order_by","sort","_objectWithoutProperties","_excluded","get","updateParamsMixin","closeAlertMixin","variant","withRouter","contextType","AppContext"],"sourceRoot":""}
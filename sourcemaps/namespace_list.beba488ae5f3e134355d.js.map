{"version":3,"file":"js/namespace_list.a698e04ec7ebc9d8509d.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/my-namespaces.tsx","webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"sourcesContent":["import * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceList } from './namespace-list';\nimport { Paths } from 'src/paths';\n\nclass MyNamespaces extends React.Component<RouteComponentProps, {}> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.myCollectionsByRepo}\n        filterOwner={true}\n      />\n    );\n  }\n}\n\nexport default withRouter(MyNamespaces);\n","import * as React from 'react';\nimport './namespace-list.scss';\n\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport {\n  BaseHeader,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  Pagination,\n  Toolbar,\n} from 'src/components';\nimport { Button, ToolbarItem } from '@patternfly/react-core';\nimport { NamespaceAPI, NamespaceListType, MyNamespaceAPI } from 'src/api';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { filterIsSet } from 'src/utilities';\n\ninterface IState {\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n}\n\ninterface IProps extends RouteComponentProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({}).then((results) => {\n        if (results.data.meta.count !== 0) {\n          this.loadNamespaces();\n        } else {\n          this.setState({\n            hasPermission: false,\n            namespaces: [],\n            loading: false,\n          });\n        }\n      });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    const { namespaces, params, itemCount } = this.state;\n    const { filterOwner } = this.props;\n    const { user } = this.context;\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (!namespaces) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    let extra = [];\n\n    if (user?.model_permissions?.add_namespace) {\n      extra.push(\n        <ToolbarItem key='create-button'>\n          <Button variant='primary' onClick={this.handleModalToggle}>\n            {_`Create`}\n          </Button>\n        </ToolbarItem>,\n      );\n    }\n\n    const title = namespaceBreadcrumb.name;\n    const search = filterOwner\n      ? _`Search my namespaces`\n      : _`Search all ` + title.toLowerCase();\n\n    return (\n      <div className='namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.props.history.push(\n              formatPath(Paths.myCollections, {\n                namespace: result['name'],\n              }),\n            )\n          }\n        ></NamespaceModal>\n        <BaseHeader title={title}>\n          <div className='tab-link-container'>\n            <div className='tabs'>\n              <LinkTabs\n                tabs={[\n                  {\n                    title: _`All`,\n                    link: Paths[NAMESPACE_TERM],\n                    active: !filterOwner,\n                  },\n                  {\n                    title: _`My namespaces`,\n                    link: Paths.myNamespaces,\n                    active: filterOwner,\n                  },\n                ]}\n              />\n            </div>\n          </div>\n          {noData ? null : (\n            <div className='toolbar'>\n              <Toolbar\n                params={params}\n                sortOptions={[{ title: _`Name`, id: 'name', type: 'alpha' }]}\n                searchPlaceholder={search}\n                updateParams={(p) =>\n                  this.updateParams(p, () => this.loadNamespaces())\n                }\n                extraInputs={extra}\n              />\n              <div>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.loadNamespaces())\n                  }\n                  count={itemCount}\n                  isCompact\n                  perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        <section className='card-area'>{this.renderBody()}</section>\n        {noData ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={(p) =>\n                this.updateParams(p, () => this.loadNamespaces())\n              }\n              perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody() {\n    const { namespaces, loading } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { user } = this.context;\n\n    const noDataTitle = _`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? _`Namespaces will appear once created`\n      : _`This account is not set up to manage any namespaces`;\n\n    const noDataButton = user?.model_permissions?.add_namespace ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {_`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner></LoadingPageSpinner>;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n                repo: this.context.selectedRepo,\n              })}\n              key={i}\n              {...ns}\n            ></NamespaceCard>\n          </div>\n        ))}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    let apiFunc: any;\n\n    if (this.props.filterOwner) {\n      apiFunc = (p) => MyNamespaceAPI.list(p);\n    } else {\n      apiFunc = (p) => NamespaceAPI.list(p);\n    }\n    this.setState({ loading: true }, () => {\n      apiFunc(this.state.params).then((results) => {\n        this.setState({\n          namespaces: results.data.data,\n          itemCount: results.data.meta.count,\n          loading: false,\n        });\n      });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n}\n\nNamespaceList.contextType = AppContext;\n","import * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceList } from './namespace-list';\nimport { Paths } from 'src/paths';\n\nclass Partners extends React.Component<RouteComponentProps, {}> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceByRepo}\n        filterOwner={false}\n      />\n    );\n  }\n}\n\nexport default withRouter(Partners);\n"],"names":["MyNamespaces","this","props","namespacePath","Paths","filterOwner","React","withRouter","NamespaceList","setState","isModalOpen","params","ParamHelper","location","search","state","namespaces","undefined","itemCount","hasPermission","loading","MyNamespaceAPI","then","results","data","meta","count","loadNamespaces","user","context","noData","filterIsSet","length","extra","model_permissions","add_namespace","push","key","variant","onClick","handleModalToggle","_","title","namespaceBreadcrumb","toLowerCase","className","isOpen","toggleModal","onCreateSuccess","result","history","formatPath","namespace","tabs","link","active","sortOptions","id","type","searchPlaceholder","updateParams","p","extraInputs","isCompact","perPageOptions","Constants","renderBody","noDataTitle","noDataDescription","noDataButton","description","button","map","ns","i","namespaceURL","name","repo","selectedRepo","apiFunc","NamespaceAPI","nonURLParams","contextType","AppContext","Partners"],"sourceRoot":""}
{"version":3,"file":"js/2366.b21c7fe1dc072fd8e68e.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/my-namespaces.tsx","webpack:///./src/containers/namespace-list/namespace-list.tsx"],"sourcesContent":["import * as React from 'react';\nimport { EmptyStateUnauthorized } from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass MyNamespaces extends React.Component<RouteProps> {\n  render() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      return <EmptyStateUnauthorized />;\n    }\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceDetail}\n        filterOwner={true}\n      />\n    );\n  }\n}\n\nexport default withRouter(MyNamespaces);\nMyNamespaces.contextType = AppContext;\n","import { i18n } from '@lingui/core';\nimport { t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  Pagination,\n  Sort,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps } from 'src/utilities';\nimport { errorMessage, filterIsSet } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n  inputText: string;\n}\n\ninterface IProps extends RouteProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n      inputText: params['keywords'] || '',\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: this.context.alerts || [] });\n    this.context.setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading, inputText } =\n      this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // Namespaces or Partners\n    const title = i18n._(namespaceBreadcrumb.name);\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceDetail,\n                {\n                  namespace: result.name,\n                },\n                { tab: 'collections' },\n              ),\n            })\n          }\n        ></NamespaceModal>\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={title}>\n          {!this.context.user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs\n                  tabs={[\n                    {\n                      title: t`All`,\n                      link: formatPath(Paths[NAMESPACE_TERM]),\n                      active: !filterOwner,\n                    },\n                    {\n                      title: t`My namespaces`,\n                      link: formatPath(Paths.myNamespaces),\n                      active: filterOwner,\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n          {noData ? null : (\n            <div className='toolbar'>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarGroup style={{ marginLeft: 0 }}>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={inputText}\n                        onChange={(text) => this.setState({ inputText: text })}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                        params={params}\n                        filterConfig={[{ id: 'keywords', title: t`keywords` }]}\n                      />\n                      <AppliedFilters\n                        style={{ marginTop: '16px' }}\n                        updateParams={(p) => {\n                          this.updateParams(p, () => this.loadNamespaces());\n                          this.setState({ inputText: '' });\n                        }}\n                        params={params}\n                        ignoredParams={['page_size', 'page', 'sort']}\n                        niceNames={{ keywords: t`keywords` }}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                  <ToolbarGroup style={{ alignSelf: 'start' }}>\n                    <ToolbarItem>\n                      <Sort\n                        options={[\n                          { title: t`Name`, id: 'name', type: 'alpha' },\n                        ]}\n                        params={params}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                      />\n                    </ToolbarItem>\n                    {hasPermission('galaxy.add_namespace') && (\n                      <ToolbarItem key='create-button'>\n                        <Button\n                          variant='primary'\n                          onClick={this.handleModalToggle}\n                        >\n                          {t`Create`}\n                        </Button>\n                      </ToolbarItem>\n                    )}\n                  </ToolbarGroup>\n                </ToolbarContent>\n              </Toolbar>\n              <div>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.loadNamespaces())\n                  }\n                  count={itemCount}\n                  isCompact\n                  perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        <section className='card-area'>{this.renderBody()}</section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={(p) =>\n                this.updateParams(p, () => this.loadNamespaces())\n              }\n              perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody() {\n    const { namespaces, loading } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner></LoadingPageSpinner>;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n              })}\n              key={i}\n              {...ns}\n            ></NamespaceCard>\n          </div>\n        ))}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceList.contextType = AppContext;\n"],"names":["MyNamespaces","_React$Component","_inherits","_super","_classCallCheck","apply","arguments","_createClass","key","value","this","context","user","is_anonymous","React","EmptyStateUnauthorized","NamespaceList","_extends","props","namespacePath","Paths","filterOwner","withRouter","contextType","AppContext","_this","call","_defineProperty","_assertThisInitialized","setState","_ref","isModalOpen","params","ParamHelper","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","inputText","_this2","setAlerts","MyNamespaceAPI","then","results","data","meta","count","loadNamespaces","e","_e$response","response","status","statusText","addAlert","variant","title","i18n","description","errorMessage","_this3","redirect","Navigate","to","_this$state","noData","filterIsSet","length","LoadingPageWithHeader","namespaceBreadcrumb","className","NamespaceModal","isOpen","toggleModal","handleModalToggle","onCreateSuccess","result","formatPath","namespace","name","tab","AlertList","closeAlert","i","BaseHeader","LinkTabs","tabs","link","active","Toolbar","ToolbarContent","ToolbarGroup","style","marginLeft","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","AppliedFilters","marginTop","ignoredParams","niceNames","keywords","alignSelf","Sort","options","type","Button","onClick","Pagination","isCompact","perPageOptions","Constants","renderBody","_this4","_this$state2","_this$props","noDataTitle","noDataDescription","noDataButton","LoadingPageSpinner","EmptyStateFilter","EmptyStateNoData","button","map","ns","NamespaceCard","namespaceURL","_this5","api","NamespaceAPI","list","_e$response2","get","nonURLParams","alert","concat","_toConsumableArray","closeAlertMixin"],"sourceRoot":""}
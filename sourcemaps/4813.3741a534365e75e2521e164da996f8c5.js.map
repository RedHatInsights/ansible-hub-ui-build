{"version":3,"file":"js/4813.a8481de9702bf08117aa.js","mappings":"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","sources":["webpack:///./src/containers/my-imports/my-imports.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n  ImportAPI,\n  ImportDetailType,\n  ImportListType,\n  PulpStatus,\n} from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  ImportConsole,\n  ImportList,\n  Main,\n  closeAlertMixin,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { ParamHelper, RouteProps, withRouter } from 'src/utilities';\n\ninterface IState {\n  alerts: AlertType[];\n  collection: CollectionVersionSearch;\n  followLogs: boolean;\n  importDetailError: string;\n  importList: ImportListType[];\n  loadingImportDetails: boolean;\n  loadingImports: boolean;\n  params: {\n    keyword?: string;\n    namespace?: string;\n    page?: number;\n    page_size?: number;\n  };\n  resultsCount: number;\n  selectedImport: ImportListType;\n  selectedImportDetails: ImportDetailType;\n}\n\nclass MyImports extends React.Component<RouteProps, IState> {\n  polling: ReturnType<typeof setInterval>;\n  topOfPage: React.RefObject<HTMLDivElement>;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    this.topOfPage = React.createRef();\n\n    this.state = {\n      alerts: [],\n      collection: null,\n      followLogs: false,\n      importDetailError: '',\n      importList: [],\n      loadingImportDetails: true,\n      loadingImports: true,\n      params,\n      resultsCount: 0,\n      selectedImport: undefined,\n      selectedImportDetails: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // Load namespaces, use the namespaces to query the import list,\n    // use the import list to load the task details\n    this.loadImportList(() => this.loadTaskDetails());\n\n    this.polling = setInterval(() => {\n      if (!this.state.params.namespace) {\n        return;\n      }\n\n      const { selectedImport, selectedImportDetails } = this.state;\n      const allowedStates = [PulpStatus.running, PulpStatus.waiting];\n\n      // selectedImportDetails can be failed while selectedImport is still running, poll() updates selectedImport\n      if (\n        allowedStates.includes(selectedImportDetails?.state) ||\n        allowedStates.includes(selectedImport?.state)\n      ) {\n        this.poll();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.polling);\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(alert) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  render() {\n    const {\n      collection,\n      followLogs,\n      importDetailError,\n      importList,\n      loadingImportDetails,\n      loadingImports,\n      params,\n      resultsCount,\n      selectedImport,\n      selectedImportDetails,\n    } = this.state;\n\n    if (!importList) {\n      return null;\n    }\n\n    return (\n      <>\n        <div ref={this.topOfPage} />\n        <BaseHeader title={t`My imports`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <Main>\n          <section className='body'>\n            <div style={{ display: 'flex' }} data-cy='MyImports'>\n              <div style={{ width: '400px' }}>\n                <ImportList\n                  addAlert={(alert) => this.addAlert(alert)}\n                  importList={importList}\n                  selectedImport={selectedImport}\n                  loading={loadingImports}\n                  numberOfResults={resultsCount}\n                  params={params}\n                  selectImport={(sImport) => this.selectImport(sImport)}\n                  updateParams={(params) => {\n                    this.updateParams(params, () => {\n                      if (params.namespace) {\n                        this.setState(\n                          {\n                            loadingImports: true,\n                            loadingImportDetails: true,\n                          },\n                          () =>\n                            this.loadImportList(() => this.loadTaskDetails()),\n                        );\n                      } else {\n                        this.setState({\n                          importDetailError: t`No data`,\n                          loadingImportDetails: false,\n                        });\n                      }\n                    });\n                  }}\n                />\n              </div>\n\n              <div style={{ flexGrow: '1', marginLeft: '16px' }}>\n                {selectedImport && this.state.params.namespace && (\n                  <div\n                    style={{\n                      fontSize: '18px',\n                      padding: '10px 10px 0 10px',\n                    }}\n                  >\n                    {!collection ? (\n                      `${selectedImport.namespace}.${selectedImport.name}`\n                    ) : (\n                      <Link\n                        to={formatPath(\n                          Paths.collectionByRepo,\n                          {\n                            namespace: selectedImport.namespace,\n                            collection: selectedImport.name,\n                            repo: collection.repository.name,\n                          },\n                          {\n                            version: selectedImport.version,\n                          },\n                        )}\n                      >\n                        {selectedImport.namespace}.{selectedImport.name}\n                      </Link>\n                    )}\n                  </div>\n                )}\n\n                <ImportConsole\n                  apiError={importDetailError}\n                  collection={collection}\n                  empty={!this.state.params.namespace}\n                  followMessages={followLogs}\n                  loading={loadingImportDetails}\n                  selectedImport={selectedImport}\n                  setFollowMessages={(followLogs) =>\n                    this.setState({ followLogs })\n                  }\n                  task={selectedImportDetails}\n                />\n              </div>\n            </div>\n          </section>\n        </Main>\n      </>\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private selectImport(sImport) {\n    this.setState(\n      { selectedImport: sImport, loadingImportDetails: true },\n      () => {\n        this.topOfPage.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n        this.loadTaskDetails();\n      },\n    );\n  }\n\n  private poll() {\n    this.loadTaskDetails(() => {\n      // Update the state of the selected import in the list if it's\n      // different from the one loaded from the API.\n      const { selectedImport, selectedImportDetails, importList } = this.state;\n\n      if (!selectedImportDetails) {\n        return;\n      }\n\n      if (selectedImport.state !== selectedImportDetails.state) {\n        const importIndex = importList.findIndex(\n          (x) => x.id === selectedImport.id,\n        );\n\n        const imports = [...importList];\n        const newSelectedImport = {\n          ...selectedImport,\n          state: selectedImportDetails.state,\n          finished_at: selectedImportDetails.finished_at,\n        };\n\n        imports[importIndex] = newSelectedImport;\n\n        this.setState({\n          selectedImport: newSelectedImport,\n          importList: imports,\n        });\n      }\n    });\n  }\n\n  private loadImportList(callback?: () => void) {\n    if (!this.state.params.namespace) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n      return;\n    }\n\n    ImportAPI.list({ ...this.state.params, sort: '-created' })\n      .then((importList) => {\n        this.setState(\n          {\n            importList: importList.data.data,\n            selectedImport: importList.data.data[0],\n            resultsCount: importList.data.meta.count,\n            loadingImports: false,\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadTaskDetails(callback?: () => void) {\n    if (!this.state.selectedImport) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n    } else {\n      ImportAPI.get(this.state.selectedImport.id)\n        .then((result) => {\n          this.setState(\n            {\n              importDetailError: '',\n              loadingImportDetails: false,\n              selectedImportDetails: result.data,\n              collection: null,\n            },\n            () => {\n              const { namespace, name, version } =\n                this.state.selectedImportDetails;\n\n              // have to use list instead of get because repository_list isn't\n              // available on collection version details\n              CollectionVersionAPI.list({\n                namespace,\n                name,\n                version,\n              })\n                .then((result) => {\n                  if (result.data.meta.count === 1) {\n                    this.setState({\n                      collection: result.data.data[0],\n                    });\n                  }\n                })\n                .finally(() => {\n                  if (callback) {\n                    callback();\n                  }\n                });\n            },\n          );\n        })\n        .catch(() => {\n          this.setState({\n            selectedImportDetails: undefined,\n            importDetailError: t`Error fetching import from API`,\n            loadingImportDetails: false,\n          });\n        });\n    }\n  }\n}\n\nexport default withRouter(MyImports);\n"],"names":["MyImports","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","topOfPage","React","state","alerts","collection","followLogs","importDetailError","importList","loadingImportDetails","loadingImports","resultsCount","selectedImport","undefined","selectedImportDetails","_createClass","key","value","_this2","this","loadImportList","loadTaskDetails","polling","setInterval","namespace","_this2$state","allowedStates","PulpStatus","running","waiting","includes","poll","clearInterval","get","closeAlertMixin","alert","setState","concat","_toConsumableArray","_this3","_this$state","ref","BaseHeader","title","i18n","_","id","AlertList","closeAlert","i","Main","className","style","display","width","ImportList","addAlert","loading","numberOfResults","selectImport","sImport","updateParams","flexGrow","marginLeft","fontSize","padding","Link","to","formatPath","Paths","collectionByRepo","name","repo","repository","version","ImportConsole","apiError","empty","followMessages","setFollowMessages","task","updateParamsMixin","_this4","current","scrollIntoView","behavior","_this5","_this5$state","importIndex","findIndex","x","imports","newSelectedImport","_objectSpread","finished_at","callback","_this6","ImportAPI","list","sort","then","data","meta","count","result","console","log","_this7","_this7$state$selected","CollectionVersionAPI","withRouter"],"sourceRoot":""}
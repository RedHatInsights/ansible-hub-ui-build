{"version":3,"file":"js/5576.271c69c0fe8dc4e4c68e.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-content.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  CollectionVersionAPI.getCached(\n    {\n      ...(repo ? { repository_name: repo } : {}),\n      namespace,\n      name,\n      order_by: '-version',\n    },\n    forceReload,\n  )\n    .then((collections: CollectionVersionSearch[]) => {\n      const collection = version\n        ? collections.find(\n            ({ collection_version }) => collection_version.version == version,\n          )\n        : collections.find((cv) => cv.is_highest);\n\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ).then((res) => {\n        const [content] = res.data.results;\n        setCollection(collections, collection, content);\n      });\n    })\n    .catch(() => {\n      navigate(formatPath(Paths.notFound));\n    });\n}\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  CollectionContentList,\n  CollectionHeader,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collections: [],\n      collection: null,\n      content: null,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollections(false);\n  }\n\n  render() {\n    const { collections, collection, params, content } = this.state;\n\n    if (collections.length <= 0) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const { collection_version, repository } = collection;\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceDetail, {\n          namespace: collection_version.namespace,\n        }),\n        name: collection_version.namespace,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection_version.namespace,\n          collection: collection_version.name,\n          repo: repository.name,\n        }),\n        name: collection_version.name,\n      },\n      { name: t`Content` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          reload={() => this.loadCollections(true)}\n          collections={collections}\n          collection={collection}\n          content={content}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadCollections(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n        />\n        <Main>\n          <section className='body'>\n            <CollectionContentList\n              contents={content.contents}\n              collection={collection}\n              params={params}\n              updateParams={(p) => this.updateParams(p)}\n            ></CollectionContentList>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadCollections(forceReload) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      setCollection: (collections, collection, content) => {\n        this.setState({ collections, collection, content });\n      },\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\n\nCollectionContent.contextType = AppContext;\n"],"names":["loadCollection","_ref","forceReload","matchParams","navigate","setCollection","version","stateParams","name","collection","namespace","repo","CollectionVersionAPI","_objectSpread","repository_name","order_by","then","collections","find","_ref2","collection_version","cv","is_highest","CollectionAPI","res","content","_slicedToArray","data","results","formatPath","Paths","CollectionContent","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","_createClass","key","value","this","loadCollections","_this2","_this$state","length","React","LoadingPageWithHeader","repository","breadcrumbs","namespaceBreadcrumb","url","i18n","CollectionHeader","reload","updateParams","activeTab","Main","className","CollectionContentList","contents","p","_this3","routeParams","setState","get","withRouter","contextType","AppContext"],"sourceRoot":""}
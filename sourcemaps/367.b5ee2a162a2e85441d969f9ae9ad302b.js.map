{"version":3,"file":"js/367.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/containers/my-imports/my-imports.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport React, { Component, type RefObject, createRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CollectionVersionAPI,\n  type CollectionVersionSearch,\n  ImportAPI,\n  type ImportDetailType,\n  type ImportListType,\n  PulpStatus,\n} from 'src/api';\nimport {\n  AlertList,\n  type AlertType,\n  BaseHeader,\n  ImportConsole,\n  ImportList,\n  Main,\n  closeAlert,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { ParamHelper, type RouteProps, withRouter } from 'src/utilities';\n\ninterface IState {\n  alerts: AlertType[];\n  collection: CollectionVersionSearch;\n  followLogs: boolean;\n  importDetailError: string;\n  importList: ImportListType[];\n  loadingImportDetails: boolean;\n  loadingImports: boolean;\n  params: {\n    keyword?: string;\n    namespace?: string;\n    page?: number;\n    page_size?: number;\n  };\n  resultsCount: number;\n  selectedImport: ImportListType;\n  selectedImportDetails: ImportDetailType;\n}\n\nclass MyImports extends Component<RouteProps, IState> {\n  polling: ReturnType<typeof setInterval>;\n  topOfPage: RefObject<HTMLDivElement>;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    this.topOfPage = createRef();\n\n    this.state = {\n      alerts: [],\n      collection: null,\n      followLogs: false,\n      importDetailError: '',\n      importList: [],\n      loadingImportDetails: true,\n      loadingImports: true,\n      params,\n      resultsCount: 0,\n      selectedImport: undefined,\n      selectedImportDetails: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // Load namespaces, use the namespaces to query the import list,\n    // use the import list to load the task details\n    this.loadImportList(() => this.loadTaskDetails());\n\n    this.polling = setInterval(() => {\n      if (!this.state.params.namespace) {\n        return;\n      }\n\n      const { selectedImport, selectedImportDetails } = this.state;\n      const allowedStates = [PulpStatus.running, PulpStatus.waiting];\n\n      // selectedImportDetails can be failed while selectedImport is still running, poll() updates selectedImport\n      if (\n        allowedStates.includes(selectedImportDetails?.state) ||\n        allowedStates.includes(selectedImport?.state)\n      ) {\n        this.poll();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.polling);\n  }\n\n  private addAlert(alert) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  render() {\n    const {\n      alerts,\n      collection,\n      followLogs,\n      importDetailError,\n      importList,\n      loadingImportDetails,\n      loadingImports,\n      params,\n      resultsCount,\n      selectedImport,\n      selectedImportDetails,\n    } = this.state;\n\n    if (!importList) {\n      return null;\n    }\n\n    return (\n      <>\n        <div ref={this.topOfPage} />\n        <BaseHeader title={t`My imports`} />\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) =>\n            closeAlert(i, {\n              alerts,\n              setAlerts: (alerts) => this.setState({ alerts }),\n            })\n          }\n        />\n        <Main>\n          <section className='body'>\n            <div style={{ display: 'flex' }} data-cy='MyImports'>\n              <div style={{ width: '400px' }}>\n                <ImportList\n                  addAlert={(alert) => this.addAlert(alert)}\n                  importList={importList}\n                  selectedImport={selectedImport}\n                  loading={loadingImports}\n                  numberOfResults={resultsCount}\n                  params={params}\n                  selectImport={(sImport) => this.selectImport(sImport)}\n                  updateParams={(params) => {\n                    this.updateParams(params, () => {\n                      if (params.namespace) {\n                        this.setState(\n                          {\n                            loadingImports: true,\n                            loadingImportDetails: true,\n                          },\n                          () =>\n                            this.loadImportList(() => this.loadTaskDetails()),\n                        );\n                      } else {\n                        this.setState({\n                          importDetailError: t`No data`,\n                          loadingImportDetails: false,\n                        });\n                      }\n                    });\n                  }}\n                />\n              </div>\n\n              <div style={{ flexGrow: '1', marginLeft: '16px' }}>\n                {selectedImport && this.state.params.namespace && (\n                  <div\n                    style={{\n                      fontSize: '18px',\n                      padding: '10px 10px 0 10px',\n                    }}\n                  >\n                    {!collection ? (\n                      `${selectedImport.namespace}.${selectedImport.name}`\n                    ) : (\n                      <Link\n                        to={formatPath(\n                          Paths.collectionByRepo,\n                          {\n                            namespace: selectedImport.namespace,\n                            collection: selectedImport.name,\n                            repo: collection.repository.name,\n                          },\n                          {\n                            version: selectedImport.version,\n                          },\n                        )}\n                      >\n                        {selectedImport.namespace}.{selectedImport.name}\n                      </Link>\n                    )}\n                  </div>\n                )}\n\n                <ImportConsole\n                  apiError={importDetailError}\n                  collection={collection}\n                  empty={!this.state.params.namespace}\n                  followMessages={followLogs}\n                  loading={loadingImportDetails}\n                  selectedImport={selectedImport}\n                  setFollowMessages={(followLogs) =>\n                    this.setState({ followLogs })\n                  }\n                  task={selectedImportDetails}\n                />\n              </div>\n            </div>\n          </section>\n        </Main>\n      </>\n    );\n  }\n\n  private updateParams(params, callback = null) {\n    ParamHelper.updateParams({\n      params,\n      navigate: (to) => this.props.navigate(to),\n      setState: (state) => this.setState(state, callback),\n    });\n  }\n\n  private selectImport(sImport) {\n    this.setState(\n      { selectedImport: sImport, loadingImportDetails: true },\n      () => {\n        this.topOfPage.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n        this.loadTaskDetails();\n      },\n    );\n  }\n\n  private poll() {\n    this.loadTaskDetails(() => {\n      // Update the state of the selected import in the list if it's\n      // different from the one loaded from the API.\n      const { selectedImport, selectedImportDetails, importList } = this.state;\n\n      if (!selectedImportDetails) {\n        return;\n      }\n\n      if (selectedImport.state !== selectedImportDetails.state) {\n        const importIndex = importList.findIndex(\n          (x) => x.id === selectedImport.id,\n        );\n\n        const imports = [...importList];\n        const newSelectedImport = {\n          ...selectedImport,\n          state: selectedImportDetails.state,\n          finished_at: selectedImportDetails.finished_at,\n        };\n\n        imports[importIndex] = newSelectedImport;\n\n        this.setState({\n          selectedImport: newSelectedImport,\n          importList: imports,\n        });\n      }\n    });\n  }\n\n  private loadImportList(callback?: () => void) {\n    if (!this.state.params.namespace) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n      return;\n    }\n\n    ImportAPI.list({ ...this.state.params, sort: '-created' })\n      .then((importList) => {\n        this.setState(\n          {\n            importList: importList.data.data,\n            selectedImport: importList.data.data[0],\n            resultsCount: importList.data.meta.count,\n            loadingImports: false,\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadTaskDetails(callback?: () => void) {\n    if (!this.state.selectedImport) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n    } else {\n      ImportAPI.get(this.state.selectedImport.id)\n        .then((result) => {\n          this.setState(\n            {\n              importDetailError: '',\n              loadingImportDetails: false,\n              selectedImportDetails: result.data,\n              collection: null,\n            },\n            () => {\n              const { namespace, name, version } =\n                this.state.selectedImportDetails;\n\n              // have to use list instead of get because repository_list isn't\n              // available on collection version details\n              CollectionVersionAPI.list({\n                namespace,\n                name,\n                version,\n              })\n                .then((result) => {\n                  if (result.data.meta.count === 1) {\n                    this.setState({\n                      collection: result.data.data[0],\n                    });\n                  }\n                })\n                .finally(() => {\n                  if (callback) {\n                    callback();\n                  }\n                });\n            },\n          );\n        })\n        .catch(() => {\n          this.setState({\n            selectedImportDetails: undefined,\n            importDetailError: t`Error fetching import from API`,\n            loadingImportDetails: false,\n          });\n        });\n    }\n  }\n}\n\nexport default withRouter(MyImports);\n"],"names":["MyImports","_Component","props","_this","_classCallCheck","_callSuper","params","ParamHelper","parseParamString","location","search","topOfPage","createRef","state","alerts","collection","followLogs","importDetailError","importList","loadingImportDetails","loadingImports","resultsCount","selectedImport","undefined","selectedImportDetails","_inherits","_createClass","key","value","_this2","this","loadImportList","loadTaskDetails","polling","setInterval","namespace","_this2$state","allowedStates","PulpStatus","running","waiting","includes","poll","clearInterval","alert","setState","concat","_toConsumableArray","_this3","_this$state","React","ref","BaseHeader","title","i18n","_","id","AlertList","closeAlert","i","setAlerts","Main","className","style","display","width","ImportList","addAlert","loading","numberOfResults","selectImport","sImport","updateParams","flexGrow","marginLeft","fontSize","padding","Link","to","formatPath","Paths","collectionByRepo","name","repo","repository","version","ImportConsole","apiError","empty","followMessages","setFollowMessages","task","_this4","callback","arguments","length","navigate","_this5","current","scrollIntoView","behavior","_this6","_this6$state","importIndex","findIndex","x","imports","newSelectedImport","_objectSpread","finished_at","_this7","ImportAPI","list","sort","then","data","meta","count","result","console","log","_this8","get","_this8$state$selected","CollectionVersionAPI","Component","withRouter"],"sourceRoot":""}
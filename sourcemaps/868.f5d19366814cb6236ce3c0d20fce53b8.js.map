{"version":3,"file":"js/868.13257563d725a5a767b8.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  LabelGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersion,\n  CollectionVersionAPI,\n  Repositories,\n} from 'src/api';\nimport { Repository } from 'src/api/response-types/repositories';\nimport {\n  ApproveModal,\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  waitForTask,\n  waitForTaskUrl,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersion;\n  approveModalInfo: {\n    collectionVersion: CollectionVersion;\n  };\n  repositoryList: Repository[];\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      repositoryList: [],\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      const promises = [];\n\n      promises.push(\n        Repositories.listApproved()\n          .then((data) => {\n            this.setState({ repositoryList: data.data.results });\n          })\n          .catch(({ response: { status, statusText } }) => {\n            this.addAlertObj({\n              title: t`Failed to load repositories.`,\n              variant: 'danger',\n              description: errorMessage(status, statusText),\n            });\n          }),\n      );\n\n      promises.push(this.queryCollections(false));\n\n      Promise.all(promises).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () =>\n                            this.queryCollections(true),\n                          )\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={\n                  this.state.approveModalInfo.collectionVersion\n                }\n                addAlert={(alert) => this.addAlertObj(alert)}\n                allRepositories={this.state.repositoryList}\n              />\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repositories`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (this.isApproved(version)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && version.sign_state === 'signed'\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {version.sign_state === 'unsigned' &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(version.namespace, version.name, version.version);\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>\n          <LabelGroup>\n            {version.repository_list.map((repo, i) => {\n              let text = repo;\n              if (i < version.repository_list.length - 1) {\n                text += ', ';\n              }\n              return text;\n            })}\n          </LabelGroup>\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        {this.renderButtons(version)}\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.state.updatingVersions.includes(version)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && version.sign_state === 'unsigned';\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button onClick={() => this.openUploadCertificateModal(version)}>\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() => {\n          this.approve(version);\n        }}\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => this.approve(version)}\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => {\n          this.reject(version);\n        }}\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    if (this.isApproved(version)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true),\n            rejectDropDown(false),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      // render reject button if version is in multiple repositories including rejected state - handles inconsistency\n      // and allows user to reject it again to move it all to rejected state\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false),\n            rejectDropDown(version.repository_list.length == 1),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <ListItemActions\n          kebabItems={[rejectDropDown(false), importsLink]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersion) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const version = this.state.versionToUploadCertificate;\n    const signed_collection = `${PULP_API_BASE_PATH}content/ansible/collection_versions/${version.id}/`;\n\n    return Repositories.getRepository({\n      name: 'staging',\n    })\n      .then((response) =>\n        CertificateUploadAPI.upload({\n          file,\n          repository: response.data.results[0].pulp_href,\n          signed_collection,\n        }),\n      )\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private isApproved(version) {\n    let approvedRepoFound = true;\n\n    if (version.repository_list.length == 0) {\n      return false;\n    }\n\n    version.repository_list.forEach((repo) => {\n      if (!this.state.repositoryList.find((r) => r.name == repo)) {\n        approvedRepoFound = false;\n      }\n    });\n\n    return approvedRepoFound;\n  }\n\n  private approve(version) {\n    if (version.repository_list.length == 0) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Approval failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    if (this.state.repositoryList.length == 1) {\n      const originalRepo = version.repository_list.find(\n        (repo) =>\n          repo == Constants.NEEDSREVIEW || repo == Constants.NOTCERTIFIED,\n      );\n      if (originalRepo) {\n        this.updateCertification(\n          version,\n          originalRepo,\n          this.state.repositoryList[0].name,\n        );\n      } else {\n        // I hope that this may not occure ever, but to be sure...\n        this.addAlert(\n          t`Approval failed.`,\n          'danger',\n          t`Collection has to be in rejected or staging repository.`,\n        );\n      }\n    } else {\n      this.setState({ approveModalInfo: { collectionVersion: version } });\n    }\n  }\n\n  private reject(version) {\n    if (version.repository_list.length == 0) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Rejection failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    if (version.repository_list.length == 1) {\n      // maintain vanilla functionality\n      this.updateCertification(\n        version,\n        version.repository_list[0],\n        Constants.NOTCERTIFIED,\n      );\n    } else {\n      const promises = [];\n      const repositoryList = this.state.repositoryList;\n\n      this.setState({ updatingVersions: [version] });\n\n      const removedRepos = [];\n      const failedRepos = [];\n\n      version.repository_list.forEach((repo) => {\n        const repoInfo = repositoryList.find((r) => r.name == repo);\n\n        if (repoInfo?.pulp_labels?.pipeline == 'approved') {\n          const promise = CollectionVersionAPI.setRepository(\n            version.namespace,\n            version.name,\n            version.version,\n            repo,\n            Constants.NOTCERTIFIED,\n          )\n            .then((task) => {\n              return waitForTaskUrl(task['data'].copy_task_id);\n            })\n            .then(() => {\n              removedRepos.push(repo);\n            })\n            .catch(() => {\n              failedRepos.push(repo);\n            });\n          promises.push(promise);\n        }\n      });\n\n      Promise.all(promises).then(() => {\n        this.setState({ loading: false });\n        this.queryCollections(true);\n        if (failedRepos.length == 0) {\n          this.addAlertObj({\n            title: t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n            variant: 'success',\n          });\n        } else {\n          if (removedRepos.length > 0) {\n            this.addAlertObj({\n              title: t`Rejection summary.`,\n              variant: 'danger',\n              description: t`Collection was sucessfuly rejected from those repositories: ${removedRepos.join(\n                ', ',\n              )}, but failed to be removed from those repositories: ${failedRepos.join(\n                ', ',\n              )}`,\n            });\n          } else {\n            this.addAlertObj({\n              title: t`Rejection failed.`,\n              variant: 'danger',\n              description: t`Collection failed to be removed from those repositories: ${failedRepos.join(\n                ', ',\n              )}`,\n            });\n          }\n        }\n      });\n    }\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    this.setState({ updatingVersions: [version] });\n\n    return CollectionVersionAPI.setRepository(\n      version.namespace,\n      version.name,\n      version.version,\n      originalRepo,\n      destinationRepo,\n    )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    return CollectionVersionAPI.list(this.state.params)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private download(namespace: string, name: string, version: string) {\n    CollectionAPI.getDownloadURL('staging', namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","repositoryList","_createClass","key","value","_this2","_this$context","this","context","user","hasPermission","is_anonymous","setState","promises","push","Repositories","then","data","results","_ref","_ref$response","response","status","statusText","addAlertObj","title","i18n","variant","description","errorMessage","queryCollections","Promise","all","_repository","_this3","_this$state","React","BaseHeader","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","inputType","options","Constants","Pagination","count","isTop","AppliedFilters","ignoredParams","niceValues","repository","_defineProperty","niceNames","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","addAlert","alert","allRepositories","LoadingPageWithHeader","_this4","length","filterIsSet","EmptyStateFilter","EmptyStateNoData","sortTableOptions","headers","type","SortTable","map","version","renderRow","includes","isApproved","display_signatures","featureFlags","Label","color","icon","CheckCircleIcon","sign_state","repository_list","ExclamationCircleIcon","_this$context$feature","can_upload_signatures","require_upload_signatures","ExclamationTriangleIcon","index","_this5","namespace","name","Link","to","formatPath","Paths","collection","repo","Button","ButtonVariant","onClick","download","DownloadIcon","DateComponent","date","created_at","LabelGroup","renderStatus","renderButtons","_this6","_this$context$feature2","collection_auto_sign","ListItemActions","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","approve","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","rejectDropDown","reject","kebabItems","buttons","file","_this7","signed_collection","concat","PULP_API_BASE_PATH","CertificateUploadAPI","pulp_href","result","waitForTask","parsePulpIDFromURL","task","error","_this8","approvedRepoFound","forEach","find","r","originalRepo","updateCertification","_this9","removedRepos","failedRepos","_repoInfo$pulp_labels","repoInfo","pulp_labels","pipeline","promise","CollectionVersionAPI","waitForTaskUrl","copy_task_id","join","destinationRepo","_this10","remove_task_id","waitMs","handleLoading","_this11","meta","message","CollectionAPI","downloadURL","window","assign","get","closeAlertMixin","_toConsumableArray","withRouter","contextType","AppContext"],"sourceRoot":""}
{"version":3,"file":"js/search.29d6f242211575416473.js","mappings":"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","sources":["webpack:///./src/containers/search/search.tsx"],"sourcesContent":["import * as React from 'react';\nimport './search.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport {\n  DataList,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarContent,\n  Switch,\n} from '@patternfly/react-core';\n\nimport {\n  BaseHeader,\n  CollectionCard,\n  CardListSwitcher,\n  CollectionListItem,\n  CompoundFilter,\n  Pagination,\n  LoadingPageSpinner,\n  AppliedFilters,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  RepoSelector,\n} from 'src/components';\nimport {\n  CollectionAPI,\n  CollectionListType,\n  SyncListType,\n  MySyncListAPI,\n} from 'src/api';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { filterIsSet } from 'src/utilities';\nimport { Paths } from 'src/paths';\n\ninterface IState {\n  collections: CollectionListType[];\n  numberOfResults: number;\n  params: {\n    page?: number;\n    page_size?: number;\n    keywords?: string;\n    tags?: string[];\n    view_type?: string;\n  };\n  loading: boolean;\n  synclist: SyncListType;\n}\n\nclass Search extends React.Component<RouteComponentProps, IState> {\n  tags: string[];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = Constants.CARD_DEFAULT_PAGE_SIZE;\n    }\n\n    // Load view type from local storage if it's not set. This allows a\n    // user's view type preference to persist\n    if (!params['view_type']) {\n      params['view_type'] = localStorage.getItem(\n        Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n      );\n    }\n\n    this.state = {\n      collections: [],\n      params: params,\n      numberOfResults: 0,\n      loading: true,\n      synclist: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.queryCollections();\n\n    if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE)\n      this.getSynclist();\n  }\n\n  render() {\n    const { collections, params, numberOfResults } = this.state;\n    const noData =\n      collections.length === 0 && !filterIsSet(params, ['keywords', 'tags']);\n\n    const tags = [\n      'cloud',\n      'linux',\n      'networking',\n      'storage',\n      'security',\n      'windows',\n      'infrastructure',\n      'monitoring',\n      'tools',\n      'database',\n      'application',\n    ];\n\n    return (\n      <div className='search-page'>\n        <BaseHeader\n          className='header'\n          title='Collections'\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={Paths.searchByRepo}\n            />\n          }\n        >\n          {!noData && (\n            <div className='toolbar-wrapper'>\n              <div className='toolbar'>\n                <Toolbar>\n                  <ToolbarContent>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <CompoundFilter\n                          updateParams={p =>\n                            this.updateParams(p, () => this.queryCollections())\n                          }\n                          params={params}\n                          filterConfig={[\n                            {\n                              id: 'keywords',\n                              title: 'Keywords',\n                            },\n                            {\n                              id: 'tags',\n                              title: 'Tag',\n                              inputType: 'multiple',\n                              options: tags.map(tag => ({\n                                id: tag,\n                                title: tag,\n                              })),\n                            },\n                          ]}\n                        />\n                        <ToolbarItem>\n                          <AppliedFilters\n                            style={{ marginTop: '16px' }}\n                            updateParams={p =>\n                              this.updateParams(p, () =>\n                                this.queryCollections(),\n                              )\n                            }\n                            params={params}\n                            ignoredParams={[\n                              'page_size',\n                              'page',\n                              'sort',\n                              'view_type',\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n\n                <div className='pagination-container'>\n                  <div className='card-list-switcher'>\n                    <CardListSwitcher\n                      size='sm'\n                      params={params}\n                      updateParams={p =>\n                        this.updateParams(p, () =>\n                          // Note, we have to use this.state.params instead\n                          // of params in the callback because the callback\n                          // executes before the page can re-run render\n                          // which means params doesn't contain the most\n                          // up to date state\n                          localStorage.setItem(\n                            Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n                            this.state.params.view_type,\n                          ),\n                        )\n                      }\n                    />\n                  </div>\n\n                  <Pagination\n                    params={params}\n                    updateParams={p =>\n                      this.updateParams(p, () => this.queryCollections())\n                    }\n                    count={numberOfResults}\n                    perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                    isTop\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        {noData ? (\n          <EmptyStateNoData\n            title={'No collections yet'}\n            description={'Collections will appear once uploaded'}\n          />\n        ) : (\n          <React.Fragment>\n            <Section className='collection-container'>\n              {this.renderCollections(collections, params)}\n            </Section>\n            <Section className='footer'>\n              <Pagination\n                params={params}\n                updateParams={p =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                count={numberOfResults}\n              />\n            </Section>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n\n  private renderCollections(collections, params) {\n    if (this.state.loading) {\n      return <LoadingPageSpinner></LoadingPageSpinner>;\n    }\n    if (collections.length === 0) {\n      return <EmptyStateFilter />;\n    }\n    if (params.view_type === 'list') {\n      return this.renderList(collections);\n    } else {\n      return this.renderCards(collections);\n    }\n  }\n\n  private renderCards(collections) {\n    return (\n      <div className='cards'>\n        {collections.map(c => {\n          return (\n            <CollectionCard\n              className='card'\n              key={c.id}\n              {...c}\n              footer={this.renderSyncToggle(c.name, c.namespace.name)}\n              repo={this.context.selectedRepo}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  private renderSyncToggle(name: string, namespace: string): React.ReactNode {\n    const { synclist } = this.state;\n    if (!synclist) {\n      return null;\n    }\n    return (\n      <Switch\n        id={namespace + '.' + name}\n        className='sync-toggle'\n        label='Sync'\n        isChecked={this.isCollectionSynced(name, namespace)}\n        onChange={() => this.toggleCollectionSync(name, namespace)}\n      />\n    );\n  }\n\n  private toggleCollectionSync(name: string, namespace: string) {\n    const synclist = { ...this.state.synclist };\n\n    const colIndex = synclist.collections.findIndex(\n      el => el.name === name && el.namespace === namespace,\n    );\n\n    if (colIndex < 0) {\n      synclist.collections.push({ name: name, namespace: namespace });\n    } else {\n      synclist.collections.splice(colIndex, 1);\n    }\n\n    MySyncListAPI.update(synclist.id, synclist).then(response => {\n      this.setState({ synclist: response.data });\n      MySyncListAPI.curate(synclist.id).then(() => null);\n    });\n  }\n\n  private isCollectionSynced(name: string, namespace: string): boolean {\n    const { synclist } = this.state;\n    const found = synclist.collections.find(\n      el => el.name === name && el.namespace === namespace,\n    );\n\n    if (synclist.policy === 'include') {\n      return !(found === undefined);\n    } else {\n      return found === undefined;\n    }\n  }\n\n  private renderList(collections) {\n    return (\n      <div className='list-container'>\n        <div className='list'>\n          <DataList className='data-list' aria-label={'List of Collections'}>\n            {collections.map(c => (\n              <CollectionListItem\n                showNamespace={true}\n                key={c.id}\n                {...c}\n                controls={this.renderSyncToggle(c.name, c.namespace.name)}\n                repo={this.context.selectedRepo}\n              />\n            ))}\n          </DataList>\n        </div>\n      </div>\n    );\n  }\n\n  private getSynclist() {\n    MySyncListAPI.list().then(result => {\n      // ignore results if more than 1 is returned\n      // TODO: should we throw an error for this or just ignore it?\n      if (result.data.meta.count === 1) {\n        this.setState({ synclist: result.data.data[0] });\n      } else {\n        console.error(\n          `my-synclist returned ${result.data.meta.count} synclists`,\n        );\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () => {\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, ['view_type']),\n          deprecated: false,\n        },\n        this.context.selectedRepo,\n      ).then(result => {\n        this.setState({\n          collections: result.data.data,\n          numberOfResults: result.data.meta.count,\n          loading: false,\n        });\n      });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(Search);\n\nSearch.contextType = AppContext;\n"],"names":["Search","props","params","ParamHelper","location","search","Constants","localStorage","getItem","state","collections","numberOfResults","loading","synclist","undefined","this","queryCollections","DEPLOYMENT_MODE","getSynclist","noData","length","filterIsSet","className","title","contextSelector","selectedRepo","context","path","Paths","updateParams","p","filterConfig","id","inputType","options","map","tag","style","marginTop","ignoredParams","size","setItem","view_type","count","perPageOptions","isTop","description","renderCollections","renderList","renderCards","c","key","footer","renderSyncToggle","name","namespace","repo","label","isChecked","isCollectionSynced","onChange","toggleCollectionSync","colIndex","findIndex","el","push","splice","MySyncListAPI","then","response","setState","data","found","find","policy","showNamespace","controls","result","meta","console","error","CollectionAPI","deprecated","React","withRouter","contextType","AppContext"],"sourceRoot":""}
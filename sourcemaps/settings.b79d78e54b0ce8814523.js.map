{"version":3,"file":"js/settings.471268114538e9c20802.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx","webpack:///./src/containers/token/token-insights.tsx"],"sourcesContent":["import * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  Main,\n} from 'src/components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n} from '@patternfly/react-core';\n\nimport {\n  InfoCircleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n} from '@patternfly/react-icons';\n\nimport { CollectionVersionAPI, CollectionVersion, TaskAPI } from 'src/api';\nimport { filterIsSet, ParamHelper } from 'src/utilities';\nimport {\n  LoadingPageWithHeader,\n  StatefulDropdown,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !this.context.user ||\n      !this.context.user.model_permissions.move_collection\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={_`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='certification-dashboard'>\n            <section className='body'>\n              <div className='toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: _`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: _`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: _`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: _`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: _`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: _`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: _`Approved`,\n                      [Constants.NEEDSREVIEW]: _`Needs Review`,\n                      [Constants.NOTCERTIFIED]: _`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: _`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={_`No managed collections yet`}\n          description={_`Collections will appear once uploaded`}\n        />\n      );\n    }\n    let sortTableOptions = {\n      headers: [\n        {\n          title: _`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: _`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: _`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: _`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: _`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={_`Collection versions`}\n        className='content-table pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <CheckCircleIcon\n            style={{ color: 'var(--pf-global--success-color--100)' }}\n          />{' '}\n          {_`Approved`}\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <ExclamationCircleIcon\n            style={{ color: 'var(--pf-global--danger-color--100)' }}\n          />{' '}\n          {_`Rejected`}\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <InfoCircleIcon\n            style={{ color: 'var(--pf-global--info-color--100)' }}\n          />{' '}\n          {_`Needs Review`}\n        </span>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr\n        aria-labelledby={`${version.namespace}.${version.name} v${version.version}`}\n        key={index}\n      >\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        <td>\n          <div className='control-column'>\n            <div>{this.renderButtons(version)}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return;\n    }\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {_`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {_`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {_`Reject`}\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(true, Constants.PUBLISHED),\n              rejectDropDown(false, Constants.PUBLISHED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(false, Constants.NOTCERTIFIED),\n              rejectDropDown(true, Constants.NOTCERTIFIED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <Button\n            onClick={() =>\n              this.updateCertification(\n                version,\n                Constants.NEEDSREVIEW,\n                Constants.PUBLISHED,\n              )\n            }\n          >\n            <span>{_`Approve`}</span>\n          </Button>\n          <StatefulDropdown\n            items={[rejectDropDown(false, Constants.NEEDSREVIEW), importsLink]}\n          />\n        </span>\n      );\n    }\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: [],\n      },\n      () =>\n        CollectionVersionAPI.setRepository(\n          version.namespace,\n          version.name,\n          version.version,\n          originalRepo,\n          destinationRepo,\n        )\n          .then((result) =>\n            // Since pulp doesn't reply with the new object, perform a\n            // second query to get the updated data\n            {\n              this.setState({\n                updatingVersions: [version],\n              });\n              this.waitForUpdate(result.data.remove_task_id, version);\n            },\n          )\n          .catch((error) => {\n            this.setState({\n              updatingVersions: [],\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: _`API Error: ${error.response.status}`,\n                description: _`Could not update the certification status for ${version.namespace}.${version.name}.${version.version}.`,\n              }),\n            });\n          }),\n    );\n  }\n\n  private waitForUpdate(result, version) {\n    const taskId = result;\n    return TaskAPI.get(taskId).then(async (result) => {\n      if (result.data.state === 'waiting' || result.data.state === 'running') {\n        await new Promise((r) => setTimeout(r, 500));\n        this.waitForUpdate(taskId, version);\n      } else if (result.data.state === 'completed') {\n        return CollectionVersionAPI.list(this.state.params).then(\n          async (result) => {\n            this.setState({\n              versions: result.data.data,\n              updatingVersions: [],\n            });\n          },\n        );\n      } else {\n        this.setState({\n          updatingVersions: [],\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: _`API Error: 500`,\n            description: _`Could not update the certification status for ${version.namespace}.${version.name}.${version.version}.`,\n          }),\n        });\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        });\n      }),\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  Button,\n} from '@patternfly/react-core';\n\nimport { Paths } from 'src/paths';\nimport { BaseHeader, Main } from 'src/components';\nimport { getRepoUrl } from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    (window as any).insights.chrome.auth.getOfflineToken().then((result) => {\n      this.setState({ tokenData: result.data });\n    });\n  }\n\n  render() {\n    const { user } = this.context;\n    const { tokenData } = this.state;\n    const renewTokenCmd = `curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=\"${\n      user.username\n    }\" -d refresh_token=\\\"${\n      tokenData?.refresh_token ?? '{{ user_token }}'\n    }\\\" --fail --silent --show-error --output /dev/null`;\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={_`Connect to Hub`}></BaseHeader>\n        <Main>\n          <section className='body pf-c-content'>\n            <h2>{_`Connect Private Automation Hub`}</h2>\n            <p>\n              Use the{' '}\n              <Link to={Paths.repositories}>{_`Repository Management`}</Link>{' '}\n              page to sync collections curated by your organization to the Red\n              Hat Certified repository in your private Automation Hub. Users\n              with the correct permissions can use the sync toggles on the{' '}\n              <Link to={Paths.search}>{_`Collections`}</Link> page to control\n              which collections are added to their organization's sync\n              repository.\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{_`Connect the ansible-galaxy client`}</h2>\n            <p>\n              Documentation on how to configure the <code>ansible-galaxy</code>{' '}\n              client can be found{' '}\n              <a\n                href='https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/'\n                target='_blank'\n              >\n                here\n              </a>\n              . Use the following parameters to configure the client.\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{_`Offline token`}</h2>\n            <p>\n              {_`Use this token to authenticate clients that need to download`}\n              content from Automation Hub. This is a secret token used to\n              protect your content. Store your API token in a secure location.\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <Button onClick={() => this.loadToken()}>{_`Load token`}</Button>\n            )}\n            <div\n              className='pf-c-content'\n              style={{ paddingTop: 'var(--pf-global--spacer--md)' }}\n            >\n              <span>\n                The token will expire after 30 days of inactivity. Run the\n                command below periodically to prevent your token from expiring.\n              </span>\n              <ClipboardCopy\n                isCode\n                isReadOnly\n                variant={ClipboardCopyVariant.expansion}\n              >\n                {renewTokenCmd}\n              </ClipboardCopy>\n            </div>\n            <h2>{_`Manage tokens`}</h2>\n            To revoke a token or see all of your tokens, visit the{' '}\n            <a\n              href='https://sso.redhat.com/auth/realms/redhat-external/account/applications'\n              target='_blank'\n            >\n              offline API token management\n            </a>{' '}\n            page.\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{_`Server URL`}</h2>\n            <p>\n              {_`Use this URL to configure the API endpoints that clients need to`}\n              download content from Automation Hub.\n            </p>\n            <ClipboardCopy isReadOnly>{getRepoUrl('')}</ClipboardCopy>\n            <p>\n              {_`Note: this URL contains all collections in Hub. To connect to your`}\n              organization's sync repository use the URL found on{' '}\n              <Link to={Paths.repositories}>{_`Repository Management`}</Link>.\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{_`SSO URL`}</h2>\n            <p>\n              {_`Use this URL to configure the authentication URLs that clients`}\n              need to download content from Automation Hub.\n            </p>\n            <ClipboardCopy isReadOnly>\n              https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n            </ClipboardCopy>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    (window as any).insights.chrome.auth\n      // doOffline causes the page to refresh and will make the data\n      // available to getOfflineToken() when the component mounts after\n      // the reload\n      .doOffline();\n  }\n}\n\nexport default withRouter(TokenPage);\nTokenPage.contextType = AppContext;\n"],"names":["CertificationDashboard","props","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","this","context","user","model_permissions","move_collection","queryCollections","setState","title","_","closeAlert","i","className","updateParams","p","filterConfig","id","inputType","options","Constants","count","isTop","ignoredParams","niceValues","repository","niceNames","renderTable","length","filterIsSet","description","sortTableOptions","headers","type","map","version","renderRow","includes","repository_list","style","color","index","namespace","name","key","to","formatPath","Paths","collection","repo","date","created_at","renderStatus","renderButtons","importsLink","component","certifyDropDown","isDisabled","originalRepo","onClick","updateCertification","rejectDropDown","items","destinationRepo","CollectionVersionAPI","then","result","waitForUpdate","data","remove_task_id","error","concat","variant","response","status","taskId","TaskAPI","Promise","r","setTimeout","meta","closeAlertMixin","React","withRouter","contextType","AppContext","TokenPage","tokenData","window","insights","chrome","auth","getOfflineToken","renewTokenCmd","username","refresh_token","href","target","loadToken","paddingTop","isCode","isReadOnly","ClipboardCopyVariant","getRepoUrl","doOffline"],"sourceRoot":""}
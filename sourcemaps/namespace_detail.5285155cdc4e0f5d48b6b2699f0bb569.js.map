{"version":3,"file":"js/namespace_detail.1646145062108.1d540b1e75e77a7cc506.js","mappings":"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","sources":["webpack:///./src/containers/edit-namespace/edit-namespace.tsx","webpack:///./src/containers/namespace-detail/namespace-detail.tsx"],"sourcesContent":["import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\nimport { Form, ActionGroup, Button, Spinner } from '@patternfly/react-core';\n\nimport {\n  PartnerHeader,\n  NamespaceForm,\n  ResourcesForm,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  Main,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n} from 'src/components';\nimport {\n  MyNamespaceAPI,\n  NamespaceType,\n  ActiveUserAPI,\n  NamespaceLinkType,\n} from 'src/api';\n\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport {\n  ErrorMessagesType,\n  ParamHelper,\n  mapErrorMessages,\n  errorMessage,\n} from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  namespace: NamespaceType;\n  newLinkName: string;\n  newLinkURL: string;\n  errorMessages: ErrorMessagesType;\n  saving: boolean;\n  loading: boolean;\n  redirect: string;\n  unsavedData: boolean;\n  alerts: AlertType[];\n  params: {\n    tab?: string;\n  };\n  userId: string;\n  unauthorized: boolean;\n}\n\nclass EditNamespace extends React.Component<RouteComponentProps, IState> {\n  queryParams: URLSearchParams;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    if (!params['tab']) {\n      params['tab'] = 'edit-details';\n    }\n\n    this.state = {\n      loading: false,\n      alerts: [],\n      namespace: null,\n      userId: '',\n      newLinkURL: '',\n      newLinkName: '',\n      errorMessages: {},\n      saving: false,\n      redirect: null,\n      unsavedData: false,\n      params: params,\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true }, () => {\n      ActiveUserAPI.getUser()\n        .then((result) => {\n          this.setState({ userId: result.account_number }, () =>\n            this.loadNamespace(),\n          );\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              loading: false,\n              redirect: formatPath(Paths.namespaceByRepo, {\n                namespace: this.props.match.params['namespace'],\n                repo: this.context.selectedRepo,\n              }),\n            },\n            () => {\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'danger',\n                  title: t`Active user profile \"${this.context.user?.username}\" could not be displayed.`,\n                  description: errorMessage(status, statusText),\n                },\n              ]);\n            },\n          );\n        });\n    });\n  }\n\n  render() {\n    const {\n      namespace,\n      errorMessages,\n      saving,\n      redirect,\n      params,\n      userId,\n      unauthorized,\n      loading,\n    } = this.state;\n\n    const tabs = [\n      { id: 'edit-details', name: t`Edit details` },\n      { id: 'edit-resources', name: t`Edit resources` },\n    ];\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n\n    if (loading) {\n      return <LoadingPageSpinner />;\n    }\n\n    if (!namespace) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[\n            namespaceBreadcrumb,\n            {\n              name: namespace.name,\n              url: formatPath(Paths.myCollections, {\n                namespace: namespace.name,\n              }),\n            },\n            { name: t`Edit` },\n          ]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n        ></PartnerHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main>\n            <section className='body'>\n              {params.tab.toLowerCase() === 'edit-details' ? (\n                <NamespaceForm\n                  userId={userId}\n                  namespace={namespace}\n                  errorMessages={errorMessages}\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                />\n              ) : (\n                <ResourcesForm\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                  namespace={namespace}\n                />\n              )}\n              <Form>\n                <ActionGroup>\n                  <Button\n                    variant='primary'\n                    onClick={() => this.saveNamespace()}\n                  >\n                    {t`Save`}\n                  </Button>\n                  <Button variant='secondary' onClick={() => this.cancel()}>\n                    {t`Cancel`}\n                  </Button>\n\n                  {saving ? <Spinner></Spinner> : null}\n                </ActionGroup>\n                {this.state.unsavedData ? (\n                  <div\n                    style={{ color: 'red' }}\n                  >{t`You have unsaved changes`}</div>\n                ) : null}\n              </Form>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private loadNamespace() {\n    MyNamespaceAPI.get(this.props.match.params['namespace'])\n      .then((response) => {\n        // Add an empty link to the end of the links array to create an empty field\n        // on the link edit form for adding new links\n        const emptyLink: NamespaceLinkType = { name: '', url: '' };\n        response.data.links.push(emptyLink);\n        this.setState({ loading: false, namespace: response.data });\n      })\n      .catch(() => {\n        this.setState({ unauthorized: true, loading: false });\n      });\n  }\n\n  private saveNamespace() {\n    this.setState({ saving: true }, () => {\n      const namespace = { ...this.state.namespace };\n      const setLinks: NamespaceLinkType[] = [];\n\n      // remove any empty links from the list before saving\n      for (const link of namespace.links) {\n        if (link.url !== '' || link.name !== '') {\n          setLinks.push(link);\n        }\n      }\n\n      namespace.links = setLinks;\n\n      MyNamespaceAPI.update(this.state.namespace.name, namespace)\n        .then((result) => {\n          this.setState(\n            {\n              namespace: result.data,\n              errorMessages: {},\n              saving: false,\n              unsavedData: false,\n              redirect: formatPath(Paths.myCollections, {\n                namespace: this.state.namespace.name,\n              }),\n            },\n            () =>\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'success',\n                  title: (\n                    <Trans>\n                      Saved changes to namespace &quot;\n                      {this.state.namespace.name}&quot;.\n                    </Trans>\n                  ),\n                },\n              ]),\n          );\n        })\n        .catch((error) => {\n          const result = error.response;\n          if (result.status === 400) {\n            this.setState({\n              errorMessages: mapErrorMessages(error),\n              saving: false,\n            });\n          } else if (result.status === 404) {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: t`Changes to namespace \"${this.state.namespace.name}\" could not be saved.`,\n                description: errorMessage(result.status, result.statusText),\n              }),\n              saving: false,\n            });\n          }\n        });\n    });\n  }\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private cancel() {\n    this.setState({\n      redirect: formatPath(Paths.myCollections, {\n        namespace: this.state.namespace.name,\n      }),\n    });\n  }\n}\n\nEditNamespace.contextType = AppContext;\n\nexport default withRouter(EditNamespace);\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport './namespace-detail.scss';\n\nimport {\n  withRouter,\n  RouteComponentProps,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  DropdownItem,\n  Tooltip,\n  Text,\n  Checkbox,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport ReactMarkdown from 'react-markdown';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  NamespaceAPI,\n  MyNamespaceAPI,\n  NamespaceType,\n} from 'src/api';\n\nimport {\n  CollectionFilter,\n  CollectionList,\n  ImportModal,\n  LoadingPageWithHeader,\n  Main,\n  Pagination,\n  PartnerHeader,\n  EmptyStateNoData,\n  RepoSelector,\n  StatefulDropdown,\n  ClipboardCopy,\n  AlertList,\n  closeAlertMixin,\n  DeleteModal,\n  AlertType,\n} from 'src/components';\n\nimport {\n  ParamHelper,\n  getRepoUrl,\n  filterIsSet,\n  errorMessage,\n} from 'src/utilities';\nimport { Constants } from 'src/constants';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  collections: CollectionListType[];\n  namespace: NamespaceType;\n  params: {\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tab?: string;\n    keywords?: string;\n    namespace?: string;\n  };\n  redirect: string;\n  itemCount: number;\n  showImportModal: boolean;\n  warning: string;\n  updateCollection: CollectionListType;\n  showControls: boolean;\n  isOpenNamespaceModal: boolean;\n  isNamespaceEmpty: boolean;\n  confirmDelete: boolean;\n  isNamespacePending: boolean;\n  alerts: AlertType[];\n}\n\ninterface IProps extends RouteComponentProps {\n  selectedRepo: string;\n}\n\nexport class NamespaceDetail extends React.Component<IProps, IState> {\n  nonAPIParams = ['tab'];\n\n  // namespace is a positional url argument, so don't include it in the\n  // query params\n  nonQueryStringParams = ['namespace'];\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    params['namespace'] = props.match.params['namespace'];\n\n    this.state = {\n      collections: [],\n      namespace: null,\n      params: params,\n      redirect: null,\n      itemCount: 0,\n      showImportModal: false,\n      warning: '',\n      updateCollection: null,\n      showControls: false, // becomes true when my-namespaces doesn't 404\n      isOpenNamespaceModal: false,\n      isNamespaceEmpty: false,\n      confirmDelete: false,\n      isNamespacePending: false,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadAll();\n\n    this.setState({ alerts: this.context.alerts || [] });\n  }\n\n  componentWillUnmount() {\n    this.context.setAlerts([]);\n  }\n\n  render() {\n    const {\n      collections,\n      namespace,\n      params,\n      redirect,\n      itemCount,\n      showImportModal,\n      warning,\n      updateCollection,\n      isOpenNamespaceModal,\n      confirmDelete,\n      isNamespacePending,\n    } = this.state;\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n\n    if (!namespace) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const tabs = [{ id: 'collections', name: t`Collections` }];\n\n    if (this.state.showControls) {\n      tabs.push({ id: 'cli-configuration', name: t`CLI configuration` });\n    }\n    const tab = params['tab'] || 'collections';\n\n    if (namespace.resources) {\n      tabs.push({ id: 'resources', name: t`Resources` });\n    }\n\n    const repositoryUrl = getRepoUrl('inbound-' + namespace.name);\n\n    const noData = itemCount === 0 && !filterIsSet(params, ['keywords']);\n\n    const updateParams = (params) =>\n      this.updateParams(params, () => this.loadCollections());\n\n    const ignoredParams = [\n      'namespace',\n      'page',\n      'page_size',\n      'sort',\n      'tab',\n      'view_type',\n    ];\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <ImportModal\n          isOpen={showImportModal}\n          onUploadSuccess={() =>\n            this.setState({\n              redirect: formatPath(\n                Paths.myImports,\n                {},\n                {\n                  namespace: namespace.name,\n                },\n              ),\n            })\n          }\n          // onCancel\n          setOpen={(isOpen, warn) => this.toggleImportModal(isOpen, warn)}\n          collection={updateCollection}\n          namespace={namespace.name}\n        />\n        {isOpenNamespaceModal && (\n          <DeleteModal\n            spinner={isNamespacePending}\n            cancelAction={this.closeModal}\n            deleteAction={this.deleteNamespace}\n            title={t`Delete namespace?`}\n            isDisabled={!confirmDelete || isNamespacePending}\n          >\n            <>\n              <Text className='delete-namespace-modal-message'>\n                <Trans>\n                  Deleting <b>{namespace.name}</b> and its data will be lost.\n                </Trans>\n              </Text>\n              <Checkbox\n                isChecked={confirmDelete}\n                onChange={(val) => this.setState({ confirmDelete: val })}\n                label={t`I understand that this action cannot be undone.`}\n                id='delete_confirm'\n              />\n            </>\n          </DeleteModal>\n        )}\n        {warning ? (\n          <Alert\n            className='hub-c-alert-namespace'\n            variant='warning'\n            title={warning}\n            actionClose={\n              <AlertActionCloseButton\n                onClose={() => this.setState({ warning: '' })}\n              />\n            }\n          ></Alert>\n        ) : null}\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[namespaceBreadcrumb, { name: namespace.name }]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n          pageControls={this.renderPageControls()}\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={this.props.match.path as Paths} // Paths.namespaceByRepo or Paths.myCollectionsByRepo\n              pathParams={{ namespace: namespace.name }}\n            />\n          }\n          filters={\n            tab.toLowerCase() === 'collections' ? (\n              <div className='hub-toolbar-wrapper namespace-detail'>\n                <div className='toolbar'>\n                  <CollectionFilter\n                    ignoredParams={ignoredParams}\n                    params={params}\n                    updateParams={updateParams}\n                  />\n\n                  <div className='hub-pagination-container'>\n                    <Pagination\n                      params={params}\n                      updateParams={updateParams}\n                      count={itemCount}\n                      isTop\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : null\n          }\n        ></PartnerHeader>\n        <Main>\n          {tab.toLowerCase() === 'collections' ? (\n            noData ? (\n              <EmptyStateNoData\n                title={t`No collections yet`}\n                description={t`Collections will appear once uploaded`}\n                button={\n                  this.state.showControls && (\n                    <Button\n                      onClick={() => this.setState({ showImportModal: true })}\n                    >\n                      {t`Upload collection`}\n                    </Button>\n                  )\n                }\n              />\n            ) : (\n              <section className='body'>\n                <CollectionList\n                  updateParams={updateParams}\n                  params={params}\n                  ignoredParams={ignoredParams}\n                  collections={collections}\n                  itemCount={itemCount}\n                  showControls={this.state.showControls}\n                  handleControlClick={(id, action) =>\n                    this.handleCollectionAction(id, action)\n                  }\n                  repo={this.context.selectedRepo}\n                />\n              </section>\n            )\n          ) : null}\n          {tab.toLowerCase() === 'cli-configuration' ? (\n            <section className='body'>\n              <div>\n                <div>\n                  <Trans>\n                    <b>Note:</b> Use this URL to configure ansible-galaxy to\n                    upload collections to this namespace. More information on\n                    ansible-galaxy configurations can be found{' '}\n                    <a\n                      href='https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#configuring-the-ansible-galaxy-client'\n                      target='_blank'\n                      rel='noreferrer'\n                    >\n                      here\n                    </a>\n                    <span>&nbsp;</span>\n                    <ExternalLinkAltIcon />.\n                  </Trans>\n                </div>\n                <ClipboardCopy isReadOnly>{repositoryUrl}</ClipboardCopy>\n              </div>\n            </section>\n          ) : null}\n          {tab.toLowerCase() === 'resources'\n            ? this.renderResources(namespace)\n            : null}\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private handleCollectionAction(id, action) {\n    const collection = this.state.collections.find((x) => x.id === id);\n\n    switch (action) {\n      case 'upload':\n        this.setState({\n          updateCollection: collection,\n          showImportModal: true,\n        });\n        break;\n      case 'deprecate':\n        CollectionAPI.setDeprecation(\n          collection,\n          !collection.deprecated,\n          this.context.selectedRepo,\n        )\n          .then(() => this.loadCollections())\n          .catch(() => {\n            this.setState({\n              warning: t`API Error: Failed to set deprecation.`,\n            });\n          });\n        break;\n    }\n  }\n\n  private renderResources(namespace: NamespaceType) {\n    return (\n      <div className='pf-c-content preview'>\n        <ReactMarkdown>{namespace.resources}</ReactMarkdown>\n      </div>\n    );\n  }\n\n  private loadCollections() {\n    CollectionAPI.list(\n      {\n        ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n      },\n      this.context.selectedRepo,\n    ).then((result) => {\n      this.setState({\n        collections: result.data.data,\n        itemCount: result.data.meta.count,\n      });\n    });\n  }\n\n  private loadAll() {\n    Promise.all([\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n        },\n        this.context.selectedRepo,\n      ),\n      NamespaceAPI.get(this.props.match.params['namespace']),\n      MyNamespaceAPI.get(this.props.match.params['namespace']).catch((e) => {\n        // TODO this needs fixing on backend to return nothing in these cases with 200 status\n        // if view only mode is enabled disregard errors and hope\n        if (\n          this.context.user.is_anonymous &&\n          this.context.settings.GALAXY_ENABLE_UNAUTHENTICATED_COLLECTION_ACCESS\n        ) {\n          return null;\n        }\n        // expecting 404 - it just means we can not edit the namespace (unless both NamespaceAPI and MyNamespaceAPI fail)\n        return e.response && e.response.status === 404\n          ? null\n          : Promise.reject(e);\n      }),\n    ])\n      .then((val) => {\n        this.setState({\n          collections: val[0].data.data,\n          itemCount: val[0].data.meta.count,\n          namespace: val[1].data,\n          showControls: !!val[2],\n        });\n\n        this.loadAllRepos(val[0].data.meta.count);\n      })\n      .catch(() => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private loadAllRepos(currentRepoCount) {\n    // get collections in namespace from each repo\n    // except the one we already have\n    const repoPromises = Object.keys(Constants.REPOSITORYNAMES)\n      .filter((repo) => repo !== this.context.selectedRepo)\n      .map((repo) =>\n        CollectionAPI.list(\n          { namespace: this.props.match.params['namespace'] },\n          repo,\n        ),\n      );\n\n    Promise.all(repoPromises)\n      .then((results) =>\n        this.setState({\n          isNamespaceEmpty:\n            results.every((val) => val.data.meta.count === 0) &&\n            currentRepoCount === 0,\n        }),\n      )\n      .catch((err) => {\n        const { status, statusText } = err.response;\n        this.setState({\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Collection repositories could not be displayed.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n\n  private renderPageControls() {\n    const { collections } = this.state;\n    const dropdownItems = [\n      <DropdownItem\n        key='1'\n        component={\n          <Link\n            to={formatPath(Paths.editNamespace, {\n              namespace: this.state.namespace.name,\n            })}\n          >\n            {t`Edit namespace`}\n          </Link>\n        }\n      />,\n      this.context.user.model_permissions.delete_namespace && (\n        <React.Fragment key={'2'}>\n          {this.state.isNamespaceEmpty ? (\n            <DropdownItem\n              onClick={() => this.setState({ isOpenNamespaceModal: true })}\n            >\n              {t`Delete namespace`}\n            </DropdownItem>\n          ) : (\n            <Tooltip\n              isVisible={false}\n              content={\n                <Trans>\n                  Cannot delete namespace until <br />\n                  collections&apos; dependencies have <br />\n                  been deleted\n                </Trans>\n              }\n              position='left'\n            >\n              <DropdownItem isDisabled>{t`Delete namespace`}</DropdownItem>\n            </Tooltip>\n          )}\n        </React.Fragment>\n      ),\n      <DropdownItem\n        key='3'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: this.state.namespace.name,\n              },\n            )}\n          >\n            {t`Imports`}\n          </Link>\n        }\n      />,\n    ].filter(Boolean);\n    if (!this.state.showControls) {\n      return <div className='hub-namespace-page-controls'></div>;\n    }\n    return (\n      <div className='hub-namespace-page-controls' data-cy='kebab-toggle'>\n        {' '}\n        {collections.length !== 0 && (\n          <Button onClick={() => this.setState({ showImportModal: true })}>\n            {t`Upload collection`}\n          </Button>\n        )}\n        {dropdownItems.length > 0 && <StatefulDropdown items={dropdownItems} />}\n      </div>\n    );\n  }\n\n  private toggleImportModal(isOpen: boolean, warning?: string) {\n    const newState = { showImportModal: isOpen };\n    if (warning) {\n      newState['warning'] = warning;\n    }\n\n    if (!isOpen) {\n      newState['updateCollection'] = null;\n    }\n\n    this.setState(newState);\n  }\n\n  private deleteNamespace = () => {\n    const {\n      namespace: { name },\n    } = this.state;\n    this.setState({ isNamespacePending: true }, () =>\n      NamespaceAPI.delete(name)\n        .then(() => {\n          this.setState({\n            redirect: formatPath(Paths.namespaces, {}),\n            confirmDelete: false,\n            isNamespacePending: false,\n          });\n          this.context.setAlerts([\n            ...this.context.alerts,\n            {\n              variant: 'success',\n              title: (\n                <Trans>\n                  Namespace &quot;{name}&quot; has been successfully deleted.\n                </Trans>\n              ),\n            },\n          ]);\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              isOpenNamespaceModal: false,\n              confirmDelete: false,\n              isNamespacePending: false,\n            },\n            () => {\n              this.setState({\n                alerts: [\n                  ...this.state.alerts,\n                  {\n                    variant: 'danger',\n                    title: t`Namespace \"${name}\" could not be deleted.`,\n                    description: errorMessage(status, statusText),\n                  },\n                ],\n              });\n            },\n          );\n        }),\n    );\n  };\n\n  private closeModal = () => {\n    this.setState({ isOpenNamespaceModal: false, confirmDelete: false });\n  };\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceDetail.contextType = AppContext;\n\nexport default withRouter(NamespaceDetail);\n"],"names":["EditNamespace","props","params","ParamHelper","location","search","state","loading","alerts","namespace","userId","newLinkURL","newLinkName","errorMessages","saving","redirect","unsavedData","unauthorized","this","setState","ActiveUserAPI","then","result","account_number","loadNamespace","e","response","status","statusText","formatPath","Paths","match","repo","context","selectedRepo","setAlerts","variant","title","user","username","description","errorMessage","tabs","id","name","Redirect","push","to","breadcrumbs","namespaceBreadcrumb","url","updateParams","p","closeAlert","i","className","tab","toLowerCase","updateNamespace","Form","ActionGroup","Button","onClick","saveNamespace","cancel","Spinner","style","color","MyNamespaceAPI","data","links","setLinks","link","error","mapErrorMessages","concat","closeAlertMixin","React","contextType","AppContext","withRouter","NamespaceDetail","isNamespacePending","NamespaceAPI","confirmDelete","isOpenNamespaceModal","collections","itemCount","showImportModal","warning","updateCollection","showControls","isNamespaceEmpty","loadAll","resources","repositoryUrl","getRepoUrl","noData","filterIsSet","loadCollections","ignoredParams","isOpen","onUploadSuccess","setOpen","warn","toggleImportModal","collection","spinner","cancelAction","closeModal","deleteAction","deleteNamespace","isDisabled","Text","Checkbox","isChecked","onChange","val","label","Alert","actionClose","AlertActionCloseButton","onClose","pageControls","renderPageControls","contextSelector","path","pathParams","filters","count","isTop","button","handleControlClick","action","handleCollectionAction","href","target","rel","isReadOnly","renderResources","find","x","CollectionAPI","deprecated","nonAPIParams","meta","Promise","all","is_anonymous","settings","GALAXY_ENABLE_UNAUTHENTICATED_COLLECTION_ACCESS","reject","loadAllRepos","currentRepoCount","repoPromises","Object","keys","Constants","filter","map","results","every","err","nonQueryStringParams","dropdownItems","DropdownItem","key","component","Link","model_permissions","delete_namespace","Tooltip","isVisible","content","position","Boolean","length","items","newState"],"sourceRoot":""}
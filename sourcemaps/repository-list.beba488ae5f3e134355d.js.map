{"version":3,"file":"js/repository-list.dbd45ac397ece97b22e8.js","mappings":"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","sources":["webpack:///./src/containers/repositories/repository-list.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport {\n  BaseHeader,\n  LoadingPageSpinner,\n  Main,\n  Tabs,\n  RemoteRepositoryTable,\n  LocalRepositoryTable,\n  RemoteForm,\n  EmptyStateNoData,\n} from 'src/components';\nimport { ParamHelper, mapErrorMessages } from 'src/utilities';\nimport { Constants } from 'src/constants';\nimport {\n  RemoteAPI,\n  RemoteType,\n  DistributionAPI,\n  MyDistributionAPI,\n  DistributionType,\n} from 'src/api';\nimport { AppContext } from 'src/loaders/app-context';\n\nexport class Repository {\n  name: string;\n  url: string;\n  token: string;\n  ssoUrl: string;\n  yaml: string;\n  sync: boolean;\n}\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n    tab?: string;\n  };\n  itemCount: number;\n  loading: boolean;\n  showRemoteFormModal: boolean;\n  errorMessages: Object;\n\n  content: RemoteType[] | DistributionType[];\n  remoteToEdit: RemoteType;\n}\n\nclass RepositoryList extends React.Component<RouteComponentProps, IState> {\n  nonQueryStringParams = ['repository'];\n  // Used to save a copy of the remote before it's edited. This can be used to determine\n  // which fields were changed when a user hits save.\n  unModifiedRemote: RemoteType;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['tab']) {\n      params['tab'] = 'local';\n    }\n\n    if (\n      !params['tab'] &&\n      DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE\n    ) {\n      params['tab'] = 'local';\n    }\n\n    this.state = {\n      itemCount: 1,\n      params: params,\n      loading: false,\n      showRemoteFormModal: false,\n      content: [],\n      remoteToEdit: undefined,\n      errorMessages: {},\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  render() {\n    const {\n      params,\n      loading,\n      content,\n      remoteToEdit,\n      showRemoteFormModal,\n      errorMessages,\n    } = this.state;\n\n    const tabs = [_`Local`, _`Remote`];\n    return (\n      <React.Fragment>\n        {remoteToEdit && showRemoteFormModal && (\n          <RemoteForm\n            remote={remoteToEdit}\n            updateRemote={(r: RemoteType) => this.setState({ remoteToEdit: r })}\n            saveRemote={() => {\n              const { remoteToEdit } = this.state;\n\n              try {\n                const distro_path =\n                  remoteToEdit.repositories[0].distributions[0].base_path;\n\n                RemoteAPI.smartUpdate(\n                  distro_path,\n                  remoteToEdit,\n                  this.unModifiedRemote,\n                )\n                  .then((r) => {\n                    this.setState(\n                      {\n                        errorMessages: {},\n                        showRemoteFormModal: false,\n                        remoteToEdit: undefined,\n                      },\n                      () => this.loadContent(),\n                    );\n                  })\n                  .catch((err) =>\n                    this.setState({ errorMessages: mapErrorMessages(err) }),\n                  );\n              } catch {\n                this.setState({\n                  errorMessages: {\n                    __nofield: _`Can't update remote without a distribution attached to it.`,\n                  },\n                });\n              }\n            }}\n            errorMessages={errorMessages}\n            showModal={showRemoteFormModal}\n            closeModal={() =>\n              this.setState({ showRemoteFormModal: false, errorMessages: {} })\n            }\n          />\n        )}\n        <BaseHeader title={_`Repo Management`}>\n          {DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE &&\n          !loading ? (\n            <div className='header-bottom'>\n              <div className='tab-link-container'>\n                <div className='tabs'>\n                  <Tabs\n                    tabs={tabs}\n                    params={params}\n                    updateParams={(p) => {\n                      // empty the content before updating the params to prevent\n                      // rendering from breaking when the wrong content is loaded\n                      this.setState({ content: [] }, () =>\n                        this.updateParams(p, () => this.loadContent()),\n                      );\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </BaseHeader>\n        {loading ? <LoadingPageSpinner /> : this.renderContent(params, content)}\n      </React.Fragment>\n    );\n  }\n\n  private renderContent(params, content) {\n    const { user } = this.context;\n    // Dont show remotes on insights\n    if (\n      DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE ||\n      (!!params.tab && params.tab.toLowerCase() === 'local')\n    ) {\n      return (\n        <Main className='repository-list'>\n          <section className='body'>\n            <LocalRepositoryTable\n              repositories={content}\n              updateParams={this.updateParams}\n            />\n          </section>\n        </Main>\n      );\n    }\n    if (!!params.tab && params.tab.toLowerCase() === 'remote') {\n      return content.length === 0 ? (\n        <EmptyStateNoData\n          title={_`No remote repositories yet`}\n          description={_`Remote repositories will appear once added`}\n        />\n      ) : (\n        <Main className='repository-list'>\n          <section className='body'>\n            <RemoteRepositoryTable\n              remotes={content}\n              updateParams={this.updateParams}\n              editRemote={(remote: RemoteType) =>\n                this.selectRemoteToEdit(remote)\n              }\n              syncRemote={(distro) =>\n                RemoteAPI.sync(distro).then((result) => this.loadContent())\n              }\n              user={user}\n              refreshRemotes={this.refreshContent}\n            />\n          </section>\n        </Main>\n      );\n    }\n  }\n\n  private selectRemoteToEdit = (remote: RemoteType) => {\n    // save a copy of the remote to diff against\n    this.unModifiedRemote = { ...remote };\n\n    this.setState({\n      // create a copy of the remote to pass to the edit form, so that the\n      // list of remotes doesn't get updated by accident.\n      remoteToEdit: { ...remote },\n      showRemoteFormModal: true,\n    });\n  };\n\n  private refreshContent = () => {\n    this.loadContent(false);\n  };\n\n  private loadContent = (showLoading = true) => {\n    const { params } = this.state;\n    this.setState({ loading: showLoading }, () => {\n      if (params['tab'] == 'remote') {\n        RemoteAPI.list(\n          ParamHelper.getReduced(params, this.nonQueryStringParams),\n        ).then((result) => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      } else {\n        let APIClass = DistributionAPI;\n\n        if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE) {\n          APIClass = MyDistributionAPI;\n        }\n\n        APIClass.list().then((result) => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      }\n    });\n  };\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n}\n\nexport default withRouter(RepositoryList);\nRepositoryList.contextType = AppContext;\n"],"names":["Repository","RepositoryList","props","remote","unModifiedRemote","setState","remoteToEdit","showRemoteFormModal","loadContent","showLoading","params","state","loading","RemoteAPI","ParamHelper","nonQueryStringParams","then","result","content","data","itemCount","meta","count","APIClass","DistributionAPI","DEPLOYMENT_MODE","Constants","MyDistributionAPI","list","location","search","undefined","errorMessages","this","tabs","_","updateRemote","r","saveRemote","distro_path","repositories","distributions","base_path","err","mapErrorMessages","__nofield","showModal","closeModal","title","className","updateParams","p","renderContent","user","context","tab","toLowerCase","length","description","remotes","editRemote","selectRemoteToEdit","syncRemote","distro","refreshRemotes","refreshContent","React","withRouter","contextType","AppContext"],"sourceRoot":""}
{"version":3,"file":"js/search.9d7d8d6f4819c1571380.js","mappings":"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","sources":["webpack:///./src/containers/search/search.tsx"],"sourcesContent":["import * as React from 'react';\nimport './search.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { DataList, Switch } from '@patternfly/react-core';\nimport {\n  BaseHeader,\n  CardListSwitcher,\n  CollectionCard,\n  CollectionFilter,\n  CollectionListItem,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LoadingPageSpinner,\n  Pagination,\n  RepoSelector,\n} from 'src/components';\nimport {\n  CollectionAPI,\n  CollectionListType,\n  SyncListType,\n  MySyncListAPI,\n} from 'src/api';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { filterIsSet } from 'src/utilities';\nimport { Paths } from 'src/paths';\n\ninterface IState {\n  collections: CollectionListType[];\n  numberOfResults: number;\n  params: {\n    page?: number;\n    page_size?: number;\n    keywords?: string;\n    tags?: string[];\n    view_type?: string;\n  };\n  loading: boolean;\n  synclist: SyncListType;\n}\n\nclass Search extends React.Component<RouteComponentProps, IState> {\n  tags: string[];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = Constants.CARD_DEFAULT_PAGE_SIZE;\n    }\n\n    // Load view type from local storage if it's not set. This allows a\n    // user's view type preference to persist\n    if (!params['view_type']) {\n      params['view_type'] = localStorage.getItem(\n        Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n      );\n    }\n\n    this.state = {\n      collections: [],\n      params: params,\n      numberOfResults: 0,\n      loading: true,\n      synclist: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.queryCollections();\n\n    if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE)\n      this.getSynclist();\n  }\n\n  render() {\n    const { collections, params, numberOfResults } = this.state;\n    const noData =\n      collections.length === 0 && !filterIsSet(params, ['keywords', 'tags']);\n\n    const updateParams = (p) =>\n      this.updateParams(p, () => this.queryCollections());\n\n    return (\n      <div className='search-page'>\n        <BaseHeader\n          className='header'\n          title={_`Collections`}\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={Paths.searchByRepo}\n            />\n          }\n        >\n          {!noData && (\n            <div className='toolbar-wrapper'>\n              <div className='toolbar'>\n                <CollectionFilter\n                  ignoredParams={['page', 'page_size', 'sort', 'view_type']}\n                  params={params}\n                  updateParams={updateParams}\n                />\n\n                <div className='pagination-container'>\n                  <div className='card-list-switcher'>\n                    <CardListSwitcher\n                      size='sm'\n                      params={params}\n                      updateParams={(p) =>\n                        this.updateParams(p, () =>\n                          // Note, we have to use this.state.params instead\n                          // of params in the callback because the callback\n                          // executes before the page can re-run render\n                          // which means params doesn't contain the most\n                          // up to date state\n                          localStorage.setItem(\n                            Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n                            this.state.params.view_type,\n                          ),\n                        )\n                      }\n                    />\n                  </div>\n\n                  <Pagination\n                    params={params}\n                    updateParams={updateParams}\n                    count={numberOfResults}\n                    perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                    isTop\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        {noData ? (\n          <EmptyStateNoData\n            title={_`No collections yet`}\n            description={_`Collections will appear once uploaded`}\n          />\n        ) : (\n          <React.Fragment>\n            <section className='collection-container'>\n              {this.renderCollections(collections, params, updateParams)}\n            </section>\n            <section className='footer'>\n              <Pagination\n                params={params}\n                updateParams={(p) =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                count={numberOfResults}\n              />\n            </section>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n\n  private renderCollections(collections, params, updateParams) {\n    if (this.state.loading) {\n      return <LoadingPageSpinner></LoadingPageSpinner>;\n    }\n    if (collections.length === 0) {\n      return (\n        <EmptyStateFilter\n          clearAllFilters={() => {\n            ParamHelper.clearAllFilters({\n              params,\n              ignoredParams: ['page', 'page_size', 'sort', 'view_type'],\n              updateParams,\n            });\n          }}\n        />\n      );\n    }\n    if (params.view_type === 'list') {\n      return this.renderList(collections);\n    } else {\n      return this.renderCards(collections);\n    }\n  }\n\n  private renderCards(collections) {\n    return (\n      <div className='cards'>\n        {collections.map((c) => {\n          return (\n            <CollectionCard\n              className='card'\n              key={c.id}\n              {...c}\n              footer={this.renderSyncToggle(c.name, c.namespace.name)}\n              repo={this.context.selectedRepo}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  private renderSyncToggle(name: string, namespace: string): React.ReactNode {\n    const { synclist } = this.state;\n    if (!synclist) {\n      return null;\n    }\n    return (\n      <Switch\n        id={namespace + '.' + name}\n        className='sync-toggle'\n        label={_`Sync`}\n        isChecked={this.isCollectionSynced(name, namespace)}\n        onChange={() => this.toggleCollectionSync(name, namespace)}\n      />\n    );\n  }\n\n  private toggleCollectionSync(name: string, namespace: string) {\n    const synclist = { ...this.state.synclist };\n\n    const colIndex = synclist.collections.findIndex(\n      (el) => el.name === name && el.namespace === namespace,\n    );\n\n    if (colIndex < 0) {\n      synclist.collections.push({ name: name, namespace: namespace });\n    } else {\n      synclist.collections.splice(colIndex, 1);\n    }\n\n    MySyncListAPI.update(synclist.id, synclist).then((response) => {\n      this.setState({ synclist: response.data });\n      MySyncListAPI.curate(synclist.id).then(() => null);\n    });\n  }\n\n  private isCollectionSynced(name: string, namespace: string): boolean {\n    const { synclist } = this.state;\n    const found = synclist.collections.find(\n      (el) => el.name === name && el.namespace === namespace,\n    );\n\n    if (synclist.policy === 'include') {\n      return !(found === undefined);\n    } else {\n      return found === undefined;\n    }\n  }\n\n  private renderList(collections) {\n    return (\n      <div className='list-container'>\n        <div className='list'>\n          <DataList className='data-list' aria-label={_`List of Collections`}>\n            {collections.map((c) => (\n              <CollectionListItem\n                showNamespace={true}\n                key={c.id}\n                {...c}\n                controls={this.renderSyncToggle(c.name, c.namespace.name)}\n                repo={this.context.selectedRepo}\n              />\n            ))}\n          </DataList>\n        </div>\n      </div>\n    );\n  }\n\n  private getSynclist() {\n    MySyncListAPI.list().then((result) => {\n      // ignore results if more than 1 is returned\n      // TODO: should we throw an error for this or just ignore it?\n      if (result.data.meta.count === 1) {\n        this.setState({ synclist: result.data.data[0] });\n      } else {\n        console.error(\n          `my-synclist returned ${result.data.meta.count} synclists`,\n        );\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () => {\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, ['view_type']),\n          deprecated: false,\n        },\n        this.context.selectedRepo,\n      ).then((result) => {\n        this.setState({\n          collections: result.data.data,\n          numberOfResults: result.data.meta.count,\n          loading: false,\n        });\n      });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(Search);\n\nSearch.contextType = AppContext;\n"],"names":["Search","props","params","ParamHelper","location","search","Constants","localStorage","getItem","state","collections","numberOfResults","loading","synclist","undefined","this","queryCollections","DEPLOYMENT_MODE","getSynclist","noData","length","filterIsSet","updateParams","p","className","title","_","contextSelector","selectedRepo","context","path","Paths","ignoredParams","size","setItem","view_type","count","perPageOptions","isTop","description","renderCollections","clearAllFilters","renderList","renderCards","map","c","key","id","footer","renderSyncToggle","name","namespace","repo","label","isChecked","isCollectionSynced","onChange","toggleCollectionSync","colIndex","findIndex","el","push","splice","MySyncListAPI","then","response","setState","data","found","find","policy","showNamespace","controls","result","meta","console","error","CollectionAPI","deprecated","React","withRouter","contextType","AppContext"],"sourceRoot":""}
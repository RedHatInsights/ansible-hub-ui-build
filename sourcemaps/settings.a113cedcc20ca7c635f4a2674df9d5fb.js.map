{"version":3,"file":"js/settings.1658650439475.0a5fa8c9664f64aca26a.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx","webpack:///./src/containers/task-management/task-list-view.tsx","webpack:///./src/containers/task-management/task_detail.tsx","webpack:///./src/containers/token/token-insights.tsx"],"sourcesContent":["import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n  Label,\n  ButtonVariant,\n} from '@patternfly/react-core';\n\nimport {\n  ExclamationTriangleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  DownloadIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  CollectionVersionAPI,\n  CollectionVersion,\n  TaskAPI,\n  CertificateUploadAPI,\n  Repositories,\n  CollectionAPI,\n} from 'src/api';\nimport {\n  errorMessage,\n  filterIsSet,\n  ParamHelper,\n  parsePulpIDFromURL,\n  waitForTask,\n} from 'src/utilities';\nimport {\n  LoadingPageWithHeader,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n  UploadSingCertificateModal,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate: CollectionVersion;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: undefined,\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !this.context.user ||\n      this.context.user.is_anonymous ||\n      !this.context.user.model_permissions.move_collection\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`}></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-certification-dashboard-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections());\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: t`Approved`,\n                      [Constants.NEEDSREVIEW]: t`Needs Review`,\n                      [Constants.NOTCERTIFIED]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      const { display_signatures } = this.context?.featureFlags || {};\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && version.sign_state === 'signed'\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context?.featureFlags || {};\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {version.sign_state === 'unsigned' &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr key={index} data-cy='CertificationDashboard-row'>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(version.namespace, version.name, version.version);\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        {this.renderButtons(version)}\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context?.featureFlags || {};\n    if (this.state.updatingVersions.includes(version)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && version.sign_state === 'unsigned';\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button onClick={() => this.openUploadCertificateModal(version)}>\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        onClick={() =>\n          this.updateCertification(\n            version,\n            Constants.NEEDSREVIEW,\n            Constants.PUBLISHED,\n          )\n        }\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true, Constants.PUBLISHED),\n            rejectDropDown(false, Constants.PUBLISHED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false, Constants.NOTCERTIFIED),\n            rejectDropDown(true, Constants.NOTCERTIFIED),\n            importsLink,\n          ]}\n        />\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            rejectDropDown(false, Constants.NEEDSREVIEW),\n            importsLink,\n          ]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersion) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private async submitCertificate(file: File) {\n    const version = this.state.versionToUploadCertificate;\n    const response = await Repositories.getRepository({\n      name: 'staging',\n    });\n    const signed_collection = `${PULP_API_BASE_PATH}content/ansible/collection_versions/${version.id}/`;\n\n    CertificateUploadAPI.upload({\n      file,\n      repository: response.data.results[0].pulp_href,\n      signed_collection,\n    })\n      .then((result) => {\n        waitForTask(parsePulpIDFromURL(result.data.task))\n          .then(() => {\n            this.updateList();\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'success',\n                title: t`Certificate for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully uploaded.`,\n              }),\n            });\n          })\n          .catch((error) => {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: t`The certificate for \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                description: error,\n              }),\n            });\n          });\n      })\n      .catch((error) => {\n        const { status, statusText } = error.response;\n        this.setState({\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: t`The certificate for \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n            description: errorMessage(status, statusText),\n          }),\n        });\n      })\n      .finally(() => {\n        this.closeUploadCertificateModal();\n      });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: undefined,\n    });\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    const { alerts } = this.state;\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: [],\n      },\n      () =>\n        CollectionVersionAPI.setRepository(\n          version.namespace,\n          version.name,\n          version.version,\n          originalRepo,\n          destinationRepo,\n        )\n          .then(\n            (result) =>\n              // Since pulp doesn't reply with the new object, perform a\n              // second query to get the updated data\n              {\n                this.setState({\n                  updatingVersions: [version],\n                });\n                this.waitForUpdate(result.data.remove_task_id, version);\n              },\n            this.addAlert(\n              <Trans>\n                Certification status for collection &quot;{version.namespace}{' '}\n                {version.name} v{version.version}&quot; has been successfully\n                updated.\n              </Trans>,\n              'success',\n            ),\n          )\n          .catch((error) => {\n            const { status, statusText } = error.response;\n            this.setState({\n              updatingVersions: [],\n              alerts: alerts.concat({\n                variant: 'danger',\n                title: t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                description: errorMessage(status, statusText),\n              }),\n            });\n          }),\n    );\n  }\n\n  private waitForUpdate(taskId, version) {\n    return TaskAPI.get(taskId).then(async (result) => {\n      if (result.data.state === 'waiting' || result.data.state === 'running') {\n        await new Promise((r) => setTimeout(r, 500));\n        this.waitForUpdate(taskId, version);\n      } else if (result.data.state === 'completed') {\n        return this.updateList();\n      } else {\n        this.setState({\n          updatingVersions: [],\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n            description: errorMessage(500, t`Internal Server Error`),\n          }),\n        });\n      }\n    });\n  }\n\n  private updateList() {\n    return CollectionVersionAPI.list(this.state.params).then(async (result) => {\n      this.setState({\n        versions: result.data.data,\n        updatingVersions: [],\n      });\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        });\n      }),\n    );\n  }\n\n  private download(namespace: string, name: string, version: string) {\n    CollectionAPI.getDownloadURL('staging', namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n","import { t, Trans } from '@lingui/macro';\nimport { i18n } from '@lingui/core';\n\nimport * as React from 'react';\nimport './task.scss';\nimport { Constants } from 'src/constants';\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  Button,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { ParamHelper, filterIsSet, errorMessage } from '../../utilities';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  closeAlertMixin,\n  ConfirmModal,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  Tooltip,\n  StatusIndicator,\n} from 'src/components';\nimport { TaskManagementAPI } from 'src/api';\nimport { TaskType } from 'src/api/response-types/task';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: Array<TaskType>;\n  itemCount: number;\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  selectedTask: TaskType;\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class TaskListView extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      cancelModalVisible: false,\n      selectedTask: null,\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.queryTasks();\n    }\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      items,\n      alerts,\n      cancelModalVisible,\n      unauthorised,\n    } = this.state;\n\n    const noData =\n      items.length === 0 && !filterIsSet(params, ['name__contains', 'state']);\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader title={t`Task Management`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No tasks yet`}\n            description={t`Tasks will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-task-list'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) => {\n                              p['page'] = 1;\n                              this.updateParams(p, () => this.queryTasks());\n                            }}\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name__contains',\n                                title: t`Task name`,\n                              },\n                              {\n                                id: 'state',\n                                title: t`Status`,\n                                inputType: 'select',\n                                options: [\n                                  {\n                                    id: 'completed',\n                                    title: t`Completed`,\n                                  },\n                                  {\n                                    id: 'failed',\n                                    title: t`Failed`,\n                                  },\n                                  {\n                                    id: 'running',\n                                    title: t`Running`,\n                                  },\n                                  {\n                                    id: 'waiting',\n                                    title: t`Waiting`,\n                                  },\n                                ],\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.queryTasks())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.queryTasks());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name__contains: t`Task name`,\n                      state: t`Status`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryTasks())\n                  }\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (items.length === 0) {\n      return <EmptyStateFilter />;\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Task name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Created on`,\n          type: 'numeric',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Started at`,\n          type: 'numeric',\n          id: 'started_at',\n        },\n        {\n          title: t`Finished at`,\n          type: 'numeric',\n          id: 'finished_at',\n        },\n        {\n          title: t`Status`,\n          type: 'alpha',\n          id: 'state',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Task list`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => {\n            p['page'] = 1;\n            this.updateParams(p, () => this.queryTasks());\n          }}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, state, pulp_created, started_at, finished_at, pulp_href } =\n      item;\n    const taskId = parsePulpIDFromURL(pulp_href);\n    return (\n      <tr key={index}>\n        <td>\n          <Link to={formatPath(Paths.taskDetail, { task: taskId })}>\n            <Tooltip\n              content={\n                (Constants.TASK_NAMES[name] &&\n                  i18n._(Constants.TASK_NAMES[name])) ||\n                name\n              }\n            >\n              {name}\n            </Tooltip>\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <DateComponent date={started_at} />\n        </td>\n        <td>\n          <DateComponent date={finished_at} />\n        </td>\n        <td>\n          <StatusIndicator status={state} />\n        </td>\n        <td>{this.cancelButton(state, item)}</td>\n      </tr>\n    );\n  }\n\n  private cancelButton(state, selectedTask) {\n    switch (state) {\n      case 'running':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n      case 'waiting':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n    }\n  }\n\n  private renderCancelModal() {\n    const name =\n      Constants.TASK_NAMES[this.state.selectedTask.name] ||\n      this.state.selectedTask.name;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        title={t`Stop task?`}\n        confirmAction={() => this.selectedTask(this.state.selectedTask, name)}\n        confirmButtonTitle={t`Yes, stop`}\n      >{t`${name} will be cancelled.`}</ConfirmModal>\n    );\n  }\n\n  private selectedTask(task, name) {\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          selectedTask: null,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: name,\n              description: (\n                <Trans>Task &quot;{name}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.queryTasks();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${name}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private queryTasks() {\n    this.setState({ loading: true }, () => {\n      TaskManagementAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Tasks list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              },\n            ],\n          });\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(TaskListView);\n\nTaskListView.contextType = AppContext;\n","import * as React from 'react';\nimport './task.scss';\nimport { i18n } from '@lingui/core';\nimport { t, Trans } from '@lingui/macro';\nimport {\n  Link,\n  withRouter,\n  Redirect,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  Breadcrumbs,\n  closeAlertMixin,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateCustom,\n  LoadingPageSpinner,\n  Main,\n  StatusIndicator,\n} from 'src/components';\nimport {\n  Button,\n  CodeBlock,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Title,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\nimport { TaskType } from 'src/api/response-types/task';\nimport { GenericPulpAPI, TaskManagementAPI } from 'src/api';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport { capitalize } from 'lodash';\nimport { errorMessage } from 'src/utilities';\n\ninterface IState {\n  loading: boolean;\n  task: TaskType;\n  parentTask: TaskType;\n  childTasks: TaskType[];\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  taskName: string;\n  resources: { name: string; type: string }[];\n  redirect: string;\n  polling: ReturnType<typeof setInterval>;\n}\n\nclass TaskDetail extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      task: null,\n      parentTask: null,\n      childTasks: [],\n      alerts: [],\n      cancelModalVisible: false,\n      taskName: '',\n      resources: [],\n      redirect: null,\n      polling: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  componentWillUnmount() {\n    if (this.state.polling) {\n      clearInterval(this.state.polling);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params['task'] !== this.props.match.params['task']) {\n      this.setState({ loading: true });\n      this.loadContent();\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      task,\n      parentTask,\n      childTasks,\n      cancelModalVisible,\n      alerts,\n      taskName,\n      resources,\n      redirect,\n    } = this.state;\n    const breadcrumbs = [\n      { url: Paths.taskList, name: t`Task management` },\n      { name: task ? taskName : '' },\n    ];\n    let parentTaskId = null;\n    if (parentTask) {\n      parentTaskId = parsePulpIDFromURL(parentTask.pulp_href);\n    }\n    if (redirect) {\n      return <Redirect to={redirect}></Redirect>;\n    }\n\n    return loading ? (\n      <LoadingPageSpinner />\n    ) : (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader\n          title={taskName}\n          breadcrumbs={<Breadcrumbs links={breadcrumbs}></Breadcrumbs>}\n          pageControls={\n            ['running', 'waiting'].includes(task.state) && (\n              <Button\n                variant='secondary'\n                onClick={() => this.setState({ cancelModalVisible: true })}\n              >\n                {t`Stop task`}\n              </Button>\n            )\n          }\n          status={\n            <StatusIndicator\n              className={'hub-c-task-status'}\n              status={task.state}\n            />\n          }\n        />\n        <Main>\n          <Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task detail`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task name`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.name}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    {task.name !== taskName && (\n                      <DescriptionListGroup>\n                        <DescriptionListTerm>{t`Descriptive name`}</DescriptionListTerm>\n                        <DescriptionListDescription>\n                          {taskName}\n                        </DescriptionListDescription>\n                      </DescriptionListGroup>\n                    )}\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Finished at`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.finished_at} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Created on`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.pulp_created} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task groups`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task group`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.task_group ? task.task_group : t`No task group`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Parent task`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {parentTask ? (\n                          <Link\n                            to={formatPath(Paths.taskDetail, {\n                              task: parentTaskId,\n                            })}\n                          >\n                            {(Constants.TASK_NAMES[parentTask.name] &&\n                              i18n._(Constants.TASK_NAMES[parentTask.name])) ||\n                              parentTask.name}\n                          </Link>\n                        ) : (\n                          t`No parent task`\n                        )}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Child tasks`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {childTasks.length\n                          ? childTasks.map((childTask) => {\n                              const childTaskId = parsePulpIDFromURL(\n                                childTask.pulp_href,\n                              );\n                              return (\n                                <React.Fragment key={childTaskId}>\n                                  <Link\n                                    to={formatPath(Paths.taskDetail, {\n                                      task: childTaskId,\n                                    })}\n                                  >\n                                    {(Constants.TASK_NAMES[childTask.name] &&\n                                      i18n._(\n                                        Constants.TASK_NAMES[childTask.name],\n                                      )) ||\n                                      childTask.name}\n                                  </Link>\n                                  <br />\n                                </React.Fragment>\n                              );\n                            })\n                          : t`No child task`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Reserve resources`}\n                  </Title>\n                  <br />\n                  {resources.length ? (\n                    <DescriptionList isHorizontal>\n                      {resources.map((resource, index) => {\n                        return (\n                          <React.Fragment key={resource.type + index}>\n                            <hr />\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>{t`Type`}</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {resource.type}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            {resource.name && (\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>{t`Name`}</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {resource.name}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                          </React.Fragment>\n                        );\n                      })}\n                    </DescriptionList>\n                  ) : (\n                    t`There's no resource record`\n                  )}\n                </section>\n              </FlexItem>\n            </Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                {!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Progress messages`}\n                    </Title>\n                    <br />\n                    {task.progress_reports.length ? (\n                      <DescriptionList isHorizontal>\n                        {task.progress_reports\n                          .reverse()\n                          .map((report, index) => {\n                            return (\n                              <React.Fragment key={index}>\n                                <hr />\n                                {Object.keys(report).map((key, index) => {\n                                  return (\n                                    !!report[key] && (\n                                      <DescriptionListGroup key={key + index}>\n                                        <DescriptionListTerm>\n                                          {{\n                                            message: t`Message`,\n                                            code: t`Code`,\n                                            state: t`State`,\n                                            done: t`Done`,\n                                          }[key] || capitalize(key)}\n                                        </DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                          {report[key]}\n                                        </DescriptionListDescription>\n                                      </DescriptionListGroup>\n                                    )\n                                  );\n                                })}{' '}\n                              </React.Fragment>\n                            );\n                          })}\n                      </DescriptionList>\n                    ) : (\n                      <EmptyStateCustom\n                        icon={CubesIcon}\n                        title={t`There is no progress message.`}\n                        description={t`There is no progress message.`}\n                      />\n                    )}\n                  </section>\n                )}\n                {!!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Error message`}\n                    </Title>\n                    <br />\n                    <React.Fragment>\n                      <Title headingLevel='h3'>{t`Description`}</Title>\n                      <CodeBlock>{task.error.description}</CodeBlock>\n                      <Title headingLevel='h3'>{t`Traceback`}</Title>\n                      <CodeBlock className={'hub-code-block'}>\n                        {task.error.traceback}\n                      </CodeBlock>\n                    </React.Fragment>\n                  </section>\n                )}\n              </FlexItem>\n            </Flex>\n          </Flex>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderCancelModal() {\n    const name = this.state.taskName;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        confirmAction={() => this.cancelTask()}\n        title={t`Stop task`}\n        confirmButtonTitle={t`Yes, stop`}\n      >\n        {t`${name} will stop running.`}\n      </ConfirmModal>\n    );\n  }\n\n  private cancelTask() {\n    const { task, taskName } = this.state;\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: taskName,\n              description: (\n                <Trans>Task &quot;{taskName}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.loadContent();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${taskName}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n        this.loadContent();\n      });\n  }\n\n  private loadContent() {\n    if (!this.state.polling && !this.state.task) {\n      this.setState({ polling: setInterval(() => this.loadContent(), 10000) });\n    }\n\n    const taskId = this.props.match.params['task'];\n    return TaskManagementAPI.get(taskId)\n      .then((result) => {\n        const allRelatedTasks = [];\n        let parentTask = null;\n        const childTasks = [];\n        const resources = [];\n        if (['canceled', 'completed', 'failed'].includes(result.data.state)) {\n          clearInterval(this.state.polling);\n          this.setState({ polling: null });\n        }\n        if (result.data.parent_task) {\n          const parentTaskId = parsePulpIDFromURL(result.data.parent_task);\n          allRelatedTasks.push(\n            TaskManagementAPI.get(parentTaskId)\n              .then((result) => {\n                parentTask = result.data;\n              })\n              .catch(() => {\n                return true;\n              }),\n          );\n        }\n        if (result.data.child_tasks.length) {\n          result.data.child_tasks.forEach((child) => {\n            const childTaskId = parsePulpIDFromURL(child);\n            allRelatedTasks.push(\n              TaskManagementAPI.get(childTaskId)\n                .then((result) => {\n                  childTasks.push(result.data);\n                })\n                .catch(() => {\n                  return true;\n                }),\n            );\n          });\n        }\n        if (result.data.reserved_resources_record.length) {\n          result.data.reserved_resources_record.forEach((resource) => {\n            const url = resource.replace(PULP_API_BASE_PATH, '');\n            const id = parsePulpIDFromURL(url);\n            const urlParts = resource.split('/');\n            const type = id ? urlParts[4] : urlParts[urlParts.length - 2];\n            if (id) {\n              allRelatedTasks.push(\n                GenericPulpAPI.get(url)\n                  .then((result) => {\n                    resources.push({ name: result.data.name, type });\n                  })\n                  .catch(() => {\n                    return true;\n                  }),\n              );\n            } else {\n              resources.push({ type });\n            }\n          });\n        }\n        return Promise.all(allRelatedTasks).then(() => {\n          this.setState({\n            task: result.data,\n            childTasks,\n            parentTask,\n            loading: false,\n            taskName:\n              (Constants.TASK_NAMES[result.data.name] &&\n                i18n._(Constants.TASK_NAMES[result.data.name])) ||\n              result.data.name,\n            resources,\n          });\n        });\n      })\n      .catch(() => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TaskDetail);\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { ClipboardCopyVariant, Button } from '@patternfly/react-core';\n\nimport { Paths } from 'src/paths';\nimport {\n  BaseHeader,\n  Main,\n  ClipboardCopy,\n  AlertList,\n  AlertType,\n  closeAlertMixin,\n} from 'src/components';\nimport { errorMessage, getRepoUrl } from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\nimport { MyDistributionAPI } from 'src/api';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n  alerts: AlertType[];\n  repoUrl: string;\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n      alerts: [],\n      repoUrl: '',\n    };\n  }\n\n  private getMyDistributionPath() {\n    MyDistributionAPI.list()\n      .then(({ data }) => {\n        const syncDistro =\n          data.data.find(({ base_path }) => base_path.includes('synclist'))\n            ?.base_path || '';\n        this.setState({\n          repoUrl: syncDistro,\n        });\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          repoUrl: '',\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Server URL could not be displayed.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    // so it never works the first time .. loadToken() causes a reload and then it works => no error handling\n    window.insights.chrome.auth.getOfflineToken().then((result) => {\n      this.setState({ tokenData: result.data });\n    });\n\n    this.getMyDistributionPath();\n  }\n\n  render() {\n    const { tokenData, alerts } = this.state;\n    const renewTokenCmd = `curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=\"cloud-services\" -d refresh_token=\"${\n      tokenData?.refresh_token ?? '{{ user_token }}'\n    }\" --fail --silent --show-error --output /dev/null`;\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <BaseHeader title={t`Connect to Hub`}></BaseHeader>\n        <Main>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect Private Automation Hub`}</h2>\n            <p>\n              <Trans>\n                Use the{' '}\n                <Link to={Paths.repositories}>Repository Management</Link> page\n                to sync collections curated by your organization to the Red Hat\n                Certified repository in your private Automation Hub. Users with\n                the correct permissions can use the sync toggles on the{' '}\n                <Link to={Paths.search}>Collections</Link> page to control which\n                collections are added to their organization&apos;s sync\n                repository.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Connect the ansible-galaxy client`}</h2>\n            <p>\n              <Trans>\n                Documentation on how to configure the{' '}\n                <code>ansible-galaxy</code> client can be found{' '}\n                <a\n                  href='https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/'\n                  target='_blank'\n                  rel='noreferrer'\n                >\n                  here\n                </a>\n                . Use the following parameters to configure the client.\n              </Trans>\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Offline token`}</h2>\n            <p>\n              <Trans>\n                Use this token to authenticate clients that need to download\n                content from Automation Hub. This is a secret token used to\n                protect your content. Store your API token in a secure location.\n              </Trans>\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <div>\n                <Button\n                  onClick={() => this.loadToken()}\n                >{t`Load token`}</Button>\n              </div>\n            )}\n            <div\n              className='pf-c-content'\n              style={{ paddingTop: 'var(--pf-global--spacer--md)' }}\n            >\n              <span>\n                <Trans>\n                  The token will expire after 30 days of inactivity. Run the\n                  command below periodically to prevent your token from\n                  expiring.\n                </Trans>\n              </span>\n              <ClipboardCopy\n                isCode\n                isReadOnly\n                variant={ClipboardCopyVariant.expansion}\n              >\n                {renewTokenCmd}\n              </ClipboardCopy>\n            </div>\n            <h2>{t`Manage tokens`}</h2>\n            <Trans>\n              To revoke a token or see all of your tokens, visit the{' '}\n              <a\n                href='https://sso.redhat.com/auth/realms/redhat-external/account/applications'\n                target='_blank'\n                rel='noreferrer'\n              >\n                offline API token management\n              </a>{' '}\n              page.\n            </Trans>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`Server URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the API endpoints that clients need to\n                download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              {getRepoUrl(this.state.repoUrl)}\n            </ClipboardCopy>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>{t`SSO URL`}</h2>\n            <p>\n              <Trans>\n                Use this URL to configure the authentication URLs that clients\n                need to download content from Automation Hub.\n              </Trans>\n            </p>\n            <ClipboardCopy isReadOnly>\n              https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n            </ClipboardCopy>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    // doOffline causes the page to refresh and will make the data\n    // available to getOfflineToken() when the component mounts after\n    // the reload\n    window.insights.chrome.auth.doOffline();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TokenPage);\nTokenPage.contextType = AppContext;\n"],"names":["CertificationDashboard","props","params","ParamHelper","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","this","context","user","is_anonymous","model_permissions","move_collection","queryCollections","setState","title","closeAlert","i","className","Toolbar","ToolbarGroup","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","inputType","options","Constants","count","isTop","ignoredParams","niceValues","repository","niceNames","renderTable","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","length","filterIsSet","description","sortTableOptions","headers","type","map","version","renderRow","includes","repository_list","display_signatures","featureFlags","Label","variant","color","icon","sign_state","can_upload_signatures","require_upload_signatures","index","key","namespace","name","Link","to","formatPath","Paths","collection","repo","Button","ButtonVariant","onClick","download","date","created_at","renderStatus","renderButtons","collection_auto_sign","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","updateCertification","filter","Boolean","importsLink","DropdownItem","component","certifyDropDown","originalRepo","rejectDropDown","kebabItems","buttons","file","Repositories","response","signed_collection","PULP_API_BASE_PATH","CertificateUploadAPI","data","results","pulp_href","then","result","waitForTask","parsePulpIDFromURL","task","updateList","concat","error","status","statusText","errorMessage","destinationRepo","CollectionVersionAPI","waitForUpdate","remove_task_id","addAlert","taskId","TaskAPI","Promise","r","setTimeout","meta","CollectionAPI","downloadURL","window","assign","closeAlertMixin","React","withRouter","contextType","AppContext","TaskListView","items","cancelModalVisible","selectedTask","unauthorised","queryTasks","noData","renderCancelModal","ToolbarContent","name__contains","item","renderTableRow","pulp_created","started_at","finished_at","content","i18n","cancelButton","cancelAction","confirmAction","confirmButtonTitle","TaskManagementAPI","e","TaskDetail","parentTask","childTasks","taskName","resources","redirect","polling","loadContent","clearInterval","prevProps","match","breadcrumbs","url","parentTaskId","Redirect","links","pageControls","Flex","direction","default","flex","FlexItem","Title","headingLevel","size","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","task_group","childTask","childTaskId","resource","progress_reports","reverse","report","Object","keys","message","code","done","CubesIcon","CodeBlock","traceback","cancelTask","setInterval","allRelatedTasks","parent_task","push","child_tasks","forEach","child","reserved_resources_record","replace","urlParts","split","GenericPulpAPI","all","TokenPage","tokenData","repoUrl","MyDistributionAPI","syncDistro","find","base_path","insights","chrome","auth","getOfflineToken","getMyDistributionPath","renewTokenCmd","refresh_token","href","target","rel","loadToken","style","paddingTop","isCode","isReadOnly","ClipboardCopyVariant","getRepoUrl","doOffline"],"sourceRoot":""}
{"version":3,"file":"js/4813.75224a21d896a51c253e.js","mappings":"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","sources":["webpack:///./src/containers/my-imports/my-imports.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport {\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n  ImportAPI,\n  ImportDetailType,\n  ImportListType,\n  PulpStatus,\n} from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  ImportConsole,\n  ImportList,\n  Main,\n  closeAlertMixin,\n} from 'src/components';\nimport { ParamHelper, RouteProps, withRouter } from 'src/utilities';\nimport './my-imports.scss';\n\ninterface IState {\n  selectedImport: ImportListType;\n  importList: ImportListType[];\n  selectedImportDetails: ImportDetailType;\n  collection: CollectionVersionSearch;\n  params: {\n    page_size?: number;\n    page?: number;\n    keyword?: string;\n    namespace?: string;\n  };\n  resultsCount: number;\n  importDetailError: string;\n  followLogs: boolean;\n  loadingImports: boolean;\n  loadingImportDetails: boolean;\n  alerts: AlertType[];\n}\n\nclass MyImports extends React.Component<RouteProps, IState> {\n  polling: ReturnType<typeof setInterval>;\n  topOfPage: React.RefObject<HTMLDivElement>;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    this.topOfPage = React.createRef();\n\n    this.state = {\n      selectedImport: undefined,\n      importList: [],\n      params: params,\n      selectedImportDetails: undefined,\n      resultsCount: 0,\n      importDetailError: '',\n      followLogs: false,\n      loadingImports: true,\n      loadingImportDetails: true,\n      collection: null,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    // Load namespaces, use the namespaces to query the import list,\n    // use the import list to load the task details\n    this.loadImportList(() => this.loadTaskDetails());\n\n    this.polling = setInterval(() => {\n      if (!this.state.params.namespace) {\n        return;\n      }\n\n      const { selectedImport, selectedImportDetails } = this.state;\n      const allowedStates = [PulpStatus.running, PulpStatus.waiting];\n\n      // selectedImportDetails can be failed while selectedImport is still running, poll() updates selectedImport\n      if (\n        allowedStates.includes(selectedImportDetails?.state) ||\n        allowedStates.includes(selectedImport?.state)\n      ) {\n        this.poll();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.polling);\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(alert) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  render() {\n    const {\n      selectedImport,\n      importList,\n      params,\n      selectedImportDetails,\n      resultsCount,\n      loadingImports,\n      loadingImportDetails,\n      importDetailError,\n      followLogs,\n      collection,\n    } = this.state;\n\n    if (!importList) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <div ref={this.topOfPage} />\n        <BaseHeader title={t`My imports`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <Main>\n          <section className='body'>\n            <div className='hub-page-container' data-cy='MyImports'>\n              <div className='import-list'>\n                <ImportList\n                  addAlert={(alert) => this.addAlert(alert)}\n                  importList={importList}\n                  selectedImport={selectedImport}\n                  loading={loadingImports}\n                  numberOfResults={resultsCount}\n                  params={params}\n                  selectImport={(sImport) => this.selectImport(sImport)}\n                  updateParams={(params) => {\n                    this.updateParams(params, () => {\n                      if (params.namespace) {\n                        this.setState(\n                          {\n                            loadingImports: true,\n                            loadingImportDetails: true,\n                          },\n                          () =>\n                            this.loadImportList(() => this.loadTaskDetails()),\n                        );\n                      } else {\n                        this.setState({\n                          importDetailError: t`No data`,\n                          loadingImportDetails: false,\n                        });\n                      }\n                    });\n                  }}\n                />\n              </div>\n\n              <div className='hub-import-console'>\n                <ImportConsole\n                  empty={!this.state.params.namespace}\n                  loading={loadingImportDetails}\n                  task={selectedImportDetails}\n                  followMessages={followLogs}\n                  setFollowMessages={(isFollowing) => {\n                    this.setState({\n                      followLogs: isFollowing,\n                    });\n                  }}\n                  selectedImport={selectedImport}\n                  apiError={importDetailError}\n                  collection={collection}\n                />\n              </div>\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private selectImport(sImport) {\n    this.setState(\n      { selectedImport: sImport, loadingImportDetails: true },\n      () => {\n        this.topOfPage.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n        this.loadTaskDetails();\n      },\n    );\n  }\n\n  private poll() {\n    this.loadTaskDetails(() => {\n      // Update the state of the selected import in the list if it's\n      // different from the one loaded from the API.\n      const { selectedImport, selectedImportDetails, importList } = this.state;\n\n      if (!selectedImportDetails) {\n        return;\n      }\n\n      if (selectedImport.state !== selectedImportDetails.state) {\n        const importIndex = importList.findIndex(\n          (x) => x.id === selectedImport.id,\n        );\n\n        const imports = cloneDeep(importList);\n        const newSelectedImport = cloneDeep(selectedImport);\n\n        newSelectedImport.state = selectedImportDetails.state;\n        newSelectedImport.finished_at = selectedImportDetails.finished_at;\n\n        imports[importIndex] = newSelectedImport;\n\n        this.setState({\n          selectedImport: newSelectedImport,\n          importList: imports,\n        });\n      }\n    });\n  }\n\n  private loadImportList(callback?: () => void) {\n    if (!this.state.params.namespace) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n      return;\n    }\n\n    ImportAPI.list({ ...this.state.params, sort: '-created' })\n      .then((importList) => {\n        this.setState(\n          {\n            importList: importList.data.data,\n            selectedImport: importList.data.data[0],\n            resultsCount: importList.data.meta.count,\n            loadingImports: false,\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadTaskDetails(callback?: () => void) {\n    if (!this.state.selectedImport) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n    } else {\n      ImportAPI.get(this.state.selectedImport.id)\n        .then((result) => {\n          this.setState(\n            {\n              importDetailError: '',\n              loadingImportDetails: false,\n              selectedImportDetails: result.data,\n              collection: null,\n            },\n            () => {\n              const importDeets = this.state.selectedImportDetails;\n\n              // have to use list instead of get because repository_list isn't\n              // available on collection version details\n              CollectionVersionAPI.list({\n                namespace: importDeets.namespace,\n                name: importDeets.name,\n                version: importDeets.version,\n              })\n                .then((result) => {\n                  if (result.data.meta.count === 1) {\n                    this.setState({\n                      collection: result.data.data[0],\n                    });\n                  }\n                })\n                .finally(() => {\n                  if (callback) {\n                    callback();\n                  }\n                });\n            },\n          );\n        })\n        .catch(() => {\n          this.setState({\n            selectedImportDetails: undefined,\n            importDetailError: t`Error fetching import from API`,\n            loadingImportDetails: false,\n          });\n        });\n    }\n  }\n}\n\nexport default withRouter(MyImports);\n"],"names":["MyImports","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","topOfPage","React","state","selectedImport","undefined","importList","selectedImportDetails","resultsCount","importDetailError","followLogs","loadingImports","loadingImportDetails","collection","alerts","_createClass","key","value","_this2","this","loadImportList","loadTaskDetails","polling","setInterval","namespace","_this2$state","allowedStates","PulpStatus","running","waiting","includes","poll","clearInterval","get","closeAlertMixin","alert","setState","concat","_toConsumableArray","_this3","_this$state","ref","BaseHeader","title","i18n","_","id","AlertList","closeAlert","i","Main","className","ImportList","addAlert","loading","numberOfResults","selectImport","sImport","updateParams","ImportConsole","empty","task","followMessages","setFollowMessages","isFollowing","apiError","updateParamsMixin","_this4","current","scrollIntoView","behavior","_this5","_this5$state","importIndex","findIndex","x","imports","cloneDeep","newSelectedImport","finished_at","callback","_this6","ImportAPI","list","_objectSpread","sort","then","data","meta","count","result","console","log","_this7","importDeets","CollectionVersionAPI","name","version","withRouter"],"sourceRoot":""}
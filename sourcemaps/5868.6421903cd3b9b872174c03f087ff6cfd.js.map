{"version":3,"file":"js/5868.288d4eb52e5730e9652c.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  LabelGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  DownloadIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  AnsibleRepositoryAPI,\n  AnsibleRepositoryType,\n  CertificateUploadAPI,\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionSearch,\n} from 'src/api';\nimport {\n  ApproveModal,\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  Pagination,\n  SortTable,\n  UploadSingCertificateModal,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  RepositoriesUtils,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  repositoryBasePath,\n  waitForTask,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n    repository_label?: string;\n    sort?: string;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersionSearch[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersionSearch[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersionSearch;\n  approveModalInfo: {\n    collectionVersion;\n  };\n  approvedRepositoryList: AnsibleRepositoryType[];\n  stagingRepoNames: string[];\n  rejectedRepoName: string;\n}\n\nclass CertificationDashboard extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository_label']) {\n      params['repository_label'] = `pipeline=${Constants.NEEDSREVIEW}`;\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      approvedRepositoryList: [],\n      rejectedRepoName: null,\n      stagingRepoNames: [],\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      const promises = [];\n\n      promises.push(\n        this.loadRepos('staging').then((stagingRepoNames) =>\n          this.setState({\n            stagingRepoNames,\n          }),\n        ),\n      );\n      promises.push(\n        this.loadRepos('rejected').then(([rejectedRepoName]) =>\n          this.setState({ rejectedRepoName }),\n        ),\n      );\n\n      promises.push(\n        // TODO: replace getAll pagination\n        RepositoriesUtils.listApproved()\n          .then((data) => {\n            this.setState({ approvedRepositoryList: data });\n          })\n          .catch(({ response: { status, statusText } }) => {\n            this.addAlertObj({\n              title: t`Failed to load repositories.`,\n              variant: 'danger',\n              description: errorMessage(status, statusText),\n            });\n          }),\n      );\n\n      promises.push(this.queryCollections(false));\n\n      Promise.all(promises).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  private loadRepos(pipeline) {\n    return AnsibleRepositoryAPI.list({\n      pulp_label_select: `pipeline=${pipeline}`,\n    })\n      .then(({ data: { results } }) => (results || []).map(({ name }) => name))\n      .catch((error) => {\n        this.addAlert(\n          t`Error loading repository with label ${pipeline}.`,\n          'danger',\n          error?.message,\n        );\n      });\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader />;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={t`Approval dashboard`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='toolbar hub-toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={this.state.inputText}\n                        onChange={(text) => {\n                          this.setState({ inputText: text });\n                        }}\n                        updateParams={(p) =>\n                          this.updateParams(p, () =>\n                            this.queryCollections(true),\n                          )\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: t`Namespace`,\n                          },\n                          {\n                            id: 'name',\n                            title: t`Collection Name`,\n                          },\n                          {\n                            id: 'repository_label',\n                            title: t`Status`,\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: `pipeline=${Constants.NOTCERTIFIED}`,\n                                title: t`Rejected`,\n                              },\n                              {\n                                id: `pipeline=${Constants.NEEDSREVIEW}`,\n                                title: t`Needs Review`,\n                              },\n                              {\n                                id: `pipeline=${Constants.APPROVED}`,\n                                title: t`Approved`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository_label: {\n                      [`pipeline=${Constants.APPROVED}`]: t`Approved`,\n                      [`pipeline=${Constants.NEEDSREVIEW}`]: t`Needs Review`,\n                      [`pipeline=${Constants.NOTCERTIFIED}`]: t`Rejected`,\n                    },\n                  }}\n                  niceNames={{\n                    repository_label: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSingCertificateModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={\n                  this.state.approveModalInfo.collectionVersion\n                }\n                addAlert={(alert) => this.addAlertObj(alert)}\n                allRepositories={this.state.approvedRepositoryList}\n                stagingRepoNames={this.state.stagingRepoNames}\n                rejectedRepoName={this.state.rejectedRepoName}\n              />\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository_label']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repository`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'repository_label',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Collection versions`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private isVersionUpdating(collection: CollectionVersionSearch) {\n    return this.state.updatingVersions.find((v) => {\n      return v == collection;\n    });\n  }\n\n  private renderStatus(collectionData: CollectionVersionSearch) {\n    const { repository } = collectionData;\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isVersionUpdating(collectionData)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n\n    if (this.isApproved(collectionData)) {\n      const { display_signatures } = this.context.featureFlags;\n      return (\n        <Label variant='outline' color='green' icon={<CheckCircleIcon />}>\n          {display_signatures && collectionData.is_signed\n            ? t`Signed and approved`\n            : t`Approved`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      return (\n        <Label variant='outline' color='red' icon={<ExclamationCircleIcon />}>\n          {t`Rejected`}\n        </Label>\n      );\n    }\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      const { can_upload_signatures, require_upload_signatures } =\n        this.context.featureFlags;\n      return (\n        <Label\n          variant='outline'\n          color='orange'\n          icon={<ExclamationTriangleIcon />}\n        >\n          {!collectionData.is_signed &&\n          can_upload_signatures &&\n          require_upload_signatures\n            ? t`Needs signature and review`\n            : t`Needs review`}\n        </Label>\n      );\n    }\n  }\n\n  private renderRow(collectionData: CollectionVersionSearch, index) {\n    const { collection_version: version, repository } = collectionData;\n    const data_cy = `CertificationDashboard-row-${collectionData.repository.name}-${collectionData.collection_version.namespace}-${collectionData.collection_version.name}`;\n    return (\n      <tr key={index} data-cy={data_cy}>\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: repository.name,\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.download(\n                repository,\n                version.namespace,\n                version.name,\n                version.version,\n              );\n            }}\n          >\n            <DownloadIcon />\n          </Button>\n        </td>\n        <td>\n          <DateComponent date={version.pulp_created} />\n        </td>\n        <td>\n          <LabelGroup>{repository.name}</LabelGroup>\n        </td>\n        <td>{this.renderStatus(collectionData)}</td>\n        {this.renderButtons(collectionData)}\n      </tr>\n    );\n  }\n\n  private renderButtons(collectionData: CollectionVersionSearch) {\n    // not checking namespace permissions here, auto_sign happens API side, so is the permission check\n    const { collection_version: version, repository } = collectionData;\n    const {\n      can_upload_signatures,\n      collection_auto_sign,\n      require_upload_signatures,\n    } = this.context.featureFlags;\n    if (this.isVersionUpdating(collectionData)) {\n      return <ListItemActions />; // empty td;\n    }\n\n    const canUploadSignature =\n      can_upload_signatures && !collectionData.is_signed;\n    const mustUploadSignature = canUploadSignature && require_upload_signatures;\n    const autoSign = collection_auto_sign && !require_upload_signatures;\n\n    const approveButton = [\n      canUploadSignature && (\n        <React.Fragment key='upload'>\n          <Button\n            onClick={() => this.openUploadCertificateModal(collectionData)}\n          >\n            {t`Upload signature`}\n          </Button>{' '}\n        </React.Fragment>\n      ),\n      <Button\n        key='approve'\n        isDisabled={mustUploadSignature}\n        data-cy='approve-button'\n        onClick={() => {\n          this.approve(collectionData);\n        }}\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </Button>,\n    ].filter(Boolean);\n\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            {t`View Import Logs`}\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => this.approve(collectionData)}\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        {autoSign ? t`Sign and approve` : t`Approve`}\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() => {\n          this.reject(collectionData);\n        }}\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        {t`Reject`}\n      </DropdownItem>\n    );\n\n    const repoStatus = repository.pulp_labels?.pipeline;\n\n    if (this.isApproved(collectionData)) {\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(true),\n            rejectDropDown(false),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NOTCERTIFIED) {\n      // render reject button if version is in multiple repositories including rejected state - handles inconsistency\n      // and allows user to reject it again to move it all to rejected state\n      return (\n        <ListItemActions\n          kebabItems={[\n            certifyDropDown(false),\n            rejectDropDown(true),\n            importsLink,\n          ]}\n        />\n      );\n    }\n\n    if (repoStatus === Constants.NEEDSREVIEW) {\n      return (\n        <ListItemActions\n          kebabItems={[rejectDropDown(false), importsLink]}\n          buttons={approveButton}\n        />\n      );\n    }\n  }\n\n  private openUploadCertificateModal(version: CollectionVersionSearch) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const { collection_version, repository } =\n      this.state.versionToUploadCertificate;\n    const signed_collection = collection_version.pulp_href;\n    const { name, namespace, version } = collection_version;\n    CertificateUploadAPI.upload({\n      file,\n      repository: repository.pulp_href,\n      signed_collection,\n    })\n      .then((result) => waitForTask(parsePulpIDFromURL(result.data.task)))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${namespace} ${name} v${version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${namespace} ${name} v${version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private isApproved(collection: CollectionVersionSearch) {\n    if (!collection) {\n      return false;\n    }\n\n    return this.state.approvedRepositoryList.find(\n      (r) => r.name == collection.repository.name,\n    );\n  }\n\n  private approve(collection) {\n    if (!collection) {\n      // I hope that this may not occure ever, but to be sure...\n      this.addAlert(\n        t`Approval failed.`,\n        'danger',\n        t`Collection not found in any repository.`,\n      );\n      return;\n    }\n\n    const { approvedRepositoryList } = this.state;\n\n    if (approvedRepositoryList.length == 1) {\n      if (collection.repository) {\n        this.updateCertification(\n          collection.collection_version,\n          collection.repository.name,\n          this.state.approvedRepositoryList[0].name,\n        );\n      } else {\n        // I hope that this may not occure ever, but to be sure...\n        this.addAlert(\n          t`Approval failed.`,\n          'danger',\n          t`Collection has to be in rejected or staging repository.`,\n        );\n      }\n    } else {\n      this.transformToCollectionVersion(collection).then(\n        (collectionVersion) => {\n          this.setState({ approveModalInfo: { collectionVersion } });\n        },\n      );\n    }\n  }\n\n  private reject(collection) {\n    const originalRepo = collection.repository.name;\n    const version = collection.collection_version;\n\n    this.transformToCollectionVersion(collection)\n      .then((versionWithRepos) => {\n        this.setState({ updatingVersions: [collection] });\n        if (\n          versionWithRepos.repository_list.includes(this.state.rejectedRepoName)\n        ) {\n          // collection already in rejected repository, so remove it from aproved repo\n\n          RepositoriesUtils.deleteCollection(originalRepo, version.pulp_href)\n            .then(() => {\n              this.addAlert(\n                t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n                'success',\n              );\n              this.queryCollections(true);\n            })\n            .catch((error) => {\n              this.setState({ updatingVersions: [] });\n              const description = !error.response\n                ? error\n                : errorMessage(\n                    error.response.status,\n                    error.response.statusText,\n                  );\n\n              this.addAlert(\n                t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n                'danger',\n                description,\n              );\n            });\n        } else {\n          // collection is not in rejected state, move it there\n          this.updateCertification(\n            version,\n            originalRepo,\n            this.state.rejectedRepoName,\n          );\n        }\n      })\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    // galaxy_ng CollectionRepositoryMixing.get_repos uses the distribution base path to look up repository pk\n    // there ..may be room for simplification since we already know the repo; OTOH also compatibility concerns\n    return Promise.all([\n      repositoryBasePath(originalRepo),\n      repositoryBasePath(destinationRepo),\n    ])\n      .then(([source, destination]) =>\n        CollectionVersionAPI.move(\n          version.namespace,\n          version.name,\n          version.version,\n          source,\n          destination,\n        ),\n      )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      });\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    const { sort, ...params } = this.state.params;\n    const updatedParams = {\n      order_by: sort,\n      ...params,\n    };\n\n    return CollectionVersionAPI.list(updatedParams)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private download(\n    repository: CollectionVersionSearch['repository'],\n    namespace: string,\n    name: string,\n    version: string,\n  ) {\n    CollectionAPI.getDownloadURL(repository, namespace, name, version).then(\n      (downloadURL: string) => {\n        window.location.assign(downloadURL);\n      },\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n\n  // compose from collectionVersionSearch to CollectionVersion structure for approval modal\n  async transformToCollectionVersion(collection: CollectionVersionSearch) {\n    const repoList = await RepositoriesUtils.getCollectionRepoList(collection);\n\n    const { collection_version } = collection;\n    const id = parsePulpIDFromURL(collection_version.pulp_href);\n    const collectionVersion = {\n      id,\n      version: collection_version.version,\n      namespace: collection_version.namespace,\n      name: collection_version.name,\n      repository_list: repoList,\n    };\n\n    return collectionVersion;\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"names":["CertificationDashboard","_React$Component","_inherits","_transformToCollectionVersion","_super","props","_this","_classCallCheck","call","params","ParamHelper","parseParamString","location","search","concat","Constants","NEEDSREVIEW","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","approvedRepositoryList","rejectedRepoName","stagingRepoNames","_createClass","key","value","_this2","_this$context","this","context","user","hasPermission","is_anonymous","setState","promises","push","loadRepos","then","_ref","_slicedToArray","RepositoriesUtils","listApproved","data","_ref3","_ref3$response","response","status","statusText","addAlertObj","title","i18n","_","id","variant","description","errorMessage","queryCollections","Promise","all","pipeline","_this3","AnsibleRepositoryAPI","list","pulp_label_select","_ref4","results","map","_ref5","name","error","addAlert","values","message","_repository_label","_this4","_this$state","React","BaseHeader","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","inputType","options","NOTCERTIFIED","APPROVED","Pagination","count","isTop","AppliedFilters","ignoredParams","niceValues","repository_label","_defineProperty","niceNames","LoadingPageSpinner","renderTable","UploadSingCertificateModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","alert","allRepositories","LoadingPageWithHeader","_this5","length","filterIsSet","EmptyStateFilter","EmptyStateNoData","sortTableOptions","headers","type","SortTable","version","renderRow","collection","find","v","collectionData","_repository$pulp_labe","repoStatus","repository","pulp_labels","isVersionUpdating","isApproved","display_signatures","featureFlags","Label","color","icon","CheckCircleIcon","is_signed","ExclamationCircleIcon","_this$context$feature","can_upload_signatures","require_upload_signatures","ExclamationTriangleIcon","index","_this6","collection_version","data_cy","namespace","Link","to","formatPath","Paths","collectionByRepo","repo","Button","ButtonVariant","link","onClick","download","DownloadIcon","DateComponent","date","pulp_created","LabelGroup","renderStatus","renderButtons","_repository$pulp_labe2","_this7","_this$context$feature2","collection_auto_sign","ListItemActions","canUploadSignature","mustUploadSignature","autoSign","approveButton","openUploadCertificateModal","isDisabled","approve","filter","Boolean","importsLink","DropdownItem","component","myImports","certifyDropDown","rejectDropDown","reject","kebabItems","buttons","file","_this8","_this$state$versionTo","signed_collection","pulp_href","CertificateUploadAPI","upload","result","waitForTask","parsePulpIDFromURL","task","r","_this9","updateCertification","transformToCollectionVersion","_this10","originalRepo","versionWithRepos","repository_list","includes","deleteCollection","destinationRepo","_this11","repositoryBasePath","_ref6","_ref7","source","destination","CollectionVersionAPI","move","remove_task_id","waitMs","handleLoading","_this12","_this$state$params","updatedParams","_objectSpread","order_by","sort","_objectWithoutProperties","_excluded","meta","CollectionAPI","getDownloadURL","downloadURL","window","assign","get","updateParamsMixin","closeAlertMixin","_toConsumableArray","_asyncToGenerator","_regeneratorRuntime","_callee","repoList","_context","prev","next","getCollectionRepoList","sent","abrupt","stop","_x","apply","arguments","withRouter","contextType","AppContext"],"sourceRoot":""}
{"version":3,"file":"js/2613.162ea8966f4174e4595e.js","mappings":"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","sources":["webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceAPI, NamespaceListType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LinkTabs,\n  LoadingPageSpinner,\n  LoadingPageWithHeader,\n  NamespaceCard,\n  NamespaceModal,\n  Pagination,\n  Sort,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport {\n  ParamHelper,\n  RouteProps,\n  errorMessage,\n  filterIsSet,\n} from 'src/utilities';\nimport './namespace-list.scss';\n\ninterface IState {\n  alerts: AlertType[];\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n    keywords?: string;\n  };\n  hasPermission: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n  redirect?: string;\n  inputText: string;\n}\n\ninterface IProps extends RouteProps {\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 20;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      alerts: [],\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      loading: true,\n      inputText: params['keywords'] || '',\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.setState({ alerts: this.context.alerts || [] });\n    this.context.setAlerts([]);\n\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({})\n        .then((results) => {\n          if (results.data.meta.count !== 0) {\n            this.loadNamespaces();\n          } else {\n            this.setState({\n              hasPermission: false,\n              namespaces: [],\n              loading: false,\n            });\n          }\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Navigate to={this.state.redirect} />;\n    }\n\n    const { alerts, namespaces, params, itemCount, loading, inputText } =\n      this.state;\n    const { filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noData =\n      !filterIsSet(this.state.params, ['keywords']) &&\n      namespaces !== undefined &&\n      namespaces.length === 0;\n\n    if (loading) {\n      return <LoadingPageWithHeader />;\n    }\n\n    // Namespaces or Partners\n    const title = namespaceBreadcrumb().name;\n\n    return (\n      <div className='hub-namespace-page'>\n        <NamespaceModal\n          isOpen={this.state.isModalOpen}\n          toggleModal={this.handleModalToggle}\n          onCreateSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.namespaceDetail,\n                {\n                  namespace: result.name,\n                },\n                { tab: 'collections' },\n              ),\n            })\n          }\n        />\n        <AlertList alerts={alerts} closeAlert={(i) => this.closeAlert(i)} />\n        <BaseHeader title={title}>\n          {!this.context.user.is_anonymous && (\n            <div className='hub-tab-link-container'>\n              <div className='tabs'>\n                <LinkTabs\n                  tabs={[\n                    {\n                      title: t`All`,\n                      link: formatPath(Paths[NAMESPACE_TERM]),\n                      active: !filterOwner,\n                    },\n                    {\n                      title: t`My namespaces`,\n                      link: formatPath(Paths.myNamespaces),\n                      active: filterOwner,\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n          {noData ? null : (\n            <div className='hub-toolbar hub-toolbar-left'>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarGroup style={{ marginLeft: 0 }}>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        inputText={inputText}\n                        onChange={(text) => this.setState({ inputText: text })}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                        params={params}\n                        filterConfig={[{ id: 'keywords', title: t`keywords` }]}\n                      />\n                      <AppliedFilters\n                        style={{ marginTop: '16px' }}\n                        updateParams={(p) => {\n                          this.updateParams(p, () => this.loadNamespaces());\n                          this.setState({ inputText: '' });\n                        }}\n                        params={params}\n                        ignoredParams={['page_size', 'page', 'sort']}\n                        niceNames={{ keywords: t`keywords` }}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                  <ToolbarGroup style={{ alignSelf: 'start' }}>\n                    <ToolbarItem>\n                      <Sort\n                        options={[\n                          { title: t`Name`, id: 'name', type: 'alpha' },\n                        ]}\n                        params={params}\n                        updateParams={(p) =>\n                          this.updateParams(p, () => this.loadNamespaces())\n                        }\n                      />\n                    </ToolbarItem>\n                    {hasPermission('galaxy.add_namespace') && (\n                      <ToolbarItem key='create-button'>\n                        <Button\n                          variant='primary'\n                          onClick={this.handleModalToggle}\n                        >\n                          {t`Create`}\n                        </Button>\n                      </ToolbarItem>\n                    )}\n                  </ToolbarGroup>\n                </ToolbarContent>\n              </Toolbar>\n              <div>\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.loadNamespaces())\n                  }\n                  count={itemCount}\n                  isCompact\n                  perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                />\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        <section className='card-area'>{this.renderBody()}</section>\n        {noData || loading ? null : (\n          <section className='footer'>\n            <Pagination\n              params={params}\n              updateParams={(p) =>\n                this.updateParams(p, () => this.loadNamespaces())\n              }\n              perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n              count={itemCount}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  private renderBody() {\n    const { namespaces, loading } = this.state;\n    const { namespacePath, filterOwner } = this.props;\n    const { hasPermission } = this.context;\n\n    const noDataTitle = t`No namespaces yet`;\n    const noDataDescription = !filterOwner\n      ? t`Namespaces will appear once created`\n      : t`This account is not set up to manage any namespaces`;\n\n    const noDataButton = hasPermission('galaxy.add_namespace') ? (\n      <Button variant='primary' onClick={() => this.handleModalToggle()}>\n        {t`Create`}\n      </Button>\n    ) : null;\n\n    if (loading) {\n      return (\n        <section>\n          <LoadingPageSpinner />;\n        </section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <section>\n          {filterIsSet(this.state.params, ['keywords']) ? (\n            <EmptyStateFilter />\n          ) : (\n            <EmptyStateNoData\n              title={noDataTitle}\n              description={noDataDescription}\n              button={noDataButton}\n            />\n          )}\n        </section>\n      );\n    }\n\n    return (\n      <section className='card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n              })}\n              key={i}\n              {...ns}\n            />\n          </div>\n        ))}\n      </section>\n    );\n  }\n\n  private loadNamespaces() {\n    const { filterOwner } = this.props;\n    const api = filterOwner ? MyNamespaceAPI : NamespaceAPI;\n\n    this.setState({ loading: true }, () => {\n      api\n        .list(this.state.params)\n        .then((results) => {\n          this.setState({\n            namespaces: results.data.data,\n            itemCount: results.data.meta.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState(\n            {\n              namespaces: [],\n              itemCount: 0,\n              loading: false,\n            },\n            () =>\n              this.addAlert({\n                variant: 'danger',\n                title: t`Namespaces list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              }),\n          );\n        });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceList.contextType = AppContext;\n","import React from 'react';\nimport { Paths } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { NamespaceList } from './namespace-list';\n\nclass Partners extends React.Component<RouteProps> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespaceDetail}\n        filterOwner={false}\n      />\n    );\n  }\n}\n\nexport default withRouter(Partners);\n"],"names":["NamespaceList","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","setState","_ref","isModalOpen","params","ParamHelper","parseParamString","location","search","state","alerts","namespaces","undefined","itemCount","hasPermission","loading","inputText","_createClass","key","value","_this2","this","context","setAlerts","filterOwner","MyNamespaceAPI","list","then","results","data","meta","count","loadNamespaces","e","_e$response","response","status","statusText","addAlert","variant","title","i18n","_","id","description","errorMessage","_this3","redirect","React","Navigate","to","_this$state","noData","filterIsSet","length","LoadingPageWithHeader","namespaceBreadcrumb","name","className","NamespaceModal","isOpen","toggleModal","handleModalToggle","onCreateSuccess","result","formatPath","Paths","namespaceDetail","namespace","tab","AlertList","closeAlert","i","BaseHeader","user","is_anonymous","LinkTabs","tabs","link","active","myNamespaces","Toolbar","ToolbarContent","ToolbarGroup","style","marginLeft","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","AppliedFilters","marginTop","ignoredParams","niceNames","keywords","alignSelf","Sort","options","type","Button","onClick","Pagination","isCompact","perPageOptions","Constants","CARD_DEFAULT_PAGINATION_OPTIONS","renderBody","_this4","_this$state2","_this$props","namespacePath","noDataTitle","noDataDescription","noDataButton","LoadingPageSpinner","EmptyStateFilter","EmptyStateNoData","button","map","ns","NamespaceCard","_extends","namespaceURL","_this5","api","NamespaceAPI","_e$response2","get","updateParamsMixin","nonURLParams","alert","concat","_toConsumableArray","closeAlertMixin","contextType","AppContext","Partners","apply","arguments","withRouter"],"sourceRoot":""}
{"version":3,"file":"js/2282.c660aecdb2cedbded0f6.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  CollectionVersionAPI.getCached(\n    {\n      ...(repo ? { repository_name: repo } : {}),\n      namespace,\n      name,\n      order_by: '-version',\n    },\n    forceReload,\n  )\n    .then((collections: CollectionVersionSearch[]) => {\n      const collection = version\n        ? collections.find(\n            ({ collection_version }) => collection_version.version == version,\n          )\n        : collections.find((cv) => cv.is_highest);\n\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ).then((res) => {\n        const [content] = res.data.results;\n        setCollection(collections, collection, content);\n      });\n    })\n    .catch(() => {\n      navigate(formatPath(Paths.notFound));\n    });\n}\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { ImportAPI, ImportDetailType, ImportListType } from 'src/api';\nimport {\n  CollectionHeader,\n  ImportConsole,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: null,\n      collections: [],\n      content: null,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      collections,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n      content,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const { collection_version, repository } = collection;\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceDetail, {\n          namespace: collection_version.namespace,\n        }),\n        name: collection_version.namespace,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection_version.namespace,\n          collection: collection_version.name,\n          repo: repository.name,\n        }),\n        name: collection_version.name,\n      },\n      { name: t`Import log` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          reload={() => this.loadData(true)}\n          collections={collections}\n          collection={collection}\n          content={content}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n        />\n        <Main>\n          <section className='body'>\n            <ImportConsole\n              empty={false}\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={() => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = t`Could not load import log`;\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.collection_version.namespace,\n          name: this.state.collection.collection_version.name,\n          version: this.state.collection.collection_version.version,\n          sort: '-created',\n        })\n          .then((importListResult) => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then((importDetailResult) => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch(() => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch(() => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  private loadCollection(forceReload, callback) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      setCollection: (collections, collection, content) =>\n        this.setState({ collections, collection, content }, callback),\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n\nCollectionImportLog.contextType = AppContext;\n"],"names":["loadCollection","_ref","forceReload","matchParams","navigate","setCollection","version","stateParams","name","collection","namespace","repo","CollectionVersionAPI","_objectSpread","repository_name","order_by","then","collections","find","_ref2","collection_version","cv","is_highest","CollectionAPI","res","content","_slicedToArray","data","results","formatPath","Paths","CollectionImportLog","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","loadingImports","selectedImportDetail","undefined","selectedImport","apiError","_createClass","key","value","this","loadData","_this2","_this$state","React","LoadingPageWithHeader","repository","breadcrumbs","namespaceBreadcrumb","url","i18n","CollectionHeader","reload","updateParams","activeTab","Main","className","ImportConsole","empty","loading","task","followMessages","setFollowMessages","hideCollectionName","_this3","arguments","length","failMsg","setState","ImportAPI","sort","importListResult","importObj","id","importDetailResult","callback","_this4","routeParams","get","withRouter","contextType","AppContext"],"sourceRoot":""}
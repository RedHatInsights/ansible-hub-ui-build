{"version":3,"file":"js/53.ebfa8b35db10e59d4234.js","mappings":"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","sources":["webpack:///./src/containers/edit-namespace/edit-namespace.tsx"],"sourcesContent":["import { Trans, t } from '@lingui/macro';\nimport { ActionGroup, Button, Form, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { MyNamespaceAPI, NamespaceLinkType, NamespaceType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  NamespaceForm,\n  PartnerHeader,\n  ResourcesForm,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport {\n  ErrorMessagesType,\n  ParamHelper,\n  errorMessage,\n  mapErrorMessages,\n} from 'src/utilities';\n\ninterface IState {\n  namespace: NamespaceType;\n  newLinkName: string;\n  newLinkURL: string;\n  errorMessages: ErrorMessagesType;\n  saving: boolean;\n  loading: boolean;\n  redirect: string;\n  unsavedData: boolean;\n  alerts: AlertType[];\n  params: {\n    tab?: string;\n  };\n  unauthorized: boolean;\n}\n\nclass EditNamespace extends React.Component<RouteProps, IState> {\n  queryParams: URLSearchParams;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    if (!params['tab']) {\n      params['tab'] = 'edit-details';\n    }\n\n    this.state = {\n      loading: false,\n      alerts: [],\n      namespace: null,\n      newLinkURL: '',\n      newLinkName: '',\n      errorMessages: {},\n      saving: false,\n      redirect: null,\n      unsavedData: false,\n      params: params,\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true }, () => this.loadNamespace());\n  }\n\n  render() {\n    const {\n      namespace,\n      errorMessages,\n      saving,\n      redirect,\n      params,\n      unauthorized,\n      loading,\n    } = this.state;\n\n    const tabs = [\n      { id: 'edit-details', name: t`Edit details` },\n      { id: 'edit-resources', name: t`Edit resources` },\n    ];\n\n    if (redirect) {\n      return <Navigate to={redirect} />;\n    }\n\n    if (loading) {\n      return <LoadingPageSpinner />;\n    }\n\n    if (!namespace) {\n      return null;\n    }\n\n    const updateNamespace = (namespace) =>\n      this.setState({\n        namespace,\n        unsavedData: true,\n      });\n\n    return (\n      <React.Fragment>\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[\n            namespaceBreadcrumb,\n            {\n              name: namespace.name,\n              url: formatPath(Paths.namespaceByRepo, {\n                repo: this.context.selectedRepo,\n                namespace: namespace.name,\n              }),\n            },\n            { name: t`Edit` },\n          ]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n        ></PartnerHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main>\n            <section className='body'>\n              {params.tab === 'edit-details' ? (\n                <NamespaceForm\n                  errorMessages={errorMessages}\n                  namespace={namespace}\n                  updateNamespace={updateNamespace}\n                />\n              ) : null}\n              {params.tab === 'edit-resources' ? (\n                <ResourcesForm\n                  namespace={namespace}\n                  updateNamespace={updateNamespace}\n                />\n              ) : null}\n              <Form>\n                <ActionGroup>\n                  <Button\n                    isDisabled={this.isSaveDisabled()}\n                    variant='primary'\n                    onClick={() => this.saveNamespace()}\n                  >\n                    {t`Save`}\n                  </Button>\n                  <Button variant='secondary' onClick={() => this.cancel()}>\n                    {t`Cancel`}\n                  </Button>\n\n                  {saving ? <Spinner></Spinner> : null}\n                </ActionGroup>\n                {this.state.unsavedData ? (\n                  <div\n                    style={{ color: 'red' }}\n                  >{t`You have unsaved changes`}</div>\n                ) : null}\n              </Form>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private isSaveDisabled() {\n    const namespace = this.state.namespace;\n    return namespace.links.some(\n      (link) =>\n        NamespaceForm.validateName(link).validated == 'error' ||\n        NamespaceForm.validateUrl(link).validated == 'error',\n    );\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private loadNamespace() {\n    MyNamespaceAPI.get(this.props.routeParams.namespace)\n      .then((response) => {\n        // Add an empty link to the end of the links array to create an empty field\n        // on the link edit form for adding new links\n        const emptyLink: NamespaceLinkType = { name: '', url: '' };\n        response.data.links.push(emptyLink);\n        this.setState({ loading: false, namespace: response.data });\n      })\n      .catch(() => {\n        this.setState({ unauthorized: true, loading: false });\n      });\n  }\n\n  private saveNamespace() {\n    this.setState({ saving: true }, () => {\n      const namespace = { ...this.state.namespace };\n      const setLinks: NamespaceLinkType[] = [];\n\n      // remove any empty links from the list before saving\n      for (const link of namespace.links) {\n        if (link.url !== '' || link.name !== '') {\n          setLinks.push(link);\n        }\n      }\n\n      namespace.links = setLinks;\n\n      MyNamespaceAPI.update(this.state.namespace.name, namespace)\n        .then((result) => {\n          this.setState(\n            {\n              namespace: result.data,\n              errorMessages: {},\n              saving: false,\n              unsavedData: false,\n              redirect: formatPath(Paths.namespaceByRepo, {\n                repo: this.context.selectedRepo,\n                namespace: this.state.namespace.name,\n              }),\n            },\n            () =>\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'success',\n                  title: (\n                    <Trans>\n                      Saved changes to namespace &quot;\n                      {this.state.namespace.name}&quot;.\n                    </Trans>\n                  ),\n                },\n              ]),\n          );\n        })\n        .catch((error) => {\n          const result = error.response;\n          if (result.status === 400) {\n            this.setState({\n              errorMessages: mapErrorMessages(error),\n              saving: false,\n            });\n          } else if (result.status === 404) {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: t`Changes to namespace \"${this.state.namespace.name}\" could not be saved.`,\n                description: errorMessage(result.status, result.statusText),\n              }),\n              saving: false,\n            });\n          }\n        });\n    });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private cancel() {\n    this.setState({\n      redirect: formatPath(Paths.namespaceByRepo, {\n        repo: this.context.selectedRepo,\n        namespace: this.state.namespace.name,\n      }),\n    });\n  }\n}\n\nEditNamespace.contextType = AppContext;\n\nexport default withRouter(EditNamespace);\n"],"names":["EditNamespace","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","loading","alerts","namespace","newLinkURL","newLinkName","errorMessages","saving","redirect","unsavedData","unauthorized","_createClass","key","value","_this2","this","setState","loadNamespace","_this3","_this$state","tabs","id","name","i18n","React","Navigate","to","LoadingPageSpinner","updateNamespace","PartnerHeader","breadcrumbs","namespaceBreadcrumb","url","formatPath","Paths","repo","context","selectedRepo","updateParams","p","AlertList","closeAlert","i","EmptyStateUnauthorized","Main","className","tab","NamespaceForm","ResourcesForm","Form","ActionGroup","Button","isDisabled","isSaveDisabled","variant","onClick","saveNamespace","cancel","Spinner","style","color","links","some","link","validated","get","_this4","MyNamespaceAPI","routeParams","then","response","data","push","_this5","_step","_objectSpread","setLinks","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","result","setAlerts","concat","_toConsumableArray","title","Trans","values","error","status","mapErrorMessages","description","errorMessage","statusText","closeAlertMixin","contextType","AppContext","withRouter"],"sourceRoot":""}
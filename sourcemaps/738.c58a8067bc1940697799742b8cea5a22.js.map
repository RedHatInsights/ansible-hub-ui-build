{"version":3,"file":"js/738.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/containers/task-management/task-list-view.tsx"],"sourcesContent":["import { Trans, t } from '@lingui/macro';\nimport {\n  Button,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { Table, Tbody, Td, Tr } from '@patternfly/react-table';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { TaskManagementAPI, type TaskType } from 'src/api';\nimport {\n  AlertList,\n  type AlertType,\n  AppliedFilters,\n  BaseHeader,\n  CompoundFilter,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  HubPagination,\n  LoadingSpinner,\n  Main,\n  SortTable,\n  StatusIndicator,\n  closeAlert,\n} from 'src/components';\nimport { AppContext, type IAppContextType } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport {\n  ParamHelper,\n  type RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  translateTask,\n  withRouter,\n} from 'src/utilities';\nimport './task.scss';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: TaskType[];\n  itemCount: number;\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  selectedTask: TaskType;\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class TaskListView extends Component<RouteProps, IState> {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    this.state = {\n      params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      cancelModalVisible: false,\n      selectedTask: null,\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    const { user } = this.context as IAppContextType;\n    if (!user || user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.queryTasks();\n    }\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      items,\n      alerts,\n      cancelModalVisible,\n      unauthorised,\n    } = this.state;\n\n    const noData =\n      items.length === 0 && !filterIsSet(params, ['name__contains', 'state']);\n\n    return (\n      <>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) =>\n            closeAlert(i, {\n              alerts,\n              setAlerts: (alerts) => this.setState({ alerts }),\n            })\n          }\n        />\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader title={t`Task management`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No tasks yet`}\n            description={t`Tasks will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) =>\n                              this.updateParams(p, () => this.queryTasks())\n                            }\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name__contains',\n                                title: t`Task name`,\n                              },\n                              {\n                                id: 'state',\n                                title: t`Status`,\n                                inputType: 'select',\n                                options: [\n                                  {\n                                    id: 'completed',\n                                    title: t`Completed`,\n                                  },\n                                  {\n                                    id: 'failed',\n                                    title: t`Failed`,\n                                  },\n                                  {\n                                    id: 'running',\n                                    title: t`Running`,\n                                  },\n                                  {\n                                    id: 'waiting',\n                                    title: t`Waiting`,\n                                  },\n                                ],\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <HubPagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.queryTasks())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.queryTasks());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name__contains: t`Task name`,\n                      state: t`Status`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingSpinner /> : this.renderTable(params)}\n\n                <HubPagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryTasks())\n                  }\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n\n    if (items.length === 0) {\n      return <EmptyStateFilter />;\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Task name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Description`,\n          type: 'none',\n          id: 'description',\n        },\n        {\n          title: t`Created on`,\n          type: 'numeric',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Started at`,\n          type: 'numeric',\n          id: 'started_at',\n        },\n        {\n          title: t`Finished at`,\n          type: 'numeric',\n          id: 'finished_at',\n        },\n        {\n          title: t`Status`,\n          type: 'alpha',\n          id: 'state',\n        },\n      ],\n    };\n\n    return (\n      <Table aria-label={t`Task list`}>\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => this.updateParams(p, () => this.queryTasks())}\n        />\n        <Tbody>{items.map((item, i) => this.renderTableRow(item, i))}</Tbody>\n      </Table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, state, pulp_created, started_at, finished_at, pulp_href } =\n      item;\n    const taskId = parsePulpIDFromURL(pulp_href);\n    const description = translateTask(name);\n\n    return (\n      <Tr key={index}>\n        <Td>\n          <Link to={formatPath(Paths.taskDetail, { task: taskId })}>\n            {name}\n          </Link>\n        </Td>\n        <Td>{description !== name ? description : null}</Td>\n        <Td>\n          <DateComponent date={pulp_created} />\n        </Td>\n        <Td>\n          <DateComponent date={started_at} />\n        </Td>\n        <Td>\n          <DateComponent date={finished_at} />\n        </Td>\n        <Td>\n          <StatusIndicator status={state} />\n        </Td>\n        <Td>{this.cancelButton(state, item)}</Td>\n      </Tr>\n    );\n  }\n\n  private cancelButton(state, selectedTask) {\n    switch (state) {\n      case 'running':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n      case 'waiting':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n    }\n  }\n\n  private renderCancelModal() {\n    const { selectedTask } = this.state;\n    const name = translateTask(selectedTask.name);\n\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        title={t`Stop task?`}\n        confirmAction={() => this.selectedTask(selectedTask, name)}\n        confirmButtonTitle={t`Yes, stop`}\n      >{t`${name} will be cancelled.`}</ConfirmModal>\n    );\n  }\n\n  private selectedTask({ pulp_href }, name) {\n    TaskManagementAPI.patch(parsePulpIDFromURL(pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          selectedTask: null,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: name,\n              description: (\n                <Trans>Task &quot;{name}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.queryTasks();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${name}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private queryTasks() {\n    this.setState({ loading: true }, () => {\n      TaskManagementAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Tasks list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              },\n            ],\n          });\n        });\n    });\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private updateParams(params, callback = null) {\n    ParamHelper.updateParams({\n      params,\n      navigate: (to) => this.props.navigate(to),\n      setState: (state) => this.setState(state, callback),\n    });\n  }\n}\n\nexport default withRouter(TaskListView);\n"],"names":["TaskListView","_Component","props","_this","_classCallCheck","_callSuper","params","ParamHelper","parseParamString","location","search","state","items","loading","itemCount","alerts","cancelModalVisible","selectedTask","unauthorised","inputText","_inherits","_createClass","key","value","user","this","context","is_anonymous","setState","queryTasks","_this2","_this$state","noData","length","filterIsSet","React","AlertList","closeAlert","i","setAlerts","renderCancelModal","BaseHeader","title","i18n","_","id","EmptyStateUnauthorized","EmptyStateNoData","description","Main","LoadingSpinner","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","inputType","options","HubPagination","count","isTop","AppliedFilters","ignoredParams","niceNames","name__contains","renderTable","_this3","EmptyStateFilter","sortTableOptions","headers","type","Table","SortTable","Tbody","map","item","renderTableRow","index","name","pulp_created","started_at","finished_at","pulp_href","taskId","parsePulpIDFromURL","translateTask","Tr","Td","Link","to","formatPath","Paths","taskDetail","task","DateComponent","date","StatusIndicator","status","cancelButton","_this4","Button","variant","onClick","_this5","ConfirmModal","cancelAction","confirmAction","confirmButtonTitle","values","_ref2","_this6","TaskManagementAPI","patch","then","concat","_toConsumableArray","Trans","e","_e$response","response","statusText","errorMessage","_this7","list","result","data","results","_e$response2","_this8","callback","arguments","undefined","navigate","Component","_defineProperty","AppContext","withRouter"],"sourceRoot":""}
{"version":3,"file":"js/811.1673982109505.bb32eedf9bad30793f7e.js","mappings":"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","sources":["webpack:///./src/containers/task-management/task-list-view.tsx"],"sourcesContent":["import { t, Trans } from '@lingui/macro';\nimport { i18n } from '@lingui/core';\n\nimport * as React from 'react';\nimport './task.scss';\nimport { Constants } from 'src/constants';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { Link } from 'react-router-dom';\nimport {\n  Button,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { ParamHelper, filterIsSet, errorMessage } from 'src/utilities';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  closeAlertMixin,\n  ConfirmModal,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  Tooltip,\n  StatusIndicator,\n} from 'src/components';\nimport { TaskManagementAPI } from 'src/api';\nimport { TaskType } from 'src/api/response-types/task';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: Array<TaskType>;\n  itemCount: number;\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  selectedTask: TaskType;\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class TaskListView extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      cancelModalVisible: false,\n      selectedTask: null,\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context;\n    if (!user || user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.queryTasks();\n    }\n\n    if (!hasPermission('core.view_task')) {\n      this.addAlert(\n        t`You do not have permission to view all tasks. Only tasks created by you are visible.`,\n        'info',\n      );\n    }\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      items,\n      alerts,\n      cancelModalVisible,\n      unauthorised,\n    } = this.state;\n\n    const noData =\n      items.length === 0 && !filterIsSet(params, ['name__contains', 'state']);\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader title={t`Task Management`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No tasks yet`}\n            description={t`Tasks will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-list-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) =>\n                              this.updateParams(p, () => this.queryTasks())\n                            }\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name__contains',\n                                title: t`Task name`,\n                              },\n                              {\n                                id: 'state',\n                                title: t`Status`,\n                                inputType: 'select',\n                                options: [\n                                  {\n                                    id: 'completed',\n                                    title: t`Completed`,\n                                  },\n                                  {\n                                    id: 'failed',\n                                    title: t`Failed`,\n                                  },\n                                  {\n                                    id: 'running',\n                                    title: t`Running`,\n                                  },\n                                  {\n                                    id: 'waiting',\n                                    title: t`Waiting`,\n                                  },\n                                ],\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.queryTasks())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.queryTasks());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name__contains: t`Task name`,\n                      state: t`Status`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryTasks())\n                  }\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (items.length === 0) {\n      return <EmptyStateFilter />;\n    }\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Task name`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Created on`,\n          type: 'numeric',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Started at`,\n          type: 'numeric',\n          id: 'started_at',\n        },\n        {\n          title: t`Finished at`,\n          type: 'numeric',\n          id: 'finished_at',\n        },\n        {\n          title: t`Status`,\n          type: 'alpha',\n          id: 'state',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Task list`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => this.updateParams(p, () => this.queryTasks())}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, state, pulp_created, started_at, finished_at, pulp_href } =\n      item;\n    const taskId = parsePulpIDFromURL(pulp_href);\n    return (\n      <tr key={index}>\n        <td>\n          <Link to={formatPath(Paths.taskDetail, { task: taskId })}>\n            <Tooltip\n              content={\n                (Constants.TASK_NAMES[name] &&\n                  i18n._(Constants.TASK_NAMES[name])) ||\n                name\n              }\n            >\n              {name}\n            </Tooltip>\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <DateComponent date={started_at} />\n        </td>\n        <td>\n          <DateComponent date={finished_at} />\n        </td>\n        <td>\n          <StatusIndicator status={state} />\n        </td>\n        <td>{this.cancelButton(state, item)}</td>\n      </tr>\n    );\n  }\n\n  private cancelButton(state, selectedTask) {\n    switch (state) {\n      case 'running':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n      case 'waiting':\n        return (\n          <Button\n            variant='secondary'\n            aria-label={t`Delete`}\n            key='delete'\n            onClick={() =>\n              this.setState({\n                cancelModalVisible: true,\n                selectedTask: selectedTask,\n              })\n            }\n          >\n            {t`Stop task`}\n          </Button>\n        );\n    }\n  }\n\n  private renderCancelModal() {\n    const name =\n      Constants.TASK_NAMES[this.state.selectedTask.name] ||\n      this.state.selectedTask.name;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        title={t`Stop task?`}\n        confirmAction={() => this.selectedTask(this.state.selectedTask, name)}\n        confirmButtonTitle={t`Yes, stop`}\n      >{t`${name} will be cancelled.`}</ConfirmModal>\n    );\n  }\n\n  private selectedTask(task, name) {\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          selectedTask: null,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: name,\n              description: (\n                <Trans>Task &quot;{name}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.queryTasks();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${name}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private queryTasks() {\n    this.setState({ loading: true }, () => {\n      TaskManagementAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n            alerts: [\n              ...this.state.alerts,\n              {\n                variant: 'danger',\n                title: t`Tasks list could not be displayed.`,\n                description: errorMessage(status, statusText),\n              },\n            ],\n          });\n        });\n    });\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(TaskListView);\n\nTaskListView.contextType = AppContext;\n"],"names":["TaskListView","props","params","ParamHelper","location","search","state","items","loading","itemCount","alerts","cancelModalVisible","selectedTask","unauthorised","inputText","this","context","user","hasPermission","is_anonymous","setState","queryTasks","addAlert","noData","length","filterIsSet","closeAlert","i","renderCancelModal","title","description","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","onChange","text","updateParams","p","filterConfig","id","inputType","options","count","isTop","ignoredParams","niceNames","name__contains","renderTable","sortTableOptions","headers","type","map","item","renderTableRow","index","name","pulp_created","started_at","finished_at","pulp_href","taskId","parsePulpIDFromURL","key","Link","to","formatPath","Paths","task","content","Constants","i18n","date","status","cancelButton","Button","variant","onClick","cancelAction","confirmAction","confirmButtonTitle","TaskManagementAPI","then","e","response","statusText","errorMessage","closeAlertMixin","result","data","results","React","withRouter","contextType","AppContext"],"sourceRoot":""}
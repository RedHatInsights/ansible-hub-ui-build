{"version":3,"file":"js/5781.44fc9dbc0a65ec4a7c68.js","mappings":"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","sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.tsx"],"sourcesContent":["import {\n  CollectionAPI,\n  CollectionVersionAPI,\n  CollectionVersionContentType,\n  CollectionVersionSearch,\n} from 'src/api';\nimport { AlertType } from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collections?: CollectionVersionSearch[];\n  collectionsCount?: number;\n  collection?: CollectionVersionSearch;\n  content?: CollectionVersionContentType;\n  alerts?: AlertType[];\n  distroBasePath?: string;\n}\n\n// Caches the collection data when matching, prevents redundant fetches between collection detail tabs\nconst cache = {\n  repository: null,\n  namespace: null,\n  name: null,\n  version: null,\n\n  collections: [],\n  collectionsCount: 0,\n  collection: null,\n  content: null,\n};\n\nexport function loadCollection({\n  forceReload,\n  matchParams,\n  navigate,\n  setCollection,\n  stateParams,\n}) {\n  const { version } = stateParams;\n  const { collection: name, namespace, repo } = matchParams;\n\n  // try loading from cache\n  if (\n    !forceReload &&\n    cache.repository === repo &&\n    cache.namespace === namespace &&\n    cache.name === name &&\n    cache.version === version\n  ) {\n    setCollection(\n      cache.collections,\n      cache.collection,\n      cache.content,\n      cache.collectionsCount,\n    );\n    return;\n  }\n\n  const requestParams = {\n    ...(repo ? { repository_name: repo } : {}),\n    namespace,\n    name,\n  };\n\n  const currentVersion = (\n    version\n      ? CollectionVersionAPI.list({ ...requestParams, version })\n      : CollectionVersionAPI.list({ ...requestParams, is_highest: true })\n  ).then(({ data }) => data.data[0]);\n\n  const content = currentVersion\n    .then((collection) =>\n      CollectionAPI.getContent(\n        namespace,\n        name,\n        collection.collection_version.version,\n      ),\n    )\n    .then(({ data: { results } }) => results[0])\n    .catch(() => navigate(formatPath(Paths.notFound)));\n\n  const versions = CollectionVersionAPI.list({\n    ...requestParams,\n    order_by: '-version',\n    page_size: 10,\n  })\n    .then(({ data }) => data)\n    .catch(() => ({ data: [], meta: { count: 0 } }));\n\n  return Promise.all([versions, currentVersion, content]).then(\n    ([\n      {\n        data: collections,\n        meta: { count: collectionsCount },\n      },\n      collection,\n      content,\n    ]) => {\n      setCollection(collections, collection, content, collectionsCount);\n\n      cache.repository = repo;\n      cache.namespace = namespace;\n      cache.name = name;\n      cache.version = version;\n\n      cache.collections = collections;\n      cache.collectionsCount = collectionsCount;\n      cache.collection = collection;\n      cache.content = content;\n    },\n  );\n}\n","import { isEqual } from 'lodash';\nimport * as React from 'react';\nimport {\n  AlertList,\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath, namespaceBreadcrumb } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { IBaseCollectionState, loadCollection } from './base';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collections: [],\n      collectionsCount: 0,\n      collection: null,\n      content: null,\n      distroBasePath: null,\n      params: params,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollections(true);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.location, this.props.location)) {\n      this.loadCollections(false);\n    }\n  }\n\n  render() {\n    const {\n      collections,\n      collectionsCount,\n      collection,\n      content,\n      params,\n      alerts,\n    } = this.state;\n\n    if (collections.length <= 0) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const { collection_version: version } = collection;\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceDetail, {\n          namespace: version.namespace,\n        }),\n        name: version.namespace,\n      },\n      {\n        name: version.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <CollectionHeader\n          reload={() => this.loadCollections(true)}\n          collections={collections}\n          collectionsCount={collectionsCount}\n          collection={collection}\n          content={content}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.loadCollections(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='install'\n          repo={this.props.routeParams.repo}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionInfo\n              {...collection}\n              content={content}\n              updateParams={(p) => this.updateParams(p)}\n              params={this.state.params}\n              addAlert={(variant, title, description) =>\n                this.setState({\n                  alerts: [\n                    ...this.state.alerts,\n                    {\n                      variant,\n                      title,\n                      description,\n                    },\n                  ],\n                })\n              }\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadCollections(forceReload) {\n    loadCollection({\n      forceReload,\n      matchParams: this.props.routeParams,\n      navigate: this.props.navigate,\n      setCollection: (collections, collection, content, collectionsCount) =>\n        this.setState({\n          collections,\n          collection,\n          content,\n          collectionsCount,\n        }),\n      stateParams: this.state.params,\n    });\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CollectionDetail);\n\nCollectionDetail.contextType = AppContext;\n"],"names":["cache","repository","namespace","name","version","collections","collectionsCount","collection","content","loadCollection","_ref","forceReload","matchParams","navigate","setCollection","stateParams","repo","requestParams","_objectSpread","repository_name","currentVersion","CollectionVersionAPI","is_highest","then","_ref2","data","CollectionAPI","collection_version","_ref3","results","formatPath","Paths","versions","order_by","page_size","_ref4","meta","count","Promise","all","_ref5","_ref6","_slicedToArray","_ref6$","CollectionDetail","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","distroBasePath","alerts","_createClass","key","value","this","loadCollections","prevProps","isEqual","_this2","_this$state","length","React","LoadingPageWithHeader","breadcrumbs","namespaceBreadcrumb","url","AlertList","closeAlert","i","CollectionHeader","reload","updateParams","p","activeTab","routeParams","Main","className","CollectionInfo","_extends","addAlert","variant","title","description","setState","concat","_toConsumableArray","_this3","get","closeAlertMixin","withRouter","contextType","AppContext"],"sourceRoot":""}
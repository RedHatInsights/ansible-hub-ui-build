{"version":3,"file":"js/8973.702d1dc3968dda606a0c.js","mappings":"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","sources":["webpack:///./src/containers/signature-keys/list.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  DropdownItem,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport * as React from 'react';\nimport { SigningServiceAPI, SigningServiceType } from 'src/api';\nimport {\n  AlertList,\n  AlertType,\n  AppliedFilters,\n  BaseHeader,\n  ClipboardCopy,\n  CompoundFilter,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  ListItemActions,\n  LoadingPageSpinner,\n  Main,\n  Pagination,\n  SortTable,\n  closeAlertMixin,\n} from 'src/components';\nimport { AppContext } from 'src/loaders/app-context';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport { ParamHelper, errorMessage, filterIsSet } from 'src/utilities';\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n  };\n  loading: boolean;\n  items: SigningServiceType[];\n  itemCount: number;\n  alerts: AlertType[];\n  unauthorised: boolean;\n  inputText: string;\n}\n\nexport class SignatureKeysList extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 100;\n    }\n\n    this.state = {\n      params: params,\n      items: [],\n      loading: true,\n      itemCount: 0,\n      alerts: [],\n      unauthorised: false,\n      inputText: '',\n    };\n  }\n\n  componentDidMount() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      this.setState({ loading: false, unauthorised: true });\n    } else {\n      this.query();\n    }\n  }\n\n  render() {\n    const { params, itemCount, loading, items, alerts, unauthorised } =\n      this.state;\n\n    const noData = items.length === 0 && !filterIsSet(params, ['name']);\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        <BaseHeader title={t`Signature Keys`} />\n        {unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : noData && !loading ? (\n          <EmptyStateNoData\n            title={t`No signature keys yet`}\n            description={t`Signature keys will appear once created.`}\n          />\n        ) : (\n          <Main>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              <section className='body'>\n                <div className='hub-list-toolbar'>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <ToolbarGroup>\n                        <ToolbarItem>\n                          <CompoundFilter\n                            inputText={this.state.inputText}\n                            onChange={(text) =>\n                              this.setState({ inputText: text })\n                            }\n                            updateParams={(p) => {\n                              p['page'] = 1;\n                              this.updateParams(p, () => this.query());\n                            }}\n                            params={params}\n                            filterConfig={[\n                              {\n                                id: 'name',\n                                title: t`Name`,\n                              },\n                            ]}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                    </ToolbarContent>\n                  </Toolbar>\n                  <Pagination\n                    params={params}\n                    updateParams={(p) =>\n                      this.updateParams(p, () => this.query())\n                    }\n                    count={itemCount}\n                    isTop\n                  />\n                </div>\n                <div>\n                  <AppliedFilters\n                    updateParams={(p) => {\n                      this.updateParams(p, () => this.query());\n                      this.setState({ inputText: '' });\n                    }}\n                    params={params}\n                    ignoredParams={['page_size', 'page', 'sort', 'ordering']}\n                    niceNames={{\n                      name: t`Name`,\n                    }}\n                  />\n                </div>\n                {loading ? <LoadingPageSpinner /> : this.renderTable(params)}\n\n                <Pagination\n                  params={params}\n                  updateParams={(p) => this.updateParams(p, () => this.query())}\n                  count={itemCount}\n                />\n              </section>\n            )}\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(params) {\n    const { items } = this.state;\n    if (!items.length) {\n      return <EmptyStateFilter />;\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Name`,\n          type: 'none',\n          id: 'name',\n        },\n        {\n          title: t`Key fingerprint`,\n          type: 'none',\n          id: 'pubkey_fingerprint',\n        },\n        {\n          title: t`Created on`,\n          type: 'none',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Public key`,\n          type: 'none',\n          id: 'public_key',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'kebab',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label={t`Signature keys`}\n        className='hub-c-table-content pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) => {\n            p['page'] = 1;\n            this.updateParams(p, () => this.query());\n          }}\n        />\n        <tbody>{items.map((item, i) => this.renderTableRow(item, i))}</tbody>\n      </table>\n    );\n  }\n\n  private renderTableRow(item, index: number) {\n    const { name, pubkey_fingerprint, public_key, pulp_created } = item;\n\n    const dropdownItems = [\n      <DropdownItem\n        key='download-key'\n        onClick={() => {\n          document.location =\n            'data:application/octet-stream,' + encodeURIComponent(public_key);\n        }}\n      >\n        {t`Download key`}\n      </DropdownItem>,\n    ];\n\n    return (\n      <tr key={index}>\n        <td>{name}</td>\n        <td>{pubkey_fingerprint}</td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <td>\n          <ClipboardCopy isCode isReadOnly variant={'expansion'}>\n            {public_key}\n          </ClipboardCopy>\n        </td>\n        <ListItemActions kebabItems={dropdownItems} />\n      </tr>\n    );\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private query() {\n    this.setState({ loading: true }, () => {\n      SigningServiceAPI.list(this.state.params)\n        .then((result) => {\n          this.setState({\n            items: result.data.results,\n            itemCount: result.data.count,\n            loading: false,\n          });\n        })\n        .catch((e) => {\n          const { status, statusText } = e.response;\n          this.setState({\n            loading: false,\n            items: [],\n            itemCount: 0,\n          });\n          this.addAlert({\n            title: t`Signature keys could not be displayed.`,\n            variant: 'danger',\n            description: errorMessage(status, statusText),\n          });\n        });\n    });\n  }\n\n  private addAlert(alert: AlertType) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(SignatureKeysList);\n\nSignatureKeysList.contextType = AppContext;\n"],"names":["SignatureKeysList","_React$Component","_inherits","_super","props","_this","_classCallCheck","call","params","ParamHelper","location","search","state","items","loading","itemCount","alerts","unauthorised","inputText","_createClass","key","value","this","context","user","is_anonymous","setState","query","_this2","_this$state","noData","length","filterIsSet","React","AlertList","closeAlert","i","BaseHeader","title","i18n","EmptyStateUnauthorized","EmptyStateNoData","description","Main","LoadingPageSpinner","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","id","Pagination","count","isTop","AppliedFilters","ignoredParams","niceNames","name","renderTable","_this3","EmptyStateFilter","sortTableOptions","headers","type","SortTable","options","map","item","renderTableRow","index","pubkey_fingerprint","public_key","pulp_created","dropdownItems","DropdownItem","onClick","document","encodeURIComponent","DateComponent","date","ClipboardCopy","isCode","isReadOnly","variant","ListItemActions","kebabItems","get","closeAlertMixin","_this4","SigningServiceAPI","then","result","data","results","e","_e$response","response","status","statusText","addAlert","errorMessage","alert","concat","_toConsumableArray","withRouter","contextType","AppContext"],"sourceRoot":""}
{"version":3,"file":"js/my_imports.1666021906472.173d84a4a5f47ee4d03a.js","mappings":"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","sources":["webpack:///./src/containers/my-imports/my-imports.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport './my-imports.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { cloneDeep } from 'lodash';\n\nimport {\n  BaseHeader,\n  ImportConsole,\n  ImportList,\n  Main,\n  closeAlertMixin,\n  AlertType,\n  AlertList,\n} from 'src/components';\n\nimport {\n  ImportAPI,\n  ImportDetailType,\n  ImportListType,\n  PulpStatus,\n  CollectionVersion,\n  CollectionVersionAPI,\n} from 'src/api';\n\nimport { ParamHelper } from 'src/utilities/param-helper';\n\ninterface IState {\n  selectedImport: ImportListType;\n  importList: ImportListType[];\n  selectedImportDetails: ImportDetailType;\n  selectedCollectionVersion: CollectionVersion;\n  params: {\n    page_size?: number;\n    page?: number;\n    keyword?: string;\n    namespace?: string;\n  };\n  resultsCount: number;\n  importDetailError: string;\n  followLogs: boolean;\n  loadingImports: boolean;\n  loadingImportDetails: boolean;\n  alerts: AlertType[];\n}\n\nclass MyImports extends React.Component<RouteComponentProps, IState> {\n  polling: ReturnType<typeof setInterval>;\n  topOfPage: React.RefObject<HTMLDivElement>;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    this.topOfPage = React.createRef();\n\n    this.state = {\n      selectedImport: undefined,\n      importList: [],\n      params: params,\n      selectedImportDetails: undefined,\n      resultsCount: 0,\n      importDetailError: '',\n      followLogs: false,\n      loadingImports: true,\n      loadingImportDetails: true,\n      selectedCollectionVersion: undefined,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    // Load namespaces, use the namespaces to query the import list,\n    // use the import list to load the task details\n    this.loadImportList(() => this.loadTaskDetails());\n\n    this.polling = setInterval(() => {\n      if (!this.state.params.namespace) {\n        return;\n      }\n\n      const { selectedImport, selectedImportDetails } = this.state;\n      const allowedStates = [PulpStatus.running, PulpStatus.waiting];\n\n      // selectedImportDetails can be failed while selectedImport is still running, poll() updates selectedImport\n      if (\n        allowedStates.includes(selectedImportDetails?.state) ||\n        allowedStates.includes(selectedImport?.state)\n      ) {\n        this.poll();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.polling);\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private addAlert(alert) {\n    this.setState({\n      alerts: [...this.state.alerts, alert],\n    });\n  }\n\n  render() {\n    const {\n      selectedImport,\n      importList,\n      params,\n      selectedImportDetails,\n      resultsCount,\n      loadingImports,\n      loadingImportDetails,\n      importDetailError,\n      followLogs,\n      selectedCollectionVersion,\n    } = this.state;\n\n    if (!importList) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <div ref={this.topOfPage}></div>\n        <BaseHeader title={t`My imports`} />\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <Main>\n          <section className='body'>\n            <div className='hub-page-container' data-cy='MyImports'>\n              <div className='import-list'>\n                <ImportList\n                  addAlert={(alert) => this.addAlert(alert)}\n                  importList={importList}\n                  selectedImport={selectedImport}\n                  loading={loadingImports}\n                  numberOfResults={resultsCount}\n                  params={params}\n                  selectImport={(sImport) => this.selectImport(sImport)}\n                  updateParams={(params) => {\n                    this.updateParams(params, () => {\n                      if (params.namespace) {\n                        this.setState(\n                          {\n                            loadingImports: true,\n                            loadingImportDetails: true,\n                          },\n                          () =>\n                            this.loadImportList(() => this.loadTaskDetails()),\n                        );\n                      } else {\n                        this.setState({\n                          importDetailError: t`No data`,\n                          loadingImportDetails: false,\n                        });\n                      }\n                    });\n                  }}\n                />\n              </div>\n\n              <div className='hub-import-console'>\n                <ImportConsole\n                  empty={!this.state.params.namespace}\n                  loading={loadingImportDetails}\n                  task={selectedImportDetails}\n                  followMessages={followLogs}\n                  setFollowMessages={(isFollowing) => {\n                    this.setState({\n                      followLogs: isFollowing,\n                    });\n                  }}\n                  selectedImport={selectedImport}\n                  apiError={importDetailError}\n                  collectionVersion={selectedCollectionVersion}\n                />\n              </div>\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private selectImport(sImport) {\n    this.setState(\n      { selectedImport: sImport, loadingImportDetails: true },\n      () => {\n        this.topOfPage.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n        this.loadTaskDetails();\n      },\n    );\n  }\n\n  private poll() {\n    this.loadTaskDetails(() => {\n      // Update the state of the selected import in the list if it's\n      // different from the one loaded from the API.\n      const { selectedImport, selectedImportDetails, importList } = this.state;\n\n      if (!selectedImportDetails) {\n        return;\n      }\n\n      if (selectedImport.state !== selectedImportDetails.state) {\n        const importIndex = importList.findIndex(\n          (x) => x.id === selectedImport.id,\n        );\n\n        const imports = cloneDeep(importList);\n        const newSelectedImport = cloneDeep(selectedImport);\n\n        newSelectedImport.state = selectedImportDetails.state;\n        newSelectedImport.finished_at = selectedImportDetails.finished_at;\n\n        imports[importIndex] = newSelectedImport;\n\n        this.setState({\n          selectedImport: newSelectedImport,\n          importList: imports,\n        });\n      }\n    });\n  }\n\n  private loadImportList(callback?: () => void) {\n    if (!this.state.params.namespace) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n      return;\n    }\n\n    ImportAPI.list({ ...this.state.params, sort: '-created' })\n      .then((importList) => {\n        this.setState(\n          {\n            importList: importList.data.data,\n            selectedImport: importList.data.data[0],\n            resultsCount: importList.data.meta.count,\n            loadingImports: false,\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadTaskDetails(callback?: () => void) {\n    if (!this.state.selectedImport) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n    } else {\n      ImportAPI.get(this.state.selectedImport.id)\n        .then((result) => {\n          this.setState(\n            {\n              importDetailError: '',\n              loadingImportDetails: false,\n              selectedImportDetails: result.data,\n              selectedCollectionVersion: undefined,\n            },\n            () => {\n              const importDeets = this.state.selectedImportDetails;\n\n              // have to use list instead of get because repository_list isn't\n              // available on collection version details\n              CollectionVersionAPI.list({\n                namespace: importDeets.namespace,\n                name: importDeets.name,\n                version: importDeets.version,\n              })\n                .then((result) => {\n                  if (result.data.meta.count === 1) {\n                    this.setState({\n                      selectedCollectionVersion: result.data.data[0],\n                    });\n                  }\n                })\n                .finally(() => {\n                  if (callback) {\n                    callback();\n                  }\n                });\n            },\n          );\n        })\n        .catch(() => {\n          this.setState({\n            selectedImportDetails: undefined,\n            importDetailError: t`Error fetching import from API`,\n            loadingImportDetails: false,\n          });\n        });\n    }\n  }\n}\n\nexport default withRouter(MyImports);\n"],"names":["MyImports","props","params","ParamHelper","location","search","topOfPage","React","state","selectedImport","undefined","importList","selectedImportDetails","resultsCount","importDetailError","followLogs","loadingImports","loadingImportDetails","selectedCollectionVersion","alerts","this","loadImportList","loadTaskDetails","polling","setInterval","namespace","allowedStates","PulpStatus","includes","poll","clearInterval","closeAlertMixin","alert","setState","ref","title","closeAlert","i","className","addAlert","loading","numberOfResults","selectImport","sImport","updateParams","empty","task","followMessages","setFollowMessages","isFollowing","apiError","collectionVersion","current","scrollIntoView","behavior","importIndex","findIndex","x","id","imports","newSelectedImport","finished_at","callback","ImportAPI","sort","then","data","meta","count","result","console","log","importDeets","CollectionVersionAPI","name","version","withRouter"],"sourceRoot":""}
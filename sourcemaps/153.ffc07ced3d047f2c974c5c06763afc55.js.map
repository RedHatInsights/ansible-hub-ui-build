{"version":3,"file":"js/153.ae33d3fbaf8a3fd1f55f.js","mappings":"4WAuDA,IAAMA,EAAiB,SAACC,GAAI,OACzBC,EAAAA,EAAAA,WAAqBD,IAASE,EAAAA,GAAAA,EAAOD,EAAAA,EAAAA,WAAqBD,KAAWA,CAAI,EAEtEG,EAAU,6B,IAAA,G,EAAA,E,gaACd,WAAYC,GAAO,MAaf,OAbe,gBACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTC,KAAM,KACNC,WAAY,KACZC,WAAY,GACZC,OAAQ,GACRC,oBAAoB,EACpBC,SAAU,GACVC,UAAW,GACXC,SAAU,KACVC,QAAS,MACT,CACJ,CA4bC,OA5bA,yCAED,WACEC,KAAKC,aACP,GAAC,kCAED,WACMD,KAAKX,MAAMU,SACbG,cAAcF,KAAKX,MAAMU,QAE7B,GAAC,gCAED,SAAmBI,GACbA,EAAUC,YAAYb,OAASS,KAAKZ,MAAMgB,YAAYb,OACxDS,KAAKK,SAAS,CAAEf,SAAS,IACzBU,KAAKC,cAET,GAAC,oBAED,WAAS,WACP,EAUID,KAAKX,MATPC,EAAO,EAAPA,QACAC,EAAI,EAAJA,KACAC,EAAU,EAAVA,WACAC,EAAU,EAAVA,WACAE,EAAkB,EAAlBA,mBACAD,EAAM,EAANA,OACAE,EAAQ,EAARA,SACAC,EAAS,EAATA,UACAC,EAAQ,EAARA,SAEIQ,EAAc,CAClB,CAAEC,KAAKC,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,UAAiBzB,KAAM,2BACzC,CAAEA,KAAMO,EAAOK,EAAW,KAExBc,EAAe,KAInB,OAHIlB,IACFkB,GAAeC,EAAAA,EAAAA,GAAmBnB,EAAWoB,YAE3Cd,EACK,gBAAC,EAAAe,SAAQ,CAACC,GAAIhB,IAGhBR,EACL,gBAAC,KAAkB,MAEnB,gBAAC,WAAc,KACb,gBAAC,KAAS,CACRI,OAAQA,EACRqB,WAAY,SAACC,GAAC,OAAK,EAAKD,WAAWC,EAAE,IAEtCrB,EAAqBK,KAAKiB,oBAAsB,KACjD,gBAAC,KAAU,CACTC,MAAOtB,EACPU,YAAa,gBAAC,KAAW,CAACa,MAAOb,IACjCc,aACE,CAAC,UAAW,WAAWC,SAAS9B,EAAKF,QACnC,gBAAC,EAAAiC,OAAM,CACLC,QAAQ,YACRC,QAAS,kBAAM,EAAKnB,SAAS,CAAEV,oBAAoB,GAAO,GAEzD,qBAIP8B,OACE,gBAAC,KAAe,CACdC,UAAW,oBACXD,OAAQlC,EAAKF,UAInB,gBAAC,KAAI,KACH,gBAAC,EAAAsC,KAAI,KACH,gBAAC,EAAAA,KAAI,CACHC,UAAW,CAAEC,QAAS,UACtBC,KAAM,CAAED,QAAS,WAEjB,gBAAC,EAAAE,SAAQ,KACP,2BAASL,UAAU,kBACjB,gBAAC,EAAAM,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B,uBAEH,2BACA,gBAAC,EAAAC,gBAAe,CAACC,cAAY,GAC3B,gBAAC,EAAAC,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,qBACtB,gBAAC,EAAAC,2BAA0B,KACxBhD,EAAKP,OAGTO,EAAKP,OAASY,GACb,gBAAC,EAAAyC,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,4BACtB,gBAAC,EAAAC,2BAA0B,KACxB3C,IAIP,gBAAC,EAAAyC,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,uBACtB,gBAAC,EAAAC,2BAA0B,KACzB,gBAAC,KAAa,CAACC,KAAMjD,EAAKkD,gBAG9B,gBAAC,EAAAJ,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,sBACtB,gBAAC,EAAAC,2BAA0B,KACzB,gBAAC,KAAa,CAACC,KAAMjD,EAAKmD,oBAMpC,gBAAC,EAAAX,SAAQ,KACP,2BAASL,UAAU,kBACjB,gBAAC,EAAAM,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B,uBAEH,2BACA,gBAAC,EAAAC,gBAAe,CAACC,cAAY,GAC3B,gBAAC,EAAAC,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,sBACtB,gBAAC,EAAAC,2BAA0B,KACxBhD,EAAKoD,WAAapD,EAAKoD,WAAa,0BAGzC,gBAAC,EAAAN,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,uBACtB,gBAAC,EAAAC,2BAA0B,KACxB/C,EACC,gBAAC,EAAAoD,KAAI,CACH9B,IAAIN,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,WAAkB,CAC/BlB,KAAMmB,KAGP3B,EAAeS,EAAWR,OAG7B,2BAIN,gBAAC,EAAAqD,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,uBACtB,gBAAC,EAAAC,2BAA0B,KACxB9C,EAAWoD,OACRpD,EAAWqD,KAAI,SAACC,GACd,IAAMC,GAAcrC,EAAAA,EAAAA,GAClBoC,EAAUnC,WAEZ,OACE,gBAAC,WAAc,CAACqC,IAAKD,GACnB,gBAAC,EAAAJ,KAAI,CACH9B,IAAIN,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,WAAkB,CAC/BlB,KAAMyD,KAGPjE,EAAegE,EAAU/D,OAE5B,2BAGN,IACA,6BAMd,gBAAC,EAAA+C,SAAQ,KACP,2BAASL,UAAU,kBACjB,gBAAC,EAAAM,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B,6BAEH,2BACCrC,EAAUgD,OACT,gBAAC,EAAAV,gBAAe,CAACC,cAAY,GAC1BvC,EAAUiD,KAAI,SAACI,EAAUC,GACxB,OACE,gBAAC,WAAc,CAACF,IAAKC,EAASE,KAAOD,GACnC,2BACA,gBAAC,EAAAd,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,gBACtB,gBAAC,EAAAC,2BAA0B,KACxBW,EAASE,OAGbF,EAASG,YACR,gBAAC,EAAAhB,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,kBACtB,gBAAC,EAAAC,2BAA0B,KACxBW,EAASG,aAIfH,EAASlE,MACR,gBAAC,EAAAqD,qBAAoB,KACnB,gBAAC,EAAAC,oBAAmB,KAAE,gBACtB,gBAAC,EAAAC,2BAA0B,KACxBW,EAASlE,OAMtB,KAGF,wCAKR,gBAAC,EAAA2C,KAAI,CACHC,UAAW,CAAEC,QAAS,UACtBC,KAAM,CAAED,QAAS,WAEjB,gBAAC,EAAAE,SAAQ,MACLxC,EAAK+D,OACL,2BAAS5B,UAAU,kBACjB,gBAAC,EAAAM,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B,6BAEH,2BACC3C,EAAKgE,iBAAiBV,OACrB,gBAAC,EAAAV,gBAAe,CAACC,cAAY,GAC1B7C,EAAKgE,iBACHC,UACAV,KAAI,SAACW,EAAQN,GACZ,OACE,gBAAC,WAAc,CAACF,IAAKE,GACnB,2BACCO,OAAOC,KAAKF,GAAQX,KAAI,SAACG,EAAKE,GAC7B,QACIM,EAAOR,IACP,gBAAC,EAAAZ,qBAAoB,CAACY,IAAKA,EAAME,GAC/B,gBAAC,EAAAb,oBAAmB,KACjB,CACCsB,QAAS,kBACTC,KAAM,eACNxE,MAAO,gBACPyE,KAAM,gBACNb,IAAQ,IAAWA,IAEvB,gBAAC,EAAAV,2BAA0B,KACxBkB,EAAOR,IAKlB,IAAI,IAGV,KAGJ,gBAAC,KAAgB,CACfc,KAAMC,EAAAA,GACN9C,MAAO,wCACP+C,YAAa,6CAKlB1E,EAAK+D,OACN,2BAAS5B,UAAU,kBACjB,gBAAC,EAAAM,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B,yBAEH,2BACA,gBAAC,WAAc,KACb,gBAAC,EAAAF,MAAK,CAACC,aAAa,MAAM,uBAC1B,gBAAC,EAAAiC,UAAS,KAAE3E,EAAK+D,MAAMW,aACvB,gBAAC,EAAAjC,MAAK,CAACC,aAAa,MAAM,qBAC1B,gBAAC,EAAAiC,UAAS,CAACxC,UAAW,kBACnBnC,EAAK+D,MAAMa,iBAWlC,GAAC,+BAED,WAA4B,WACpBnF,EAAOgB,KAAKX,MAAMO,SACxB,OACE,gBAAC,KAAY,CACXwE,aAAc,kBAAM,EAAK/D,SAAS,CAAEV,oBAAoB,GAAQ,EAChE0E,cAAe,kBAAM,EAAKC,YAAY,EACtCpD,MAAO,oBACPqD,mBAAoB,qBAEnB,yCAAIvF,IAGX,GAAC,wBAED,WAAqB,WACnB,EAA2BgB,KAAKX,MAAxBE,EAAI,EAAJA,KAAMK,EAAQ,EAARA,SACd4E,EAAAA,GAAAA,OAAwB7D,EAAAA,EAAAA,GAAmBpB,EAAKqB,WAAY,CAC1DvB,MAAO,aAENoF,MAAK,WACJ,EAAKpE,SAAS,CACZf,SAAS,EACTK,oBAAoB,EACpBD,OAAQ,GAAF,eACD,EAAKL,MAAMK,QAAM,CACpB,CACE6B,QAAS,UACTL,MAAOtB,EACPqE,YACE,oFAAmBrE,UAK3B,EAAKK,aACP,IAAE,OACK,SAACyE,GACN,MAA+BA,EAAEC,SAAzBlD,EAAM,EAANA,OAAQmD,EAAU,EAAVA,WAChB,EAAKvE,SAAS,CACZf,SAAS,EACTK,oBAAoB,EACpBD,OAAQ,GAAF,eACD,EAAKL,MAAMK,QAAM,CACpB,CACE6B,QAAS,SACTL,MAAO,2DAAUtB,IACjBqE,aAAaY,EAAAA,EAAAA,IAAapD,EAAQmD,QAIxC,EAAK3E,aACP,GACJ,GAAC,yBAED,WAAsB,WACfD,KAAKX,MAAMU,SAAYC,KAAKX,MAAME,MACrCS,KAAKK,SAAS,CAAEN,QAAS+E,aAAY,kBAAM,EAAK7E,aAAa,GAAE,OAGjE,IAAM8E,EAAS/E,KAAKZ,MAAMgB,YAAYb,KACtC,OAAOiF,EAAAA,GAAAA,IAAsBO,GAC1BN,MAAK,SAACO,GACL,IAAMC,EAAkB,GACpBzF,EAAa,KACXC,EAAa,GACbI,EAAY,GAKlB,GAJI,CAAC,WAAY,YAAa,UAAUwB,SAAS2D,EAAOE,KAAK7F,SAC3Da,cAAc,EAAKb,MAAMU,SACzB,EAAKM,SAAS,CAAEN,QAAS,QAEvBiF,EAAOE,KAAKC,YAAa,CAC3B,IAAMzE,GAAeC,EAAAA,EAAAA,GAAmBqE,EAAOE,KAAKC,aACpDF,EAAgBG,KACdZ,EAAAA,GAAAA,IAAsB9D,GACnB+D,MAAK,SAACO,GACLxF,EAAawF,EAAOE,IACtB,IAAE,OACK,WACL,OAAO,CACT,IAEN,CAwDA,OAvDIF,EAAOE,KAAKG,YAAYxC,QAC1BmC,EAAOE,KAAKG,YAAYC,SAAQ,SAACC,GAC/B,IAAMvC,GAAcrC,EAAAA,EAAAA,GAAmB4E,GACvCN,EAAgBG,KACdZ,EAAAA,GAAAA,IAAsBxB,GACnByB,MAAK,SAACO,GACLvF,EAAW2F,KAAKJ,EAAOE,KACzB,IAAE,OACK,WACL,OAAO,CACT,IAEN,IAEEF,EAAOE,KAAKM,0BAA0B3C,QACxCmC,EAAOE,KAAKM,0BAA0BF,SAAQ,SAACpC,GAC7C,IAAM3C,EAAM2C,EAASuC,QAAQC,mCAAoB,IAC3CC,GAAKhF,EAAAA,EAAAA,GAAmBJ,GACxBqF,EAAWrF,EAAIsF,MAAM,KACvBC,EAAe,GACfzC,EAAa,GAQbuC,EAAS/C,QAAU,GACrBiD,EAAe,GAAH,OAAMF,EAAS,GAAE,aAAKA,EAAS,IAC3CvC,EAAauC,EAAS,IAGtB1C,EAAW0C,EAAS,GAGlBD,EACFV,EAAgBG,KACdW,EAAAA,GAAAA,IAAmBxF,GAChBkE,MAAK,SAACO,GACLnF,EAAUuF,KAAK,CACbpG,KAAMgG,EAAOE,KAAKlG,KAClBoE,KAAM0C,EACNzC,WAAYA,GAEhB,IAAE,OACK,WACL,OAAO,CACT,KAGJxD,EAAUuF,KAAK,CAAEhC,KAAM0C,GAE3B,IAEKE,QAAQC,IAAIhB,GAAiBR,MAAK,WACvC,EAAKpE,SAAS,CACZd,KAAMyF,EAAOE,KACbzF,WAAAA,EACAD,WAAAA,EACAF,SAAS,EACTM,SAAUb,EAAeiG,EAAOE,KAAKlG,MACrCa,UAAAA,GAEJ,GACF,IAAE,OACK,WACL,EAAKQ,SAAS,CAAEP,UAAUU,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,WACvC,GACJ,GAAC,sBAED,WACE,OAAOyF,EAAAA,EAAAA,IAAgB,SACzB,KAAC,EA3ca,CAASC,EAAAA,WA8czB,SAAeC,EAAAA,EAAAA,IAAWjH,E","sources":["webpack:///./src/containers/task-management/task_detail.tsx"],"sourcesContent":["import { i18n } from '@lingui/core';\nimport { Trans, t } from '@lingui/macro';\nimport {\n  Button,\n  CodeBlock,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Title,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\nimport { capitalize } from 'lodash';\nimport * as React from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport { GenericPulpAPI, TaskManagementAPI } from 'src/api';\nimport { TaskType } from 'src/api/response-types/task';\nimport {\n  AlertList,\n  AlertType,\n  BaseHeader,\n  Breadcrumbs,\n  ConfirmModal,\n  DateComponent,\n  EmptyStateCustom,\n  LoadingPageSpinner,\n  Main,\n  StatusIndicator,\n  closeAlertMixin,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { Paths, formatPath } from 'src/paths';\nimport { RouteProps, errorMessage, withRouter } from 'src/utilities';\nimport { parsePulpIDFromURL } from 'src/utilities/parse-pulp-id';\nimport './task.scss';\n\ninterface IState {\n  loading: boolean;\n  task: TaskType;\n  parentTask: TaskType;\n  childTasks: TaskType[];\n  alerts: AlertType[];\n  cancelModalVisible: boolean;\n  taskName: string;\n  resources: {\n    name?: string;\n    type: string;\n    pluginName?: string;\n  }[];\n  redirect: string;\n  polling: ReturnType<typeof setInterval>;\n}\n\nconst maybeTranslate = (name) =>\n  (Constants.TASK_NAMES[name] && i18n._(Constants.TASK_NAMES[name])) || name;\n\nclass TaskDetail extends React.Component<RouteProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      task: null,\n      parentTask: null,\n      childTasks: [],\n      alerts: [],\n      cancelModalVisible: false,\n      taskName: '',\n      resources: [],\n      redirect: null,\n      polling: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  componentWillUnmount() {\n    if (this.state.polling) {\n      clearInterval(this.state.polling);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.routeParams.task !== this.props.routeParams.task) {\n      this.setState({ loading: true });\n      this.loadContent();\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      task,\n      parentTask,\n      childTasks,\n      cancelModalVisible,\n      alerts,\n      taskName,\n      resources,\n      redirect,\n    } = this.state;\n    const breadcrumbs = [\n      { url: formatPath(Paths.taskList), name: t`Task management` },\n      { name: task ? taskName : '' },\n    ];\n    let parentTaskId = null;\n    if (parentTask) {\n      parentTaskId = parsePulpIDFromURL(parentTask.pulp_href);\n    }\n    if (redirect) {\n      return <Navigate to={redirect} />;\n    }\n\n    return loading ? (\n      <LoadingPageSpinner />\n    ) : (\n      <React.Fragment>\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        ></AlertList>\n        {cancelModalVisible ? this.renderCancelModal() : null}\n        <BaseHeader\n          title={taskName}\n          breadcrumbs={<Breadcrumbs links={breadcrumbs}></Breadcrumbs>}\n          pageControls={\n            ['running', 'waiting'].includes(task.state) && (\n              <Button\n                variant='secondary'\n                onClick={() => this.setState({ cancelModalVisible: true })}\n              >\n                {t`Stop task`}\n              </Button>\n            )\n          }\n          status={\n            <StatusIndicator\n              className={'hub-c-task-status'}\n              status={task.state}\n            />\n          }\n        />\n        <Main>\n          <Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task detail`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task name`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.name}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    {task.name !== taskName && (\n                      <DescriptionListGroup>\n                        <DescriptionListTerm>{t`Descriptive name`}</DescriptionListTerm>\n                        <DescriptionListDescription>\n                          {taskName}\n                        </DescriptionListDescription>\n                      </DescriptionListGroup>\n                    )}\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Finished at`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.finished_at} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Created on`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <DateComponent date={task.pulp_created} />\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Task groups`}\n                  </Title>\n                  <br />\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Task group`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {task.task_group ? task.task_group : t`No task group`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Parent task`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {parentTask ? (\n                          <Link\n                            to={formatPath(Paths.taskDetail, {\n                              task: parentTaskId,\n                            })}\n                          >\n                            {maybeTranslate(parentTask.name)}\n                          </Link>\n                        ) : (\n                          t`No parent task`\n                        )}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t`Child tasks`}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {childTasks.length\n                          ? childTasks.map((childTask) => {\n                              const childTaskId = parsePulpIDFromURL(\n                                childTask.pulp_href,\n                              );\n                              return (\n                                <React.Fragment key={childTaskId}>\n                                  <Link\n                                    to={formatPath(Paths.taskDetail, {\n                                      task: childTaskId,\n                                    })}\n                                  >\n                                    {maybeTranslate(childTask.name)}\n                                  </Link>\n                                  <br />\n                                </React.Fragment>\n                              );\n                            })\n                          : t`No child task`}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </section>\n              </FlexItem>\n              <FlexItem>\n                <section className='body card-area'>\n                  <Title headingLevel='h2' size='lg'>\n                    {t`Reserve resources`}\n                  </Title>\n                  <br />\n                  {resources.length ? (\n                    <DescriptionList isHorizontal>\n                      {resources.map((resource, index) => {\n                        return (\n                          <React.Fragment key={resource.type + index}>\n                            <hr />\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>{t`Type`}</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {resource.type}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            {resource.pluginName && (\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>{t`Plugin`}</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {resource.pluginName}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                            {resource.name && (\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>{t`Name`}</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {resource.name}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                          </React.Fragment>\n                        );\n                      })}\n                    </DescriptionList>\n                  ) : (\n                    t`There's no resource record`\n                  )}\n                </section>\n              </FlexItem>\n            </Flex>\n            <Flex\n              direction={{ default: 'column' }}\n              flex={{ default: 'flex_1' }}\n            >\n              <FlexItem>\n                {!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Progress messages`}\n                    </Title>\n                    <br />\n                    {task.progress_reports.length ? (\n                      <DescriptionList isHorizontal>\n                        {task.progress_reports\n                          .reverse()\n                          .map((report, index) => {\n                            return (\n                              <React.Fragment key={index}>\n                                <hr />\n                                {Object.keys(report).map((key, index) => {\n                                  return (\n                                    !!report[key] && (\n                                      <DescriptionListGroup key={key + index}>\n                                        <DescriptionListTerm>\n                                          {{\n                                            message: t`Message`,\n                                            code: t`Code`,\n                                            state: t`State`,\n                                            done: t`Done`,\n                                          }[key] || capitalize(key)}\n                                        </DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                          {report[key]}\n                                        </DescriptionListDescription>\n                                      </DescriptionListGroup>\n                                    )\n                                  );\n                                })}{' '}\n                              </React.Fragment>\n                            );\n                          })}\n                      </DescriptionList>\n                    ) : (\n                      <EmptyStateCustom\n                        icon={CubesIcon}\n                        title={t`There is no progress message.`}\n                        description={t`There is no progress message.`}\n                      />\n                    )}\n                  </section>\n                )}\n                {!!task.error && (\n                  <section className='body card-area'>\n                    <Title headingLevel='h2' size='lg'>\n                      {t`Error message`}\n                    </Title>\n                    <br />\n                    <React.Fragment>\n                      <Title headingLevel='h3'>{t`Description`}</Title>\n                      <CodeBlock>{task.error.description}</CodeBlock>\n                      <Title headingLevel='h3'>{t`Traceback`}</Title>\n                      <CodeBlock className={'hub-code-block'}>\n                        {task.error.traceback}\n                      </CodeBlock>\n                    </React.Fragment>\n                  </section>\n                )}\n              </FlexItem>\n            </Flex>\n          </Flex>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderCancelModal() {\n    const name = this.state.taskName;\n    return (\n      <ConfirmModal\n        cancelAction={() => this.setState({ cancelModalVisible: false })}\n        confirmAction={() => this.cancelTask()}\n        title={t`Stop task`}\n        confirmButtonTitle={t`Yes, stop`}\n      >\n        {t`${name} will stop running.`}\n      </ConfirmModal>\n    );\n  }\n\n  private cancelTask() {\n    const { task, taskName } = this.state;\n    TaskManagementAPI.patch(parsePulpIDFromURL(task.pulp_href), {\n      state: 'canceled',\n    })\n      .then(() => {\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'success',\n              title: taskName,\n              description: (\n                <Trans>Task &quot;{taskName}&quot; stopped successfully.</Trans>\n              ),\n            },\n          ],\n        });\n        this.loadContent();\n      })\n      .catch((e) => {\n        const { status, statusText } = e.response;\n        this.setState({\n          loading: true,\n          cancelModalVisible: false,\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Task \"${taskName}\" could not be stopped.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n        this.loadContent();\n      });\n  }\n\n  private loadContent() {\n    if (!this.state.polling && !this.state.task) {\n      this.setState({ polling: setInterval(() => this.loadContent(), 10000) });\n    }\n\n    const taskId = this.props.routeParams.task;\n    return TaskManagementAPI.get(taskId)\n      .then((result) => {\n        const allRelatedTasks = [];\n        let parentTask = null;\n        const childTasks = [];\n        const resources = [];\n        if (['canceled', 'completed', 'failed'].includes(result.data.state)) {\n          clearInterval(this.state.polling);\n          this.setState({ polling: null });\n        }\n        if (result.data.parent_task) {\n          const parentTaskId = parsePulpIDFromURL(result.data.parent_task);\n          allRelatedTasks.push(\n            TaskManagementAPI.get(parentTaskId)\n              .then((result) => {\n                parentTask = result.data;\n              })\n              .catch(() => {\n                return true;\n              }),\n          );\n        }\n        if (result.data.child_tasks.length) {\n          result.data.child_tasks.forEach((child) => {\n            const childTaskId = parsePulpIDFromURL(child);\n            allRelatedTasks.push(\n              TaskManagementAPI.get(childTaskId)\n                .then((result) => {\n                  childTasks.push(result.data);\n                })\n                .catch(() => {\n                  return true;\n                }),\n            );\n          });\n        }\n        if (result.data.reserved_resources_record.length) {\n          result.data.reserved_resources_record.forEach((resource) => {\n            const url = resource.replace(PULP_API_BASE_PATH, '');\n            const id = parsePulpIDFromURL(url);\n            const urlParts = url.split('/');\n            let resourceType = '';\n            let pluginName = '';\n\n            // pulp hrefs follow this pattern for resources added by plugins:\n            // /<resource name>/<plugin name>/<resource type>/<pk>/\n            // Locks can be added on the entire resource (ex /repositories/) or on a specific\n            // instance of a resource (ex /repositories/ansible/ansible/123123/\n\n            // if the url has 3 or more segements, parse out the resource, plugin name, and resource type\n            if (urlParts.length >= 3) {\n              resourceType = `${urlParts[0]}: ${urlParts[2]}`;\n              pluginName = urlParts[1];\n              // otherwise, just return the resource type\n            } else {\n              resource = urlParts[0];\n            }\n\n            if (id) {\n              allRelatedTasks.push(\n                GenericPulpAPI.get(url)\n                  .then((result) => {\n                    resources.push({\n                      name: result.data.name,\n                      type: resourceType,\n                      pluginName: pluginName,\n                    });\n                  })\n                  .catch(() => {\n                    return true;\n                  }),\n              );\n            } else {\n              resources.push({ type: resourceType });\n            }\n          });\n        }\n        return Promise.all(allRelatedTasks).then(() => {\n          this.setState({\n            task: result.data,\n            childTasks,\n            parentTask,\n            loading: false,\n            taskName: maybeTranslate(result.data.name),\n            resources,\n          });\n        });\n      })\n      .catch(() => {\n        this.setState({ redirect: formatPath(Paths.notFound) });\n      });\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(TaskDetail);\n"],"names":["maybeTranslate","name","Constants","i18n","TaskDetail","props","state","loading","task","parentTask","childTasks","alerts","cancelModalVisible","taskName","resources","redirect","polling","this","loadContent","clearInterval","prevProps","routeParams","setState","breadcrumbs","url","formatPath","Paths","parentTaskId","parsePulpIDFromURL","pulp_href","Navigate","to","closeAlert","i","renderCancelModal","title","links","pageControls","includes","Button","variant","onClick","status","className","Flex","direction","default","flex","FlexItem","Title","headingLevel","size","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","date","finished_at","pulp_created","task_group","Link","length","map","childTask","childTaskId","key","resource","index","type","pluginName","error","progress_reports","reverse","report","Object","keys","message","code","done","icon","CubesIcon","description","CodeBlock","traceback","cancelAction","confirmAction","cancelTask","confirmButtonTitle","TaskManagementAPI","then","e","response","statusText","errorMessage","setInterval","taskId","result","allRelatedTasks","data","parent_task","push","child_tasks","forEach","child","reserved_resources_record","replace","PULP_API_BASE_PATH","id","urlParts","split","resourceType","GenericPulpAPI","Promise","all","closeAlertMixin","React","withRouter"],"sourceRoot":""}
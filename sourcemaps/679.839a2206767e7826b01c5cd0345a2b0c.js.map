{"version":3,"file":"js/679.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { Table, Tbody } from '@patternfly/react-table';\nimport React, { Component } from 'react';\nimport {\n  AnsibleRepositoryAPI,\n  type AnsibleRepositoryType,\n  CertificateUploadAPI,\n  CollectionVersionAPI,\n  type CollectionVersionSearch,\n} from 'src/api';\nimport {\n  ApprovalRow,\n  ApproveModal,\n  BaseHeader,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  Main,\n} from 'src/components';\nimport {\n  AlertList,\n  type AlertType,\n  AppliedFilters,\n  CompoundFilter,\n  HubPagination,\n  LoadingPage,\n  LoadingSpinner,\n  SortTable,\n  UploadSignatureModal,\n  closeAlert,\n} from 'src/components';\nimport { AppContext, type IAppContextType } from 'src/loaders/app-context';\nimport {\n  ParamHelper,\n  type RouteProps,\n  errorMessage,\n  filterIsSet,\n  parsePulpIDFromURL,\n  repositoryBasePath,\n  waitForTask,\n  waitForTaskUrl,\n  withRouter,\n} from 'src/utilities';\nimport './certification-dashboard.scss';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n    repository_label?: string;\n    sort?: string;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersionSearch[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersionSearch[];\n  unauthorized: boolean;\n  inputText: string;\n  uploadCertificateModalOpen: boolean;\n  versionToUploadCertificate?: CollectionVersionSearch;\n  approveModalInfo?: CollectionVersionSearch;\n  repositories: {\n    approved?: AnsibleRepositoryType;\n    rejected?: AnsibleRepositoryType;\n  };\n}\n\nclass CertificationDashboard extends Component<RouteProps, IState> {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository_label']) {\n      params['repository_label'] = 'pipeline=staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n      inputText: '',\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n      approveModalInfo: null,\n      repositories: { approved: null, rejected: null },\n    };\n  }\n\n  componentDidMount() {\n    const { user, hasPermission } = this.context as IAppContextType;\n    if (\n      !user ||\n      user.is_anonymous ||\n      !hasPermission('ansible.modify_ansible_repo_content')\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.setState({ loading: true });\n\n      Promise.all([\n        this.queryCollections(false),\n        this.queryRepositories(),\n      ]).then(() => {\n        this.setState({ loading: false });\n        this.setState({ updatingVersions: [] });\n      });\n    }\n  }\n\n  private queryRepositories() {\n    const repoOrNull = (pipeline) =>\n      AnsibleRepositoryAPI.list({\n        page: 1,\n        page_size: 1,\n        pulp_label_select: `pipeline=${pipeline}`,\n      })\n        .then(({ data: { count, results } }) =>\n          count === 1 ? results[0] : null,\n        )\n        .catch((error) => {\n          this.addAlert(\n            t`Error loading repository with label ${pipeline}.`,\n            'danger',\n            error?.message,\n          );\n          return null;\n        });\n\n    return Promise.all([repoOrNull('approved'), repoOrNull('rejected')]).then(\n      ([approved, rejected]) =>\n        this.setState({\n          repositories: { approved, rejected },\n        }),\n    );\n  }\n\n  render() {\n    const { alerts, versions, params, itemCount, loading, unauthorized } =\n      this.state;\n    if (!versions && !unauthorized) {\n      return <LoadingPage />;\n    }\n\n    return (\n      <>\n        <BaseHeader title={t`Approval dashboard`} />\n        <AlertList\n          alerts={alerts}\n          closeAlert={(i) =>\n            closeAlert(i, {\n              alerts,\n              setAlerts: (alerts) => this.setState({ alerts }),\n            })\n          }\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='hub-certification-dashboard'>\n            <section className='body' data-cy='body'>\n              <div className='hub-toolbar'>\n                <Toolbar>\n                  <ToolbarContent>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <CompoundFilter\n                          inputText={this.state.inputText}\n                          onChange={(text) => {\n                            this.setState({ inputText: text });\n                          }}\n                          updateParams={(p) =>\n                            this.updateParams(p, () =>\n                              this.queryCollections(true),\n                            )\n                          }\n                          params={params}\n                          filterConfig={[\n                            {\n                              id: 'namespace',\n                              title: t`Namespace`,\n                            },\n                            {\n                              id: 'name',\n                              title: t`Collection name`,\n                            },\n                            {\n                              id: 'repository_label',\n                              title: t`Status`,\n                              inputType: 'select',\n                              options: [\n                                {\n                                  id: 'pipeline=rejected',\n                                  title: t`Rejected`,\n                                },\n                                {\n                                  id: 'pipeline=staging',\n                                  title: t`Needs Review`,\n                                },\n                                {\n                                  id: 'pipeline=approved',\n                                  title: t`Approved`,\n                                },\n                              ],\n                            },\n                          ]}\n                        />\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n\n                <HubPagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={(p) => {\n                    this.updateParams(p, () => this.queryCollections(true));\n                    this.setState({ inputText: '' });\n                  }}\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository_label: {\n                      'pipeline=approved': t`Approved`,\n                      'pipeline=rejected': t`Rejected`,\n                      'pipeline=staging': t`Needs Review`,\n                    },\n                  }}\n                  niceNames={{\n                    name: t`Collection name`,\n                    namespace: t`Namespace`,\n                    repository_label: t`Status`,\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <HubPagination\n                  params={params}\n                  updateParams={(p) =>\n                    this.updateParams(p, () => this.queryCollections(true))\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n            <UploadSignatureModal\n              isOpen={this.state.uploadCertificateModalOpen}\n              onCancel={() => this.closeUploadCertificateModal()}\n              onSubmit={(d) => this.submitCertificate(d)}\n            />\n            {this.state.approveModalInfo && (\n              <ApproveModal\n                closeAction={() => {\n                  this.setState({ approveModalInfo: null });\n                }}\n                finishAction={() => {\n                  this.setState({ approveModalInfo: null });\n                  this.queryCollections(true);\n                }}\n                collectionVersion={this.state.approveModalInfo}\n                addAlert={(alert) => this.addAlertObj(alert)}\n              />\n            )}\n          </Main>\n        )}\n      </>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository_label']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={t`No managed collections yet`}\n          description={t`Collections will appear once uploaded`}\n        />\n      );\n    }\n\n    const sortTableOptions = {\n      headers: [\n        {\n          title: t`Namespace`,\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: t`Collection`,\n          type: 'alpha',\n          id: 'name',\n        },\n        {\n          title: t`Version`,\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: t`Date created`,\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: t`Repository`,\n          type: 'none',\n          id: '',\n        },\n        {\n          title: t`Status`,\n          type: 'none',\n          id: 'repository_label',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <Table aria-label={t`Collection versions`}>\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () => this.queryCollections(true))\n          }\n        />\n        <Tbody>\n          {versions.map((version, i) => (\n            <ApprovalRow\n              approve={(v) => this.approve(v)}\n              collectionVersion={version}\n              featureFlags={(this.context as IAppContextType).featureFlags}\n              isVersionUpdating={(v) => this.isVersionUpdating(v)}\n              key={i}\n              openUploadCertificateModal={(v) =>\n                this.openUploadCertificateModal(v)\n              }\n              reject={(v) => this.reject(v)}\n            />\n          ))}\n        </Tbody>\n      </Table>\n    );\n  }\n\n  private isVersionUpdating(collection: CollectionVersionSearch) {\n    return !!this.state.updatingVersions.find((v) => {\n      return v == collection;\n    });\n  }\n\n  private openUploadCertificateModal(version: CollectionVersionSearch) {\n    this.setState({\n      uploadCertificateModalOpen: true,\n      versionToUploadCertificate: version,\n    });\n  }\n\n  private closeUploadCertificateModal() {\n    this.setState({\n      uploadCertificateModalOpen: false,\n      versionToUploadCertificate: null,\n    });\n  }\n\n  private submitCertificate(file: File) {\n    const { collection_version, repository } =\n      this.state.versionToUploadCertificate;\n    const signed_collection = collection_version.pulp_href;\n    const { name, namespace, version } = collection_version;\n\n    CertificateUploadAPI.upload({\n      file,\n      repository: repository.pulp_href,\n      signed_collection,\n    })\n      .then(({ data: { task } }) => waitForTask(task))\n      .then(() =>\n        this.addAlert(\n          t`Certificate for collection \"${namespace} ${name} v${version}\" has been successfully uploaded.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`The certificate for \"${namespace} ${name} v${version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.closeUploadCertificateModal());\n  }\n\n  private setUpdatingVersion(collectionVersion) {\n    const { updatingVersions } = this.state;\n    this.setState({\n      updatingVersions: [...updatingVersions, collectionVersion],\n    });\n  }\n\n  private unsetUpdatingVersion(collectionVersion) {\n    const { updatingVersions } = this.state;\n    this.setState({\n      updatingVersions: updatingVersions.filter((v) => v !== collectionVersion),\n    });\n  }\n\n  private async approve(collection) {\n    const { repositories } = this.state;\n\n    if (repositories.approved) {\n      this.move(collection, repositories.approved);\n    } else {\n      this.setState({ approveModalInfo: collection });\n    }\n  }\n\n  private async reject(collection) {\n    const { repositories } = this.state;\n\n    if (!repositories.rejected) {\n      const version = collection.collection_version;\n      this.addAlert(\n        t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n        'danger',\n        t`There must be only one repository with pipeline=rejected.`,\n      );\n      return;\n    }\n\n    if (await this.isRejected(collection)) {\n      // collection already in rejected repository, so remove it from aproved repo\n      this.remove(collection);\n    } else {\n      // collection is not in rejected state, move it there\n      this.move(collection, repositories.rejected);\n    }\n  }\n\n  private move(collection, destinationRepo) {\n    const { collection_version: version, repository: originalRepo } =\n      collection;\n\n    this.setUpdatingVersion(collection);\n    return Promise.all([\n      repositoryBasePath(originalRepo.name, originalRepo.pulp_href),\n      repositoryBasePath(destinationRepo.name, destinationRepo.pulp_href),\n    ])\n      .then(([source, destination]) =>\n        CollectionVersionAPI.move(\n          version.namespace,\n          version.name,\n          version.version,\n          source,\n          destination,\n        ),\n      )\n      .then((result) =>\n        waitForTask(result.data.remove_task_id, { waitMs: 500 }),\n      )\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.unsetUpdatingVersion(collection));\n  }\n\n  private remove(collection) {\n    const { collection_version: version, repository } = collection;\n\n    this.setUpdatingVersion(collection);\n    return AnsibleRepositoryAPI.removeContent(\n      parsePulpIDFromURL(repository.pulp_href),\n      version.pulp_href,\n    )\n      .then(({ data: { task } }) => waitForTaskUrl(task))\n      .then(() =>\n        this.addAlert(\n          t`Certification status for collection \"${version.namespace} ${version.name} v${version.version}\" has been successfully updated.`,\n          'success',\n        ),\n      )\n      .then(() => this.queryCollections(true))\n      .catch((error) => {\n        const description = !error.response\n          ? error\n          : errorMessage(error.response.status, error.response.statusText);\n\n        this.addAlert(\n          t`Changes to certification status for collection \"${version.namespace} ${version.name} v${version.version}\" could not be saved.`,\n          'danger',\n          description,\n        );\n      })\n      .finally(() => this.unsetUpdatingVersion(collection));\n  }\n\n  // is collection *also* in the rejected repo (regardless of collection.repository)\n  // really a \"wouldRejectionFail\"\n  private async isRejected(collection) {\n    const { repositories } = this.state;\n    const { name, namespace, version } = collection.collection_version;\n\n    return CollectionVersionAPI.list({\n      name,\n      namespace,\n      page: 1,\n      page_size: 1,\n      repository: parsePulpIDFromURL(repositories.rejected.pulp_href),\n      version,\n    })\n      .then((result) => !!result.data.meta.count)\n      .catch(() => false);\n  }\n\n  private queryCollections(handleLoading) {\n    if (handleLoading) {\n      this.setState({\n        loading: true,\n      });\n    }\n\n    const { sort, ...params } = this.state.params;\n    const updatedParams = {\n      order_by: sort,\n      ...params,\n    };\n\n    return CollectionVersionAPI.list(updatedParams)\n      .then((result) => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n        });\n        if (handleLoading) {\n          this.setState({\n            loading: false,\n            updatingVersions: [],\n          });\n        }\n      })\n      .catch((error) => {\n        this.addAlert(t`Error loading collections.`, 'danger', error?.message);\n        this.setState({\n          loading: false,\n          updatingVersions: [],\n        });\n      });\n  }\n\n  private updateParams(params, callback = null) {\n    ParamHelper.updateParams({\n      params,\n      navigate: (to) => this.props.navigate(to),\n      setState: (state) => this.setState(state, callback),\n    });\n  }\n\n  private addAlert(title, variant, description?) {\n    this.setState({\n      alerts: [\n        ...this.state.alerts,\n        {\n          description,\n          title,\n          variant,\n        },\n      ],\n    });\n  }\n\n  private addAlertObj(alert) {\n    this.addAlert(alert.title, alert.variant, alert.description);\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n"],"names":["CertificationDashboard","_Component","props","_this","_classCallCheck","_callSuper","params","ParamHelper","parseParamString","location","search","state","versions","undefined","itemCount","loading","updatingVersions","alerts","unauthorized","inputText","uploadCertificateModalOpen","versionToUploadCertificate","approveModalInfo","repositories","approved","rejected","_inherits","_createClass","key","value","_this2","_ref","this","context","user","hasPermission","is_anonymous","setState","Promise","all","queryCollections","queryRepositories","then","_this3","repoOrNull","pipeline","AnsibleRepositoryAPI","list","page","page_size","pulp_label_select","concat","_ref2","_ref2$data","data","count","results","error","addAlert","i18n","_","id","values","message","_ref3","_ref4","_slicedToArray","_this4","_this$state","React","BaseHeader","title","AlertList","closeAlert","i","setAlerts","EmptyStateUnauthorized","Main","className","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","CompoundFilter","onChange","text","updateParams","p","filterConfig","inputType","options","HubPagination","isTop","AppliedFilters","ignoredParams","niceValues","repository_label","niceNames","name","namespace","LoadingSpinner","renderTable","UploadSignatureModal","isOpen","onCancel","closeUploadCertificateModal","onSubmit","d","submitCertificate","ApproveModal","closeAction","finishAction","collectionVersion","alert","addAlertObj","LoadingPage","_this5","length","filterIsSet","EmptyStateFilter","EmptyStateNoData","description","sortTableOptions","headers","type","Table","SortTable","Tbody","map","version","ApprovalRow","approve","v","featureFlags","isVersionUpdating","openUploadCertificateModal","reject","collection","find","file","_this6","_this$state$versionTo","collection_version","repository","signed_collection","pulp_href","CertificateUploadAPI","upload","_ref5","task","waitForTask","response","errorMessage","status","statusText","_toConsumableArray","filter","_approve","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","move","stop","_x","apply","arguments","_reject","_callee2","_context2","abrupt","isRejected","sent","remove","_x2","destinationRepo","_this7","originalRepo","setUpdatingVersion","repositoryBasePath","_ref6","_ref7","source","destination","CollectionVersionAPI","result","remove_task_id","waitMs","unsetUpdatingVersion","_this8","removeContent","parsePulpIDFromURL","_ref8","waitForTaskUrl","_isRejected","_callee3","_collection$collectio","_context3","meta","_x3","handleLoading","_this9","_this$state$params","updatedParams","_objectSpread","order_by","sort","_objectWithoutProperties","_excluded","_this10","callback","navigate","to","variant","Component","_defineProperty","AppContext","withRouter"],"sourceRoot":""}
{"version":3,"file":"js/namespace_detail.1643803863218.42bdfa6eae22c4404d4b.js","mappings":"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","sources":["webpack:///./src/containers/edit-namespace/edit-namespace.tsx","webpack:///./src/containers/namespace-detail/namespace-detail.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\nimport { Form, ActionGroup, Button, Spinner } from '@patternfly/react-core';\n\nimport {\n  PartnerHeader,\n  NamespaceForm,\n  ResourcesForm,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  Main,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n} from 'src/components';\nimport {\n  MyNamespaceAPI,\n  NamespaceType,\n  ActiveUserAPI,\n  NamespaceLinkType,\n} from 'src/api';\n\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport {\n  ErrorMessagesType,\n  ParamHelper,\n  mapErrorMessages,\n} from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  namespace: NamespaceType;\n  newLinkName: string;\n  newLinkURL: string;\n  errorMessages: ErrorMessagesType;\n  saving: boolean;\n  loading: boolean;\n  redirect: string;\n  unsavedData: boolean;\n  alerts: AlertType[];\n  params: {\n    tab?: string;\n  };\n  userId: string;\n  unauthorized: boolean;\n}\n\nclass EditNamespace extends React.Component<RouteComponentProps, IState> {\n  queryParams: URLSearchParams;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    if (!params['tab']) {\n      params['tab'] = 'edit-details';\n    }\n\n    this.state = {\n      loading: false,\n      alerts: [],\n      namespace: null,\n      userId: '',\n      newLinkURL: '',\n      newLinkName: '',\n      errorMessages: {},\n      saving: false,\n      redirect: null,\n      unsavedData: false,\n      params: params,\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true }, () => {\n      ActiveUserAPI.getUser()\n        .then((result) => {\n          this.setState({ userId: result.account_number }, () =>\n            this.loadNamespace(),\n          );\n        })\n        .catch((e) =>\n          this.setState(\n            {\n              loading: false,\n              redirect: formatPath(Paths.namespaceByRepo, {\n                namespace: this.props.match.params['namespace'],\n                repo: this.context.selectedRepo,\n              }),\n            },\n            () => {\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'danger',\n                  title: t`Error loading active user.`,\n                  description: e?.message,\n                },\n              ]);\n            },\n          ),\n        );\n    });\n  }\n\n  render() {\n    const {\n      namespace,\n      errorMessages,\n      saving,\n      redirect,\n      params,\n      userId,\n      unauthorized,\n      loading,\n    } = this.state;\n\n    const tabs = [\n      { id: 'edit-details', name: t`Edit details` },\n      { id: 'edit-resources', name: t`Edit resources` },\n    ];\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n\n    if (loading) {\n      return <LoadingPageSpinner />;\n    }\n\n    if (!namespace) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[\n            namespaceBreadcrumb,\n            {\n              name: namespace.name,\n              url: formatPath(Paths.myCollections, {\n                namespace: namespace.name,\n              }),\n            },\n            { name: t`Edit` },\n          ]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n        ></PartnerHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main>\n            <section className='body'>\n              {params.tab.toLowerCase() === 'edit-details' ? (\n                <NamespaceForm\n                  userId={userId}\n                  namespace={namespace}\n                  errorMessages={errorMessages}\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                />\n              ) : (\n                <ResourcesForm\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                  namespace={namespace}\n                />\n              )}\n              <Form>\n                <ActionGroup>\n                  <Button\n                    variant='primary'\n                    onClick={() => this.saveNamespace()}\n                  >\n                    {t`Save`}\n                  </Button>\n                  <Button variant='secondary' onClick={() => this.cancel()}>\n                    {t`Cancel`}\n                  </Button>\n\n                  {saving ? <Spinner></Spinner> : null}\n                </ActionGroup>\n                {this.state.unsavedData ? (\n                  <div\n                    style={{ color: 'red' }}\n                  >{t`You have unsaved changes`}</div>\n                ) : null}\n              </Form>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private loadNamespace() {\n    MyNamespaceAPI.get(this.props.match.params['namespace'])\n      .then((response) => {\n        // Add an empty link to the end of the links array to create an empty field\n        // on the link edit form for adding new links\n        const emptyLink: NamespaceLinkType = { name: '', url: '' };\n        response.data.links.push(emptyLink);\n        this.setState({ loading: false, namespace: response.data });\n      })\n      .catch(() => {\n        this.setState({ unauthorized: true, loading: false });\n      });\n  }\n\n  private saveNamespace() {\n    this.setState({ saving: true }, () => {\n      const namespace = { ...this.state.namespace };\n      const setLinks: NamespaceLinkType[] = [];\n\n      // remove any empty links from the list before saving\n      for (const link of namespace.links) {\n        if (link.url !== '' || link.name !== '') {\n          setLinks.push(link);\n        }\n      }\n\n      namespace.links = setLinks;\n\n      MyNamespaceAPI.update(this.state.namespace.name, namespace)\n        .then((result) => {\n          this.setState(\n            {\n              namespace: result.data,\n              errorMessages: {},\n              saving: false,\n              unsavedData: false,\n              redirect: formatPath(Paths.myCollections, {\n                namespace: this.state.namespace.name,\n              }),\n            },\n            () =>\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'success',\n                  title: t`Namespace successfully edited.`,\n                },\n              ]),\n          );\n        })\n        .catch((error) => {\n          const result = error.response;\n          if (result.status === 400) {\n            this.setState({\n              errorMessages: mapErrorMessages(error),\n              saving: false,\n            });\n          } else if (result.status === 404) {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: t`API Error: ${error.response.status}`,\n                description: t`You don't have permissions to update this namespace.`,\n              }),\n              saving: false,\n            });\n          }\n        });\n    });\n  }\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private cancel() {\n    this.setState({\n      redirect: formatPath(Paths.myCollections, {\n        namespace: this.state.namespace.name,\n      }),\n    });\n  }\n}\n\nEditNamespace.contextType = AppContext;\n\nexport default withRouter(EditNamespace);\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport './namespace-detail.scss';\n\nimport {\n  withRouter,\n  RouteComponentProps,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  DropdownItem,\n  Tooltip,\n  Text,\n  Checkbox,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport ReactMarkdown from 'react-markdown';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  NamespaceAPI,\n  MyNamespaceAPI,\n  NamespaceType,\n} from 'src/api';\n\nimport {\n  CollectionFilter,\n  CollectionList,\n  ImportModal,\n  LoadingPageWithHeader,\n  Main,\n  Pagination,\n  PartnerHeader,\n  EmptyStateNoData,\n  RepoSelector,\n  StatefulDropdown,\n  ClipboardCopy,\n  AlertList,\n  closeAlertMixin,\n  DeleteModal,\n  AlertType,\n} from 'src/components';\n\nimport { ParamHelper, getRepoUrl, filterIsSet } from 'src/utilities';\nimport { Constants } from 'src/constants';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  collections: CollectionListType[];\n  namespace: NamespaceType;\n  params: {\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tab?: string;\n    keywords?: string;\n    namespace?: string;\n  };\n  redirect: string;\n  itemCount: number;\n  showImportModal: boolean;\n  warning: string;\n  updateCollection: CollectionListType;\n  showControls: boolean;\n  isOpenNamespaceModal: boolean;\n  isNamespaceEmpty: boolean;\n  confirmDelete: boolean;\n  isNamespacePending: boolean;\n  alerts: AlertType[];\n}\n\ninterface IProps extends RouteComponentProps {\n  selectedRepo: string;\n}\n\nexport class NamespaceDetail extends React.Component<IProps, IState> {\n  nonAPIParams = ['tab'];\n\n  // namespace is a positional url argument, so don't include it in the\n  // query params\n  nonQueryStringParams = ['namespace'];\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    params['namespace'] = props.match.params['namespace'];\n\n    this.state = {\n      collections: [],\n      namespace: null,\n      params: params,\n      redirect: null,\n      itemCount: 0,\n      showImportModal: false,\n      warning: '',\n      updateCollection: null,\n      showControls: false, // becomes true when my-namespaces doesn't 404\n      isOpenNamespaceModal: false,\n      isNamespaceEmpty: false,\n      confirmDelete: false,\n      isNamespacePending: false,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadAll();\n\n    this.setState({ alerts: this.context.alerts || [] });\n  }\n\n  componentWillUnmount() {\n    this.context.setAlerts([]);\n  }\n\n  render() {\n    const {\n      collections,\n      namespace,\n      params,\n      redirect,\n      itemCount,\n      showImportModal,\n      warning,\n      updateCollection,\n      isOpenNamespaceModal,\n      confirmDelete,\n      isNamespacePending,\n    } = this.state;\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n\n    if (!namespace) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const tabs = [{ id: 'collections', name: t`Collections` }];\n\n    if (this.state.showControls) {\n      tabs.push({ id: 'cli-configuration', name: t`CLI configuration` });\n    }\n    const tab = params['tab'] || 'collections';\n\n    if (namespace.resources) {\n      tabs.push({ id: 'resources', name: t`Resources` });\n    }\n\n    const repositoryUrl = getRepoUrl('inbound-' + namespace.name);\n\n    const noData = itemCount === 0 && !filterIsSet(params, ['keywords']);\n\n    const updateParams = (params) =>\n      this.updateParams(params, () => this.loadCollections());\n\n    const ignoredParams = [\n      'namespace',\n      'page',\n      'page_size',\n      'sort',\n      'tab',\n      'view_type',\n    ];\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <ImportModal\n          isOpen={showImportModal}\n          onUploadSuccess={() =>\n            this.setState({\n              redirect: formatPath(\n                Paths.myImports,\n                {},\n                {\n                  namespace: namespace.name,\n                },\n              ),\n            })\n          }\n          // onCancel\n          setOpen={(isOpen, warn) => this.toggleImportModal(isOpen, warn)}\n          collection={updateCollection}\n          namespace={namespace.name}\n        />\n        {isOpenNamespaceModal && (\n          <DeleteModal\n            spinner={isNamespacePending}\n            cancelAction={this.closeModal}\n            deleteAction={this.deleteNamespace}\n            title={t`Delete namespace?`}\n            isDisabled={!confirmDelete || isNamespacePending}\n          >\n            <>\n              <Text className='delete-namespace-modal-message'>\n                <Trans>\n                  Deleting <b>{namespace.name}</b> and its data will be lost.\n                </Trans>\n              </Text>\n              <Checkbox\n                isChecked={confirmDelete}\n                onChange={(val) => this.setState({ confirmDelete: val })}\n                label={t`I understand that this action cannot be undone.`}\n                id='delete_confirm'\n              />\n            </>\n          </DeleteModal>\n        )}\n        {warning ? (\n          <Alert\n            className='hub-c-alert-namespace'\n            variant='warning'\n            title={warning}\n            actionClose={\n              <AlertActionCloseButton\n                onClose={() => this.setState({ warning: '' })}\n              />\n            }\n          ></Alert>\n        ) : null}\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[namespaceBreadcrumb, { name: namespace.name }]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n          pageControls={this.renderPageControls()}\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={this.props.match.path as Paths} // Paths.namespaceByRepo or Paths.myCollectionsByRepo\n              pathParams={{ namespace: namespace.name }}\n            />\n          }\n          filters={\n            tab.toLowerCase() === 'collections' ? (\n              <div className='hub-toolbar-wrapper namespace-detail'>\n                <div className='toolbar'>\n                  <CollectionFilter\n                    ignoredParams={ignoredParams}\n                    params={params}\n                    updateParams={updateParams}\n                  />\n\n                  <div className='hub-pagination-container'>\n                    <Pagination\n                      params={params}\n                      updateParams={updateParams}\n                      count={itemCount}\n                      isTop\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : null\n          }\n        ></PartnerHeader>\n        <Main>\n          {tab.toLowerCase() === 'collections' ? (\n            noData ? (\n              <EmptyStateNoData\n                title={t`No collections yet`}\n                description={t`Collections will appear once uploaded`}\n                button={\n                  this.state.showControls && (\n                    <Button\n                      onClick={() => this.setState({ showImportModal: true })}\n                    >\n                      {t`Upload collection`}\n                    </Button>\n                  )\n                }\n              />\n            ) : (\n              <section className='body'>\n                <CollectionList\n                  updateParams={updateParams}\n                  params={params}\n                  ignoredParams={ignoredParams}\n                  collections={collections}\n                  itemCount={itemCount}\n                  showControls={this.state.showControls}\n                  handleControlClick={(id, action) =>\n                    this.handleCollectionAction(id, action)\n                  }\n                  repo={this.context.selectedRepo}\n                />\n              </section>\n            )\n          ) : null}\n          {tab.toLowerCase() === 'cli-configuration' ? (\n            <section className='body'>\n              <div>\n                <div>\n                  <Trans>\n                    <b>Note:</b> Use this URL to configure ansible-galaxy to\n                    upload collections to this namespace. More information on\n                    ansible-galaxy configurations can be found{' '}\n                    <a\n                      href='https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#configuring-the-ansible-galaxy-client'\n                      target='_blank'\n                      rel='noreferrer'\n                    >\n                      here\n                    </a>\n                    <span>&nbsp;</span>\n                    <ExternalLinkAltIcon />.\n                  </Trans>\n                </div>\n                <ClipboardCopy isReadOnly>{repositoryUrl}</ClipboardCopy>\n              </div>\n            </section>\n          ) : null}\n          {tab.toLowerCase() === 'resources'\n            ? this.renderResources(namespace)\n            : null}\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private handleCollectionAction(id, action) {\n    const collection = this.state.collections.find((x) => x.id === id);\n\n    switch (action) {\n      case 'upload':\n        this.setState({\n          updateCollection: collection,\n          showImportModal: true,\n        });\n        break;\n      case 'deprecate':\n        CollectionAPI.setDeprecation(\n          collection,\n          !collection.deprecated,\n          this.context.selectedRepo,\n        )\n          .then(() => this.loadCollections())\n          .catch(() => {\n            this.setState({\n              warning: t`API Error: Failed to set deprecation.`,\n            });\n          });\n        break;\n    }\n  }\n\n  private renderResources(namespace: NamespaceType) {\n    return (\n      <div className='pf-c-content preview'>\n        <ReactMarkdown>{namespace.resources}</ReactMarkdown>\n      </div>\n    );\n  }\n\n  private loadCollections() {\n    CollectionAPI.list(\n      {\n        ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n      },\n      this.context.selectedRepo,\n    ).then((result) => {\n      this.setState({\n        collections: result.data.data,\n        itemCount: result.data.meta.count,\n      });\n    });\n  }\n\n  private loadAll() {\n    Promise.all([\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n        },\n        this.context.selectedRepo,\n      ),\n      NamespaceAPI.get(this.props.match.params['namespace']),\n      MyNamespaceAPI.get(this.props.match.params['namespace']).catch((e) => {\n        // TODO this needs fixing on backend to return nothing in these cases with 200 status\n        // if view only mode is enabled disregard errors and hope\n        if (\n          this.context.user.is_anonymous &&\n          this.context.settings.GALAXY_ENABLE_UNAUTHENTICATED_COLLECTION_ACCESS\n        ) {\n          return null;\n        }\n        // expecting 404 - it just means we can not edit the namespace (unless both NamespaceAPI and MyNamespaceAPI fail)\n        return e.response && e.response.status === 404\n          ? null\n          : Promise.reject(e);\n      }),\n    ])\n      .then((val) => {\n        this.setState({\n          collections: val[0].data.data,\n          itemCount: val[0].data.meta.count,\n          namespace: val[1].data,\n          showControls: !!val[2],\n        });\n\n        this.loadAllRepos(val[0].data.meta.count);\n      })\n      .catch(() => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private loadAllRepos(currentRepoCount) {\n    // get collections in namespace from each repo\n    // except the one we already have\n    const repoPromises = Object.keys(Constants.REPOSITORYNAMES)\n      .filter((repo) => repo !== this.context.selectedRepo)\n      .map((repo) =>\n        CollectionAPI.list(\n          { namespace: this.props.match.params['namespace'] },\n          repo,\n        ),\n      );\n\n    Promise.all(repoPromises)\n      .then((results) =>\n        this.setState({\n          isNamespaceEmpty:\n            results.every((val) => val.data.meta.count === 0) &&\n            currentRepoCount === 0,\n        }),\n      )\n      .catch((err) =>\n        this.setState({\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Error loading collection repositories.`,\n              description: err?.message,\n            },\n          ],\n        }),\n      );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n\n  private renderPageControls() {\n    const { collections } = this.state;\n    const dropdownItems = [\n      <DropdownItem\n        key='1'\n        component={\n          <Link\n            to={formatPath(Paths.editNamespace, {\n              namespace: this.state.namespace.name,\n            })}\n          >\n            {t`Edit namespace`}\n          </Link>\n        }\n      />,\n      this.context.user.model_permissions.delete_namespace && (\n        <React.Fragment key={'2'}>\n          {this.state.isNamespaceEmpty ? (\n            <DropdownItem\n              onClick={() => this.setState({ isOpenNamespaceModal: true })}\n            >\n              {t`Delete namespace`}\n            </DropdownItem>\n          ) : (\n            <Tooltip\n              isVisible={false}\n              content={\n                <Trans>\n                  Cannot delete namespace until <br />\n                  collections&apos; dependencies have <br />\n                  been deleted\n                </Trans>\n              }\n              position='left'\n            >\n              <DropdownItem isDisabled>{t`Delete namespace`}</DropdownItem>\n            </Tooltip>\n          )}\n        </React.Fragment>\n      ),\n      <DropdownItem\n        key='3'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: this.state.namespace.name,\n              },\n            )}\n          >\n            {t`Imports`}\n          </Link>\n        }\n      />,\n    ].filter(Boolean);\n    if (!this.state.showControls) {\n      return <div className='hub-namespace-page-controls'></div>;\n    }\n    return (\n      <div className='hub-namespace-page-controls' data-cy='kebab-toggle'>\n        {' '}\n        {collections.length !== 0 && (\n          <Button onClick={() => this.setState({ showImportModal: true })}>\n            {t`Upload collection`}\n          </Button>\n        )}\n        {dropdownItems.length > 0 && <StatefulDropdown items={dropdownItems} />}\n      </div>\n    );\n  }\n\n  private toggleImportModal(isOpen: boolean, warning?: string) {\n    const newState = { showImportModal: isOpen };\n    if (warning) {\n      newState['warning'] = warning;\n    }\n\n    if (!isOpen) {\n      newState['updateCollection'] = null;\n    }\n\n    this.setState(newState);\n  }\n\n  private deleteNamespace = () => {\n    this.setState({ isNamespacePending: true }, () =>\n      NamespaceAPI.delete(this.state.namespace.name)\n        .then(() => {\n          this.setState({\n            redirect: formatPath(Paths.namespaces, {}),\n            confirmDelete: false,\n            isNamespacePending: false,\n          });\n          this.context.setAlerts([\n            ...this.context.alerts,\n            {\n              variant: 'success',\n              title: t`Successfully deleted namespace.`,\n            },\n          ]);\n        })\n        .catch((e) => {\n          this.setState(\n            {\n              isOpenNamespaceModal: false,\n              confirmDelete: false,\n              isNamespacePending: false,\n            },\n            () =>\n              this.setState({\n                alerts: [\n                  ...this.state.alerts,\n                  {\n                    variant: 'danger',\n                    title: t`Error deleting namespace.`,\n                    description: e?.message,\n                  },\n                ],\n              }),\n          );\n        }),\n    );\n  };\n\n  private closeModal = () => {\n    this.setState({ isOpenNamespaceModal: false, confirmDelete: false });\n  };\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceDetail.contextType = AppContext;\n\nexport default withRouter(NamespaceDetail);\n"],"names":["EditNamespace","props","params","ParamHelper","location","search","state","loading","alerts","namespace","userId","newLinkURL","newLinkName","errorMessages","saving","redirect","unsavedData","unauthorized","this","setState","ActiveUserAPI","then","result","account_number","loadNamespace","e","formatPath","Paths","match","repo","context","selectedRepo","setAlerts","variant","title","description","message","tabs","id","name","Redirect","push","to","breadcrumbs","namespaceBreadcrumb","url","updateParams","p","closeAlert","i","className","tab","toLowerCase","updateNamespace","Form","ActionGroup","Button","onClick","saveNamespace","cancel","Spinner","style","color","MyNamespaceAPI","response","data","links","setLinks","link","error","status","mapErrorMessages","concat","closeAlertMixin","React","contextType","AppContext","withRouter","NamespaceDetail","isNamespacePending","NamespaceAPI","confirmDelete","isOpenNamespaceModal","collections","itemCount","showImportModal","warning","updateCollection","showControls","isNamespaceEmpty","loadAll","resources","repositoryUrl","getRepoUrl","noData","filterIsSet","loadCollections","ignoredParams","isOpen","onUploadSuccess","setOpen","warn","toggleImportModal","collection","spinner","cancelAction","closeModal","deleteAction","deleteNamespace","isDisabled","Text","Checkbox","isChecked","onChange","val","label","Alert","actionClose","AlertActionCloseButton","onClose","pageControls","renderPageControls","contextSelector","path","pathParams","filters","count","isTop","button","handleControlClick","action","handleCollectionAction","href","target","rel","isReadOnly","renderResources","find","x","CollectionAPI","deprecated","nonAPIParams","meta","Promise","all","user","is_anonymous","settings","GALAXY_ENABLE_UNAUTHENTICATED_COLLECTION_ACCESS","reject","loadAllRepos","currentRepoCount","repoPromises","Object","keys","Constants","filter","map","results","every","err","nonQueryStringParams","dropdownItems","DropdownItem","key","component","Link","model_permissions","delete_namespace","Tooltip","isVisible","content","position","Boolean","length","items","newState"],"sourceRoot":""}
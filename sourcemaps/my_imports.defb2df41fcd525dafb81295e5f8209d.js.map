{"version":3,"file":"js/my_imports.1645412214224.aa05a967b1aa0e0277dc.js","mappings":"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","sources":["webpack:///./src/containers/my-imports/my-imports.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport './my-imports.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { cloneDeep } from 'lodash';\n\nimport { BaseHeader, ImportConsole, ImportList, Main } from 'src/components';\n\nimport {\n  ImportAPI,\n  ImportDetailType,\n  ImportListType,\n  NamespaceType,\n  PulpStatus,\n  MyNamespaceAPI,\n  CollectionVersion,\n  CollectionVersionAPI,\n} from 'src/api';\n\nimport { ParamHelper } from 'src/utilities/param-helper';\n\ninterface IState {\n  selectedImport: ImportListType;\n  importList: ImportListType[];\n  selectedImportDetails: ImportDetailType;\n  selectedCollectionVersion: CollectionVersion;\n  params: {\n    page_size?: number;\n    page?: number;\n    keyword?: string;\n    namespace?: string;\n  };\n  namespaces: NamespaceType[];\n  resultsCount: number;\n  importDetailError: string;\n  followLogs: boolean;\n  loadingImports: boolean;\n  loadingImportDetails: boolean;\n}\n\nclass MyImports extends React.Component<RouteComponentProps, IState> {\n  polling: ReturnType<typeof setInterval>;\n  topOfPage: React.RefObject<HTMLDivElement>;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    this.topOfPage = React.createRef();\n\n    this.state = {\n      selectedImport: undefined,\n      importList: [],\n      params: params,\n      namespaces: [],\n      selectedImportDetails: undefined,\n      resultsCount: 0,\n      importDetailError: '',\n      followLogs: false,\n      loadingImports: true,\n      loadingImportDetails: true,\n      selectedCollectionVersion: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // Load namespaces, use the namespaces to query the import list,\n    // use the import list to load the task details\n    this.loadNamespaces(() =>\n      this.loadImportList(() => this.loadTaskDetails()),\n    );\n\n    this.polling = setInterval(() => {\n      const { selectedImport, selectedImportDetails } = this.state;\n      const allowedStates = [PulpStatus.running, PulpStatus.waiting];\n\n      // selectedImportDetails can be failed while selectedImport is still running, poll() updates selectedImport\n      if (\n        allowedStates.includes(selectedImportDetails?.state) ||\n        allowedStates.includes(selectedImport?.state)\n      ) {\n        this.poll();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.polling);\n  }\n\n  render() {\n    const {\n      selectedImport,\n      importList,\n      params,\n      namespaces,\n      selectedImportDetails,\n      resultsCount,\n      loadingImports,\n      loadingImportDetails,\n      importDetailError,\n      followLogs,\n      selectedCollectionVersion,\n    } = this.state;\n\n    if (!importList) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <div ref={this.topOfPage}></div>\n        <BaseHeader title={t`My imports`} />\n        <Main>\n          <section className='body'>\n            <div className='hub-page-container'>\n              <div className='import-list'>\n                <ImportList\n                  importList={importList}\n                  selectedImport={selectedImport}\n                  loading={loadingImports}\n                  numberOfResults={resultsCount}\n                  params={params}\n                  namespaces={namespaces}\n                  selectImport={(sImport) => this.selectImport(sImport)}\n                  updateParams={(params) => {\n                    this.updateParams(params, () =>\n                      this.setState(\n                        {\n                          loadingImports: true,\n                          loadingImportDetails: true,\n                        },\n                        () => this.loadImportList(() => this.loadTaskDetails()),\n                      ),\n                    );\n                  }}\n                />\n              </div>\n\n              <div className='hub-import-console'>\n                <ImportConsole\n                  loading={loadingImportDetails}\n                  task={selectedImportDetails}\n                  followMessages={followLogs}\n                  setFollowMessages={(isFollowing) => {\n                    this.setState({\n                      followLogs: isFollowing,\n                    });\n                  }}\n                  selectedImport={selectedImport}\n                  apiError={importDetailError}\n                  collectionVersion={selectedCollectionVersion}\n                />\n              </div>\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private selectImport(sImport) {\n    this.setState(\n      { selectedImport: sImport, loadingImportDetails: true },\n      () => {\n        this.topOfPage.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n        this.loadTaskDetails();\n      },\n    );\n  }\n\n  private poll() {\n    this.loadTaskDetails(() => {\n      // Update the state of the selected import in the list if it's\n      // different from the one loaded from the API.\n      const { selectedImport, selectedImportDetails, importList } = this.state;\n\n      if (!selectedImportDetails) {\n        return;\n      }\n\n      if (selectedImport.state !== selectedImportDetails.state) {\n        const importIndex = importList.findIndex(\n          (x) => x.id === selectedImport.id,\n        );\n\n        const imports = cloneDeep(importList);\n        const newSelectedImport = cloneDeep(selectedImport);\n\n        newSelectedImport.state = selectedImportDetails.state;\n        newSelectedImport.finished_at = selectedImportDetails.finished_at;\n\n        imports[importIndex] = newSelectedImport;\n\n        this.setState({\n          selectedImport: newSelectedImport,\n          importList: imports,\n        });\n      }\n    });\n  }\n\n  private loadNamespaces(callback?: () => void) {\n    MyNamespaceAPI.list({ page_size: 1000 })\n      .then((result) => {\n        const namespaces = result.data.data;\n        let selectedNS;\n\n        if (this.state.params.namespace) {\n          selectedNS = namespaces.find(\n            (x) => x.name === this.state.params.namespace,\n          );\n        }\n\n        if (!selectedNS) {\n          selectedNS = namespaces[0];\n        }\n\n        this.setState(\n          {\n            namespaces: namespaces,\n            params: {\n              ...this.state.params,\n              namespace: selectedNS.name,\n            },\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadImportList(callback?: () => void) {\n    ImportAPI.list({ ...this.state.params, sort: '-created' })\n      .then((importList) => {\n        this.setState(\n          {\n            importList: importList.data.data,\n            selectedImport: importList.data.data[0],\n            resultsCount: importList.data.meta.count,\n            loadingImports: false,\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadTaskDetails(callback?: () => void) {\n    if (!this.state.selectedImport) {\n      this.setState({\n        importDetailError: t`No data`,\n        loadingImportDetails: false,\n      });\n    } else {\n      ImportAPI.get(this.state.selectedImport.id)\n        .then((result) => {\n          this.setState(\n            {\n              importDetailError: '',\n              loadingImportDetails: false,\n              selectedImportDetails: result.data,\n              selectedCollectionVersion: undefined,\n            },\n            () => {\n              const importDeets = this.state.selectedImportDetails;\n\n              // have to use list instead of get because repository_list isn't\n              // available on collection version details\n              CollectionVersionAPI.list({\n                namespace: importDeets.namespace,\n                name: importDeets.name,\n                version: importDeets.version,\n              })\n                .then((result) => {\n                  if (result.data.meta.count === 1) {\n                    this.setState({\n                      selectedCollectionVersion: result.data.data[0],\n                    });\n                  }\n                })\n                .finally(() => {\n                  if (callback) {\n                    callback();\n                  }\n                });\n            },\n          );\n        })\n        .catch(() => {\n          this.setState({\n            selectedImportDetails: undefined,\n            importDetailError: t`Error fetching import from API`,\n            loadingImportDetails: false,\n          });\n        });\n    }\n  }\n}\n\nexport default withRouter(MyImports);\n"],"names":["MyImports","props","params","ParamHelper","location","search","topOfPage","React","state","selectedImport","undefined","importList","namespaces","selectedImportDetails","resultsCount","importDetailError","followLogs","loadingImports","loadingImportDetails","selectedCollectionVersion","this","loadNamespaces","loadImportList","loadTaskDetails","polling","setInterval","allowedStates","PulpStatus","includes","poll","clearInterval","ref","title","className","loading","numberOfResults","selectImport","sImport","updateParams","setState","task","followMessages","setFollowMessages","isFollowing","apiError","collectionVersion","current","scrollIntoView","behavior","importIndex","findIndex","x","id","imports","newSelectedImport","finished_at","callback","MyNamespaceAPI","page_size","then","result","selectedNS","data","namespace","find","name","console","log","ImportAPI","sort","meta","count","importDeets","CollectionVersionAPI","version","withRouter"],"sourceRoot":""}
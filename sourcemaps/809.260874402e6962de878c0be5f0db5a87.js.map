{"version":3,"file":"js/809.1f904c5bc2b1a118fcc7.js","mappings":"i6BAgCO,IAAMA,GAAUC,EAAAA,EAAAA,IAAA,SAAAD,KAAAE,EAAAA,EAAAA,GAAA,KAAAF,EAAA,IAwBjBG,EAAc,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,I,IAAAE,G,EAAAH,E,gaAMlB,SAAAA,EAAYI,GAAO,IAAAC,GAAAN,EAAAA,EAAAA,GAAA,KAAAC,GACjBK,EAAAF,EAAAG,KAAA,KAAMF,IAAOG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,uBANQ,CAAC,gBAAaE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,sBA+LR,SAACI,GAE5BJ,EAAKK,iBAAgBC,EAAA,GAAQF,GAE7BJ,EAAKO,SAAS,CAGZC,aAAYF,EAAA,GAAOF,GACnBK,qBAAqB,GAEzB,KAACP,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,kBAEwB,WACvBA,EAAKU,aAAY,EACnB,KAACR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,eAEqB,WAAwB,IAAvBW,IAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACxBG,EAAWf,EAAKgB,MAAhBD,OACRf,EAAKO,SAAS,CAAEU,QAASN,IAAe,WACtC,GAAqB,UAAjBI,EAAY,IACdG,EAAAA,GAAAA,KACEC,EAAAA,GAAAA,WAAuBJ,EAAQf,EAAKoB,uBACpCC,MAAK,SAACC,GACNtB,EAAKO,SAAS,CACZU,SAAS,EACTM,QAASD,EAAOE,KAAKA,KACrBC,UAAWH,EAAOE,KAAKE,KAAKC,OAEhC,QACK,CACL,IAAIC,EAAWC,EAAAA,GAEXC,aAAoBC,EAAAA,EAAAA,2BACtBH,EAAWI,EAAAA,IAGbJ,EAASK,OAAOZ,MAAK,SAACC,GACpBtB,EAAKO,SAAS,CACZU,SAAS,EACTM,QAASD,EAAOE,KAAKA,KACrBC,UAAWH,EAAOE,KAAKE,KAAKC,OAEhC,GACF,CACF,GACF,IApOE,IAAMZ,EAASI,EAAAA,GAAAA,iBAA6BpB,EAAMmC,SAASC,OAAQ,CACjE,OACA,cA2BA,OAxBGpB,EAAkB,YACrBA,EAAkB,UAAI,IAGnBA,EAAY,MACfA,EAAY,IAAI,SAIfA,EAAY,KACbe,aAAoBC,EAAAA,EAAAA,6BAEpBhB,EAAY,IAAI,SAGlBf,EAAKgB,MAAQ,CACXS,UAAW,EACXV,OAAQA,EACRE,SAAS,EACTR,qBAAqB,EACrBc,QAAS,GACTf,kBAAcM,EACdsB,cAAe,CAAC,EAChBC,cAAc,GACdrC,CACJ,CAsNC,OAtNAP,EAAAA,EAAAA,GAAAE,EAAA,EAAA2C,IAAA,oBAAAC,MAED,YACOC,KAAKC,QAAQC,MAAQF,KAAKC,QAAQC,KAAKC,aAC1CH,KAAKjC,SAAS,CAAE8B,cAAc,EAAMpB,SAAS,IAE7CuB,KAAK9B,aAET,GAAC,CAAA4B,IAAA,SAAAC,MAED,WAAS,IAAAK,EAAA,KACPC,EAQIL,KAAKxB,MAPPD,EAAM8B,EAAN9B,OACAE,EAAO4B,EAAP5B,QACAM,EAAOsB,EAAPtB,QACAf,EAAYqC,EAAZrC,aACAC,EAAmBoC,EAAnBpC,oBACA2B,EAAaS,EAAbT,cACAC,EAAYQ,EAAZR,aAGIS,EAAO,CACX,CAAEC,GAAI,QAASC,KAAMC,EAAAA,GAAAA,EAAA,UACrB,CAAEF,GAAI,SAAUC,KAAMC,EAAAA,GAAAA,EAAA,YAExB,OACEC,EAAAA,cAACA,EAAAA,SAAc,KACZ1C,GAAgBC,GACfyC,EAAAA,cAACC,EAAAA,GAAU,CACT/C,OAAQI,EACR4C,aAAc,SAACC,GAAa,OAAKT,EAAKrC,SAAS,CAAEC,aAAc6C,GAAI,EACnEC,WAAY,WACV,IAAQ9C,EAAiBoC,EAAK5B,MAAtBR,aAER,IACE,IAAM+C,EACJ/C,EAAagD,aAAa,GAAGC,cAAc,GAAGC,UAEhDxC,EAAAA,GAAAA,YACEqC,EACA/C,EACAoC,EAAKvC,kBAEJgB,MAAK,WACJuB,EAAKrC,SACH,CACE6B,cAAe,CAAC,EAChB3B,qBAAqB,EACrBD,kBAAcM,IAEhB,kBAAM8B,EAAKlC,aAAa,GAE5B,IAAE,OACK,SAACiD,GAAG,OACTf,EAAKrC,SAAS,CAAE6B,eAAewB,EAAAA,EAAAA,IAAiBD,IAAO,GAQ7D,CANE,MAAAE,GACAjB,EAAKrC,SAAS,CACZ6B,cAAe,CACb0B,UAAWb,EAAAA,GAAAA,EAAA,gEAGjB,CACF,EACAb,cAAeA,EACf2B,UAAWtD,EACXuD,WAAY,kBACVpB,EAAKrC,SAAS,CAAEE,qBAAqB,EAAO2B,cAAe,CAAC,GAAI,IAItEc,EAAAA,cAACe,EAAAA,GAAU,CACTC,MAAOjB,EAAAA,GAAAA,EAAA,mBACPkB,aAAc3B,KAAK4B,kBAElBtC,aAAoBC,EAAAA,EAAAA,4BACpBd,GACAoB,EAkBG,KAjBFa,EAAAA,cAAA,OAAKmB,UAAU,iBACbnB,EAAAA,cAAA,OAAKmB,UAAU,0BACbnB,EAAAA,cAAA,OAAKmB,UAAU,QACbnB,EAAAA,cAACoB,EAAAA,GAAI,CACHxB,KAAMA,EACN/B,OAAQA,EACRwD,aAAc,SAACC,GAGb5B,EAAKrC,SAAS,CAAEgB,QAAS,KAAM,kBAC7BqB,EAAK2B,aAAaC,GAAG,kBAAM5B,EAAKlC,aAAa,GAAC,GAElD,QAOXO,EACCiC,EAAAA,cAACuB,EAAAA,GAAkB,MACjBpC,EACFa,EAAAA,cAACwB,EAAAA,GAAsB,MAEvBlC,KAAKmC,cAAc5D,EAAQQ,GAInC,GAAC,CAAAe,IAAA,gBAAAC,MAED,SAAsBxB,EAAQQ,GAAS,IAAAqD,EAAA,KAC7BlC,EAASF,KAAKC,QAAdC,KAER,MACEZ,aAAoBC,EAAAA,EAAAA,0BACjBhB,EAAO8D,KAAoC,UAA7B9D,EAAO8D,IAAIC,cAG1B5B,EAAAA,cAAC6B,EAAAA,GAAI,CAACV,UAAU,mBACdnB,EAAAA,cAAA,WAASmB,UAAU,QACjBnB,EAAAA,cAAC8B,EAAAA,GAAoB,CACnBxB,aAAcjC,EACdgD,aAAc/B,KAAK+B,iBAMvBxD,EAAO8D,KAAoC,WAA7B9D,EAAO8D,IAAIC,cACH,IAAnBvD,EAAQV,OACbqC,EAAAA,cAAC+B,EAAAA,GAAgB,CACff,MAAOjB,EAAAA,GAAAA,EAAA,8BACPiC,YAAajC,EAAAA,GAAAA,EAAA,gDAGfC,EAAAA,cAAC6B,EAAAA,GAAI,CAACV,UAAU,mBACdnB,EAAAA,cAAA,WAASmB,UAAU,QACjBnB,EAAAA,cAACiC,EAAAA,GAAqB,CACpBC,QAAS7D,EACTgD,aAAc/B,KAAK+B,aACnBc,WAAY,SAACjF,GAAkB,OAC7BwE,EAAKU,mBAAmBlF,EAAO,EAEjCmF,WAAY,SAACC,GAAM,OACjBtE,EAAAA,GAAAA,KAAesE,GAAQnE,MAAK,kBAAMuD,EAAKlE,aAAa,GAAC,EAEvDgC,KAAMA,EACN+C,eAAgBjD,KAAKkD,wBAnB/B,CAyBF,GAAC,CAAApD,IAAA,iBAAAC,MAiDD,WACE,GAA6B,SAAzBC,KAAKxB,MAAMD,OAAO8D,IACpB,OACE3B,EAAAA,cAACyC,EAAAA,YAAW,KACVzC,EAAAA,cAAC0C,EAAAA,KAAI,CAACC,IAAIC,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,QACnB7C,EAAAA,cAAC8C,EAAAA,OAAM,KAAE/C,EAAAA,GAAAA,EAAA,eAKnB,GAAC,CAAAX,IAAA,eAAA2D,IAED,WACE,OAAO9E,EAAAA,GAAAA,kBAA8BqB,KAAKpB,qBAC5C,KAACzB,CAAA,CA7PiB,CAASuD,EAAAA,WAgQ7B,SAAegD,EAAAA,EAAAA,IAAWvG,GAC1BA,EAAewG,YAAcC,EAAAA,C","sources":["webpack:///./src/containers/repositories/repository-list.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport { Button, ToolbarItem } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  DistributionAPI,\n  DistributionType,\n  MyDistributionAPI,\n  RemoteAPI,\n  RemoteType,\n} from 'src/api';\nimport {\n  BaseHeader,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n  LocalRepositoryTable,\n  Main,\n  RemoteForm,\n  RemoteRepositoryTable,\n  Tabs,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { Paths, formatPath } from 'src/paths';\nimport { RouteProps, withRouter } from 'src/utilities';\nimport {\n  ErrorMessagesType,\n  ParamHelper,\n  mapErrorMessages,\n} from 'src/utilities';\n\nexport class Repository {\n  name: string;\n  url: string;\n  token: string;\n  ssoUrl: string;\n  yaml: string;\n  sync: boolean;\n}\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n    tab?: string;\n  };\n  itemCount: number;\n  loading: boolean;\n  showRemoteFormModal: boolean;\n  errorMessages: ErrorMessagesType; // RemoteForm modal messages\n  unauthorised: boolean;\n  content: RemoteType[] | DistributionType[];\n  remoteToEdit: RemoteType;\n}\n\nclass RepositoryList extends React.Component<RouteProps, IState> {\n  nonQueryStringParams = ['repository'];\n  // Used to save a copy of the remote before it's edited. This can be used to determine\n  // which fields were changed when a user hits save.\n  unModifiedRemote: RemoteType;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['tab']) {\n      params['tab'] = 'local';\n    }\n\n    if (\n      !params['tab'] &&\n      DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE\n    ) {\n      params['tab'] = 'local';\n    }\n\n    this.state = {\n      itemCount: 1,\n      params: params,\n      loading: false,\n      showRemoteFormModal: false,\n      content: [],\n      remoteToEdit: undefined,\n      errorMessages: {},\n      unauthorised: false,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.context.user || this.context.user.is_anonymous) {\n      this.setState({ unauthorised: true, loading: false });\n    } else {\n      this.loadContent();\n    }\n  }\n\n  render() {\n    const {\n      params,\n      loading,\n      content,\n      remoteToEdit,\n      showRemoteFormModal,\n      errorMessages,\n      unauthorised,\n    } = this.state;\n\n    const tabs = [\n      { id: 'local', name: t`Local` },\n      { id: 'remote', name: t`Remote` },\n    ];\n    return (\n      <React.Fragment>\n        {remoteToEdit && showRemoteFormModal && (\n          <RemoteForm\n            remote={remoteToEdit}\n            updateRemote={(r: RemoteType) => this.setState({ remoteToEdit: r })}\n            saveRemote={() => {\n              const { remoteToEdit } = this.state;\n\n              try {\n                const distro_path =\n                  remoteToEdit.repositories[0].distributions[0].base_path;\n\n                RemoteAPI.smartUpdate(\n                  distro_path,\n                  remoteToEdit,\n                  this.unModifiedRemote,\n                )\n                  .then(() => {\n                    this.setState(\n                      {\n                        errorMessages: {},\n                        showRemoteFormModal: false,\n                        remoteToEdit: undefined,\n                      },\n                      () => this.loadContent(),\n                    );\n                  })\n                  .catch((err) =>\n                    this.setState({ errorMessages: mapErrorMessages(err) }),\n                  );\n              } catch {\n                this.setState({\n                  errorMessages: {\n                    __nofield: t`Can't update remote without a distribution attached to it.`,\n                  },\n                });\n              }\n            }}\n            errorMessages={errorMessages}\n            showModal={showRemoteFormModal}\n            closeModal={() =>\n              this.setState({ showRemoteFormModal: false, errorMessages: {} })\n            }\n          />\n        )}\n        <BaseHeader\n          title={t`Repo Management`}\n          pageControls={this.renderControls()}\n        >\n          {DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE &&\n          !loading &&\n          !unauthorised ? (\n            <div className='header-bottom'>\n              <div className='hub-tab-link-container'>\n                <div className='tabs'>\n                  <Tabs\n                    tabs={tabs}\n                    params={params}\n                    updateParams={(p) => {\n                      // empty the content before updating the params to prevent\n                      // rendering from breaking when the wrong content is loaded\n                      this.setState({ content: [] }, () =>\n                        this.updateParams(p, () => this.loadContent()),\n                      );\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </BaseHeader>\n        {loading ? (\n          <LoadingPageSpinner />\n        ) : unauthorised ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          this.renderContent(params, content)\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderContent(params, content) {\n    const { user } = this.context;\n    // Dont show remotes on insights\n    if (\n      DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE ||\n      (!!params.tab && params.tab.toLowerCase() === 'local')\n    ) {\n      return (\n        <Main className='repository-list'>\n          <section className='body'>\n            <LocalRepositoryTable\n              repositories={content}\n              updateParams={this.updateParams}\n            />\n          </section>\n        </Main>\n      );\n    }\n    if (!!params.tab && params.tab.toLowerCase() === 'remote') {\n      return content.length === 0 ? (\n        <EmptyStateNoData\n          title={t`No remote repositories yet`}\n          description={t`Remote repositories will appear once added`}\n        />\n      ) : (\n        <Main className='repository-list'>\n          <section className='body'>\n            <RemoteRepositoryTable\n              remotes={content}\n              updateParams={this.updateParams}\n              editRemote={(remote: RemoteType) =>\n                this.selectRemoteToEdit(remote)\n              }\n              syncRemote={(distro) =>\n                RemoteAPI.sync(distro).then(() => this.loadContent())\n              }\n              user={user}\n              refreshRemotes={this.refreshContent}\n            />\n          </section>\n        </Main>\n      );\n    }\n  }\n\n  private selectRemoteToEdit = (remote: RemoteType) => {\n    // save a copy of the remote to diff against\n    this.unModifiedRemote = { ...remote };\n\n    this.setState({\n      // create a copy of the remote to pass to the edit form, so that the\n      // list of remotes doesn't get updated by accident.\n      remoteToEdit: { ...remote },\n      showRemoteFormModal: true,\n    });\n  };\n\n  private refreshContent = () => {\n    this.loadContent(false);\n  };\n\n  private loadContent = (showLoading = true) => {\n    const { params } = this.state;\n    this.setState({ loading: showLoading }, () => {\n      if (params['tab'] == 'remote') {\n        RemoteAPI.list(\n          ParamHelper.getReduced(params, this.nonQueryStringParams),\n        ).then((result) => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      } else {\n        let APIClass = DistributionAPI;\n\n        if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE) {\n          APIClass = MyDistributionAPI;\n        }\n\n        APIClass.list().then((result) => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      }\n    });\n  };\n\n  private renderControls() {\n    if (this.state.params.tab == 'local') {\n      return (\n        <ToolbarItem>\n          <Link to={formatPath(Paths.token)}>\n            <Button>{t`Get token`}</Button>\n          </Link>\n        </ToolbarItem>\n      );\n    }\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n}\n\nexport default withRouter(RepositoryList);\nRepositoryList.contextType = AppContext;\n"],"names":["Repository","_createClass","_classCallCheck","RepositoryList","_React$Component","_inherits","_super","props","_this","call","_defineProperty","_assertThisInitialized","remote","unModifiedRemote","_objectSpread","setState","remoteToEdit","showRemoteFormModal","loadContent","showLoading","arguments","length","undefined","params","state","loading","RemoteAPI","ParamHelper","nonQueryStringParams","then","result","content","data","itemCount","meta","count","APIClass","DistributionAPI","DEPLOYMENT_MODE","Constants","MyDistributionAPI","list","location","search","errorMessages","unauthorised","key","value","this","context","user","is_anonymous","_this2","_this$state","tabs","id","name","i18n","React","RemoteForm","updateRemote","r","saveRemote","distro_path","repositories","distributions","base_path","err","mapErrorMessages","_unused","__nofield","showModal","closeModal","BaseHeader","title","pageControls","renderControls","className","Tabs","updateParams","p","LoadingPageSpinner","EmptyStateUnauthorized","renderContent","_this3","tab","toLowerCase","Main","LocalRepositoryTable","EmptyStateNoData","description","RemoteRepositoryTable","remotes","editRemote","selectRemoteToEdit","syncRemote","distro","refreshRemotes","refreshContent","ToolbarItem","Link","to","formatPath","Paths","Button","get","withRouter","contextType","AppContext"],"sourceRoot":""}
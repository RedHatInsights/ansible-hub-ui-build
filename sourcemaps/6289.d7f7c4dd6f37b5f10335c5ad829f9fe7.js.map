{"version":3,"file":"js/6289.1afb3ac8c81ec8d13e69.js","mappings":"81BA0BA,IAAMA,EAAkB,CAEtBC,EAAAA,GAEAC,EAAAA,GAEAC,EAAAA,GAEAC,EAAAA,IA4IF,SA7H8BC,EAAAA,EAAAA,IAAgC,CAC5DC,UAAWC,EAAAA,GACXC,gBAAiB,GACjBC,YAAa,gBACbC,YAAa,wBACbC,WAAY,CAAAC,GAAA,UACZC,aAAc,SAAAC,GAAA,IAAYC,EAAOD,EAAhBE,MAASD,QAAO,MAAS,CACxC,CACEH,GAAI,kBACJK,MAAKC,EAAAA,GAAAC,EAAE,CAAAP,GAAA,YAET,CACEA,GAAI,oBACJK,MAAKC,EAAAA,GAAAC,EAAE,CAAAP,GAAA,WACPQ,UAAW,SACXC,QAAS,CACP,CACET,GAAI,YAAFU,OAAcC,EAAAA,EAAUC,cAC1BP,MAAKC,EAAAA,GAAAC,EAAE,CAAAP,GAAA,YAET,CACEA,GAAI,YAAFU,OAAcC,EAAAA,EAAUE,aAC1BR,MAAKC,EAAAA,GAAAC,EAAE,CAAAP,GAAA,YAET,CACEA,GAAI,YAAFU,OAAcC,EAAAA,EAAUG,UAC1BT,MAAKC,EAAAA,GAAAC,EAAE,CAAAP,GAAA,cAIb,CACEA,GAAI,SACJK,MAAKC,EAAAA,GAAAC,EAAE,CAAAP,GAAA,WACPQ,UAAW,YACXC,QAAS,CACP,CACET,GAAI,OACJK,MAAKC,EAAAA,GAAAC,EAAE,CAAAP,GAAA,aACRU,QAAAK,EAAAA,EAAAA,GACGZ,GAAW,MAGpB,EACDa,cAAe,CAACC,EAAAA,IAChB7B,gBAAAA,EACA8B,aAAcD,EAAAA,GAA8BE,OAC5CC,kBAAmB,CAAApB,GAAA,UACnBqB,YAAa,CAAArB,GAAA,UACbsB,MAAO,SAAAC,GAAA,IAAGC,EAAMD,EAANC,OAAM,OAAOC,EAAAA,GAAqBC,KAAKF,EAAO,EACxDG,eA7DqB,SAAHC,GAAgD,IAA1CC,EAASD,EAATC,UAAWC,EAAcF,EAAdE,eAAgBC,EAAQH,EAARG,SACnD,GAAuB,WAAnBD,EAIJ,OAAOE,EAAAA,GAAiBN,KAAK,CAAEO,gBAAiBJ,IAC7CK,MAAK,SAAAC,GAAkB,OAAAA,EAAfC,KAAQC,QACPC,KAAI,SAAAC,GAAA,IAAGC,EAAID,EAAJC,KAAe,MAAQ,CAAExC,GAAVuC,EAATE,UAAkCpC,MAAOmC,EAAM,GAAE,IAEvEN,MAAK,SAAC/B,GAAO,OAAK4B,EAAS,CAAE5B,QAAAA,GAAU,GAC5C,EAoDEuC,eAAc,SAACC,EAA6BC,EAAeC,GACzD,IACEC,EAOEH,EAPFG,eACAN,EAMEG,EANFH,KACSO,EAKPJ,EAAI,QAJNK,EAIEL,EAJFK,aACAP,EAGEE,EAHFF,UACAQ,EAEEN,EAFFM,YACAC,EACEP,EADFO,OAEIlD,GAAKmD,EAAAA,EAAAA,IAAmBV,GAExBW,EAAahE,EAAgBkD,KAAI,SAACe,GAAM,OAC5CA,EAAOC,aAAYC,EAAAA,EAAC,CAAC,EAAIZ,GAAI,IAAE3C,GAAAA,IAAM6C,EAAc,IAGrD,OACEW,IAAAA,cAAA,MAAIC,IAAKb,GACPY,IAAAA,cAAA,UACEA,IAAAA,cAACE,EAAAA,KAAI,CAACC,IAAIC,EAAAA,EAAAA,IAAWC,EAAAA,GAAMC,wBAAyB,CAAEtB,KAAAA,KACnDA,IAGLgB,IAAAA,cAAA,UACEA,IAAAA,cAACO,EAAAA,GAAU,CAACC,OAAQf,KAEtBO,IAAAA,cAAA,UAAKT,EAASzC,EAAAA,GAAAC,EAAG,CAAAP,GAAA,WAAMM,EAAAA,GAAAC,EAAG,CAAAP,GAAA,YAC1BwD,IAAAA,cAAA,UACIN,EAEGJ,EAGHU,IAAAA,cAAAA,IAAAA,SAAA,MACGS,EAAAA,EAAAA,IAAetB,GAAM,KAAEuB,EAAAA,EAAAA,IAAWvB,IAJpBrC,EAAAA,GAAAC,EACjB,CAAAP,GAAA,WAHMM,EAAAA,GAAAC,EACN,CAAAP,GAAA,YASJwD,IAAAA,cAAA,UACEA,IAAAA,cAACW,EAAAA,GAAa,CAACC,KAAMpB,KAEvBQ,IAAAA,cAACa,EAAAA,GAAe,CAACjB,WAAYA,IAGnC,EACAkB,YAAa,CACX,CACEjE,MAAO,CAAAL,GAAA,UACPuE,KAAM,QACNvE,GAAI,QAEN,CACEK,MAAO,CAAAL,GAAA,UACPuE,KAAM,OACNvE,GAAI,eAEN,CACEK,MAAO,CAAAL,GAAA,UACPuE,KAAM,OACNvE,GAAI,WAEN,CACEK,MAAO,CAAAL,GAAA,UACPuE,KAAM,OACNvE,GAAI,kBAEN,CACEK,MAAO,CAAAL,GAAA,UACPuE,KAAM,UACNvE,GAAI,iBAGRK,MAAO,CAAAL,GAAA,W","sources":["webpack:///./src/containers/ansible-repository/list.tsx"],"sourcesContent":["import { msg, t } from '@lingui/macro';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  ansibleRepositoryCopyAction,\n  ansibleRepositoryCreateAction,\n  ansibleRepositoryDeleteAction,\n  ansibleRepositoryEditAction,\n  ansibleRepositorySyncAction,\n} from 'src/actions';\nimport {\n  AnsibleRemoteAPI,\n  AnsibleRepositoryAPI,\n  AnsibleRepositoryType,\n} from 'src/api';\nimport {\n  DateComponent,\n  ListItemActions,\n  ListPage,\n  PulpLabels,\n} from 'src/components';\nimport { Constants } from 'src/constants';\nimport { Paths, formatPath } from 'src/paths';\nimport { canViewAnsibleRepositories } from 'src/permissions';\nimport { lastSyncStatus, lastSynced, parsePulpIDFromURL } from 'src/utilities';\n\nconst listItemActions = [\n  // Edit\n  ansibleRepositoryEditAction,\n  // Sync\n  ansibleRepositorySyncAction,\n  // Copy CLI configuration\n  ansibleRepositoryCopyAction,\n  // Delete\n  ansibleRepositoryDeleteAction,\n];\n\nconst typeaheadQuery = ({ inputText, selectedFilter, setState }) => {\n  if (selectedFilter !== 'remote') {\n    return;\n  }\n\n  return AnsibleRemoteAPI.list({ name__icontains: inputText })\n    .then(({ data: { results } }) =>\n      results.map(({ name, pulp_href }) => ({ id: pulp_href, title: name })),\n    )\n    .then((remotes) => setState({ remotes }));\n};\n\nconst AnsibleRepositoryList = ListPage<AnsibleRepositoryType>({\n  condition: canViewAnsibleRepositories,\n  defaultPageSize: 10,\n  defaultSort: '-pulp_created',\n  displayName: 'AnsibleRepositoryList',\n  errorTitle: msg`Repositories could not be displayed.`,\n  filterConfig: ({ state: { remotes } }) => [\n    {\n      id: 'name__icontains',\n      title: t`Repository name`,\n    },\n    {\n      id: 'pulp_label_select',\n      title: t`Pipeline`,\n      inputType: 'select',\n      options: [\n        {\n          id: `pipeline=${Constants.NOTCERTIFIED}`,\n          title: t`Rejected`,\n        },\n        {\n          id: `pipeline=${Constants.NEEDSREVIEW}`,\n          title: t`Needs Review`,\n        },\n        {\n          id: `pipeline=${Constants.APPROVED}`,\n          title: t`Approved`,\n        },\n      ],\n    },\n    {\n      id: 'remote',\n      title: t`Remote`,\n      inputType: 'typeahead',\n      options: [\n        {\n          id: 'null',\n          title: t`None`,\n        },\n        ...(remotes || []),\n      ],\n    },\n  ],\n  headerActions: [ansibleRepositoryCreateAction], // Add repository\n  listItemActions,\n  noDataButton: ansibleRepositoryCreateAction.button,\n  noDataDescription: msg`Repositories will appear once created.`,\n  noDataTitle: msg`No repositories yet`,\n  query: ({ params }) => AnsibleRepositoryAPI.list(params),\n  typeaheadQuery,\n  renderTableRow(item: AnsibleRepositoryType, index: number, actionContext) {\n    const {\n      last_sync_task,\n      name,\n      private: isPrivate,\n      pulp_created,\n      pulp_href,\n      pulp_labels,\n      remote,\n    } = item;\n    const id = parsePulpIDFromURL(pulp_href);\n\n    const kebabItems = listItemActions.map((action) =>\n      action.dropdownItem({ ...item, id }, actionContext),\n    );\n\n    return (\n      <tr key={index}>\n        <td>\n          <Link to={formatPath(Paths.ansibleRepositoryDetail, { name })}>\n            {name}\n          </Link>\n        </td>\n        <td>\n          <PulpLabels labels={pulp_labels} />\n        </td>\n        <td>{isPrivate ? t`Yes` : t`No`}</td>\n        <td>\n          {!remote ? (\n            t`no remote`\n          ) : !last_sync_task ? (\n            t`never synced`\n          ) : (\n            <>\n              {lastSyncStatus(item)} {lastSynced(item)}\n            </>\n          )}\n        </td>\n        <td>\n          <DateComponent date={pulp_created} />\n        </td>\n        <ListItemActions kebabItems={kebabItems} />\n      </tr>\n    );\n  },\n  sortHeaders: [\n    {\n      title: msg`Repository name`,\n      type: 'alpha',\n      id: 'name',\n    },\n    {\n      title: msg`Labels`,\n      type: 'none',\n      id: 'pulp_labels',\n    },\n    {\n      title: msg`Private`,\n      type: 'none',\n      id: 'private',\n    },\n    {\n      title: msg`Sync status`,\n      type: 'none',\n      id: 'last_sync_task',\n    },\n    {\n      title: msg`Created date`,\n      type: 'numeric',\n      id: 'pulp_created',\n    },\n  ],\n  title: msg`Repositories`,\n});\n\nexport default AnsibleRepositoryList;\n"],"names":["listItemActions","ansibleRepositoryEditAction","ansibleRepositorySyncAction","ansibleRepositoryCopyAction","ansibleRepositoryDeleteAction","ListPage","condition","canViewAnsibleRepositories","defaultPageSize","defaultSort","displayName","errorTitle","id","filterConfig","_ref4","remotes","state","title","i18n","_","inputType","options","concat","Constants","NOTCERTIFIED","NEEDSREVIEW","APPROVED","_toConsumableArray","headerActions","ansibleRepositoryCreateAction","noDataButton","button","noDataDescription","noDataTitle","query","_ref5","params","AnsibleRepositoryAPI","list","typeaheadQuery","_ref","inputText","selectedFilter","setState","AnsibleRemoteAPI","name__icontains","then","_ref2","data","results","map","_ref3","name","pulp_href","renderTableRow","item","index","actionContext","last_sync_task","isPrivate","pulp_created","pulp_labels","remote","parsePulpIDFromURL","kebabItems","action","dropdownItem","_objectSpread","React","key","Link","to","formatPath","Paths","ansibleRepositoryDetail","PulpLabels","labels","lastSyncStatus","lastSynced","DateComponent","date","ListItemActions","sortHeaders","type"],"sourceRoot":""}
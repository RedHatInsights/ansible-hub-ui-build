{"version":3,"sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.scss","webpack:///./src/containers/collection-detail/collection-detail.scss?14b9","webpack:///./src/containers/collection-detail/collection-detail.tsx","webpack:///./src/containers/collection-detail/collection-content.tsx","webpack:///./src/containers/collection-detail/collection-docs.tsx","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"names":["loadCollection","repo","forceReload","callback","getCached","this","props","match","params","state","then","result","setState","collection","catch","history","push","notFound","module","exports","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","parseParamString","location","search","componentDidMount","context","selectedRepo","render","breadcrumbs","url","namespaceByRepo","namespace","name","updateParams","p","activeTab","className","updateParamsMixin","CollectionDetail","contextType","collectionByRepo","_","contents","latest_version","metadata","CollectionContent","docsRef","searchBarRef","displayHTML","pluginData","urlFields","contentType","contentName","docs_blob","documentation_files","file","find","x","html","content_type","content_name","collection_readme","selectedName","selectedType","ref","dangerouslySetInnerHTML","__html","plugin","renderModuleLink","moduleName","renderDocLink","href","renderTableOfContentsLink","title","section","to","renderWarning","text","isInline","variant","renderNotFound","startsWith","target","collectionDocsPageByRepo","page","allContent","collectionContentDocsByRepo","type","collectionName","description","icon","CollectionDocs","loadingImports","selectedImportDetail","selectedImport","apiError","loadData","loading","task","followMessages","setFollowMessages","hideCollectionName","failMsg","list","version","sort","importListResult","importObj","data","get","id","importDetailResult","err","CollectionImportLog"],"mappings":"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","file":"js/collection_detail.5dcf30ec7cd72aee445e.js","sourcesContent":["import { CollectionDetailType, CollectionAPI } from 'src/api';\nimport { Paths } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n}\n\nexport function loadCollection(\n  repo,\n  forceReload = false,\n  callback = () => null,\n) {\n  CollectionAPI.getCached(\n    this.props.match.params['namespace'],\n    this.props.match.params['collection'],\n    repo,\n    this.state.params,\n    forceReload,\n  )\n    .then((result) => {\n      this.setState({ collection: result }, callback);\n    })\n    .catch((result) => {\n      this.props.history.push(Paths.notFound);\n    });\n}\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".main{margin:0px;padding:0px}.header{border-bottom:1px solid #d8d8d8}.pf-c-toolbar__group{margin-left:16px}.docs-container{padding-top:24px;background-color:#fff}@media(min-width: 1000px){.docs-container{display:flex}}.docs-container .sidebar{min-width:294px;max-width:294px;border-right:1px solid #d8d8d8;padding:0px;padding-top:0px}.docs-container .docs{flex-grow:1;padding:24px;padding-top:0px;overflow-x:auto;min-height:calc(100vh - 250px)}.docs-container .docs table tr:nth-child(2n){background-color:#f2f2f2}.docs-container .docs table td,.docs-container .docs table th{border:1px solid #ccc;padding:5px}.docs-container pre{white-space:pre-wrap}\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport {\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        name: collection.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='install'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionInfo\n              {...collection}\n              updateParams={(p) => this.updateParams(p)}\n              params={this.state.params}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDetail);\n\nCollectionDetail.contextType = AppContext;\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport {\n  CollectionHeader,\n  CollectionContentList,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: _`Content` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <CollectionContentList\n              contents={collection.latest_version.metadata.contents}\n              collection={collection.name}\n              namespace={collection.namespace.name}\n              params={params}\n              updateParams={(p) => this.updateParams(p)}\n            ></CollectionContentList>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\n\nCollectionContent.contextType = AppContext;\n","import * as React from 'react';\nimport './collection-detail.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { HashLink } from 'react-router-hash-link';\n\nimport { Alert, TextInputBase } from '@patternfly/react-core';\n\nimport {\n  CollectionHeader,\n  TableOfContents,\n  LoadingPageWithHeader,\n  Main,\n  EmptyStateCustom,\n} from 'src/components';\n\nimport { RenderPluginDoc } from '@ansible/galaxy-doc-builder';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper, sanitizeDocsUrls } from 'src/utilities';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\n// renders markdown files in collection docs/ directory\nclass CollectionDocs extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  docsRef: any;\n  searchBarRef: React.RefObject<HTMLInputElement>;\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n    this.docsRef = React.createRef();\n    this.searchBarRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { params, collection } = this.state;\n    const urlFields = this.props.match.params;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // If the parser can't find anything that matches the URL, neither of\n    // these variables should be set\n    let displayHTML: string;\n    let pluginData;\n\n    const contentType = urlFields['type'] || 'docs';\n    const contentName = urlFields['name'] || urlFields['page'] || null;\n\n    if (contentType === 'docs' && contentName) {\n      if (collection.latest_version.docs_blob.documentation_files) {\n        const file =\n          collection.latest_version.docs_blob.documentation_files.find(\n            (x) => sanitizeDocsUrls(x.name) === urlFields['page'],\n          );\n\n        if (file) {\n          displayHTML = file.html;\n        }\n      }\n    } else if (contentName) {\n      // check if contents exists\n      if (collection.latest_version.docs_blob.contents) {\n        const content = collection.latest_version.docs_blob.contents.find(\n          (x) =>\n            x.content_type === contentType && x.content_name === contentName,\n        );\n\n        if (content) {\n          if (contentType === 'role') {\n            displayHTML = content['readme_html'];\n          } else {\n            pluginData = content;\n          }\n        }\n      }\n    } else {\n      if (collection.latest_version.docs_blob.collection_readme) {\n        displayHTML =\n          collection.latest_version.docs_blob.collection_readme.html;\n      }\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: _`Documentation` },\n    ];\n\n    // scroll to top of page\n\n    // if (\n    //   this.docsRef.current &&\n    //   this.searchBarRef.current !== window.document.activeElement\n    // ) {\n    //   this.docsRef.current.scrollIntoView();\n    // }\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(p) =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='documentation'\n          className='header'\n          repo={this.context.selectedRepo}\n        />\n        <Main className='main'>\n          <section className='docs-container'>\n            <TableOfContents\n              className='sidebar'\n              namespace={collection.namespace.name}\n              collection={collection.name}\n              docs_blob={collection.latest_version.docs_blob}\n              selectedName={contentName}\n              selectedType={contentType}\n              params={params}\n              updateParams={(p) => this.updateParams(p)}\n              searchBarRef={this.searchBarRef}\n            ></TableOfContents>\n\n            <div className='body docs pf-c-content' ref={this.docsRef}>\n              {displayHTML || pluginData ? (\n                // if neither variable is set, render not found\n                displayHTML ? (\n                  // if displayHTML is set, render it\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: displayHTML,\n                    }}\n                  ></div>\n                ) : (\n                  // if plugin data is set render it\n                  <RenderPluginDoc\n                    plugin={pluginData}\n                    renderModuleLink={(moduleName) =>\n                      this.renderModuleLink(\n                        moduleName,\n                        collection,\n                        params,\n                        collection.latest_version.metadata.contents,\n                      )\n                    }\n                    renderDocLink={(name, href) =>\n                      this.renderDocLink(name, href, collection, params)\n                    }\n                    renderTableOfContentsLink={(title, section) => (\n                      <HashLink to={'#' + section}>{title}</HashLink>\n                    )}\n                    renderWarning={(text) => (\n                      <Alert isInline variant='warning' title={text} />\n                    )}\n                  />\n                )\n              ) : (\n                this.renderNotFound(collection.name)\n              )}\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderDocLink(name, href, collection, params) {\n    if (!!href && href.startsWith('http')) {\n      return (\n        <a href={href} target='_blank'>\n          {name}\n        </a>\n      );\n    } else if (!!href) {\n      // TODO: right now this will break if people put\n      // ../ at the front of their urls. Need to find a\n      // way to document this\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionDocsPageByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              page: sanitizeDocsUrls(href),\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {name}\n        </Link>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private renderModuleLink(moduleName, collection, params, allContent) {\n    const module = allContent.find(\n      (x) => x.content_type === 'module' && x.name === moduleName,\n    );\n\n    if (module) {\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionContentDocsByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              type: 'module',\n              name: moduleName,\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {moduleName}\n        </Link>\n      );\n    } else {\n      return moduleName;\n    }\n  }\n\n  private renderNotFound(collectionName) {\n    return (\n      <EmptyStateCustom\n        title={_`Not found`}\n        description={\n          _`The file is not available for this version of ` + collectionName\n        }\n        icon={ExclamationCircleIcon}\n      />\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDocs);\n\nCollectionDocs.contextType = AppContext;\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { ImportAPI, ImportDetailType, ImportListType } from 'src/api';\nimport {\n  CollectionHeader,\n  LoadingPageWithHeader,\n  ImportConsole,\n  Main,\n} from 'src/components';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      namespaceBreadcrumb,\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: _`Import log` },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={(params) =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <section className='body'>\n            <ImportConsole\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={() => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = _`Could not load import log`;\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(this.context.selectedRepo, forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.namespace.name,\n          name: this.state.collection.name,\n          version: this.state.collection.latest_version.version,\n          sort: '-created',\n        })\n          .then((importListResult) => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then((importDetailResult) => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch((err) => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch((err) => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n\nCollectionImportLog.contextType = AppContext;\n"],"sourceRoot":""}
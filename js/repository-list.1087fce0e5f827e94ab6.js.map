{"version":3,"sources":["webpack:///./src/containers/repositories/repository-list.tsx"],"names":["props","nonQueryStringParams","selectRemoteToEdit","remote","unModifiedRemote","setState","remoteToEdit","showRemoteFormModal","refreshContent","loadContent","showLoading","params","state","loading","list","getReduced","then","result","content","data","itemCount","meta","count","APIClass","INSIGHTS_DEPLOYMENT_MODE","parseParamString","location","search","STANDALONE_DEPLOYMENT_MODE","undefined","errorMessages","componentDidMount","this","render","updateRemote","r","saveRemote","distro_path","repositories","distributions","base_path","smartUpdate","catch","err","__nofield","showModal","closeModal","title","className","tabs","updateParams","p","renderContent","user","context","tab","toLowerCase","length","description","remotes","editRemote","syncRemote","distro","sync","refreshRemotes","updateParamsMixin","RepositoryList","contextType","repositorylist","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error"],"mappings":"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","file":"js/repository-list.1087fce0e5f827e94ab6.js","sourcesContent":["import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport {\n  BaseHeader,\n  LoadingPageSpinner,\n  Main,\n  Tabs,\n  RemoteRepositoryTable,\n  LocalRepositoryTable,\n  RemoteForm,\n  EmptyStateNoData,\n} from 'src/components';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ParamHelper, mapErrorMessages } from 'src/utilities';\nimport { Constants } from 'src/constants';\nimport {\n  RemoteAPI,\n  RemoteType,\n  DistributionAPI,\n  MyDistributionAPI,\n  DistributionType,\n} from 'src/api';\nimport { AppContext } from 'src/loaders/app-context';\n\nexport class Repository {\n  name: string;\n  url: string;\n  token: string;\n  ssoUrl: string;\n  yaml: string;\n  sync: boolean;\n}\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n    tab?: string;\n  };\n  itemCount: number;\n  loading: boolean;\n  showRemoteFormModal: boolean;\n  errorMessages: Object;\n\n  content: RemoteType[] | DistributionType[];\n  remoteToEdit: RemoteType;\n}\n\nclass RepositoryList extends React.Component<RouteComponentProps, IState> {\n  nonQueryStringParams = ['repository'];\n  // Used to save a copy of the remote before it's edited. This can be used to determine\n  // which fields were changed when a user hits save.\n  unModifiedRemote: RemoteType;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['tab']) {\n      params['tab'] = 'local';\n    }\n\n    if (\n      !params['tab'] &&\n      DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE\n    ) {\n      params['tab'] = 'local';\n    }\n\n    this.state = {\n      itemCount: 1,\n      params: params,\n      loading: false,\n      showRemoteFormModal: false,\n      content: [],\n      remoteToEdit: undefined,\n      errorMessages: {},\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  render() {\n    const {\n      params,\n      loading,\n      content,\n      remoteToEdit,\n      showRemoteFormModal,\n      errorMessages,\n    } = this.state;\n\n    const tabs = ['Local', 'Remote'];\n    return (\n      <React.Fragment>\n        {remoteToEdit && showRemoteFormModal && (\n          <RemoteForm\n            remote={remoteToEdit}\n            updateRemote={(r: RemoteType) => this.setState({ remoteToEdit: r })}\n            saveRemote={() => {\n              const { remoteToEdit } = this.state;\n\n              try {\n                const distro_path =\n                  remoteToEdit.repositories[0].distributions[0].base_path;\n\n                RemoteAPI.smartUpdate(\n                  distro_path,\n                  remoteToEdit,\n                  this.unModifiedRemote,\n                )\n                  .then(r => {\n                    this.setState(\n                      {\n                        errorMessages: {},\n                        showRemoteFormModal: false,\n                        remoteToEdit: undefined,\n                      },\n                      () => this.loadContent(),\n                    );\n                  })\n                  .catch(err =>\n                    this.setState({ errorMessages: mapErrorMessages(err) }),\n                  );\n              } catch {\n                this.setState({\n                  errorMessages: {\n                    __nofield:\n                      \"Can't update remote without a distribution attached to it.\",\n                  },\n                });\n              }\n            }}\n            errorMessages={errorMessages}\n            showModal={showRemoteFormModal}\n            closeModal={() =>\n              this.setState({ showRemoteFormModal: false, errorMessages: {} })\n            }\n          />\n        )}\n        <BaseHeader title='Repo Management'>\n          {DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE &&\n          !loading ? (\n            <div className='header-bottom'>\n              <div className='tab-link-container'>\n                <div className='tabs'>\n                  <Tabs\n                    tabs={tabs}\n                    params={params}\n                    updateParams={p => {\n                      // empty the content before updating the params to prevent\n                      // rendering from breaking when the wrong content is loaded\n                      this.setState({ content: [] }, () =>\n                        this.updateParams(p, () => this.loadContent()),\n                      );\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </BaseHeader>\n        {loading ? <LoadingPageSpinner /> : this.renderContent(params, content)}\n      </React.Fragment>\n    );\n  }\n\n  private renderContent(params, content) {\n    const { user } = this.context;\n    // Dont show remotes on insights\n    if (\n      DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE ||\n      (!!params.tab && params.tab.toLowerCase() === 'local')\n    ) {\n      return (\n        <Main className='repository-list'>\n          <Section className='body'>\n            <LocalRepositoryTable\n              repositories={content}\n              updateParams={this.updateParams}\n            />\n          </Section>\n        </Main>\n      );\n    }\n    if (!!params.tab && params.tab.toLowerCase() === 'remote') {\n      return content.length === 0 ? (\n        <EmptyStateNoData\n          title={'No remote repositories yet'}\n          description={'Remote repositories will appear once added'}\n        />\n      ) : (\n        <Main className='repository-list'>\n          <Section className='body'>\n            <RemoteRepositoryTable\n              remotes={content}\n              updateParams={this.updateParams}\n              editRemote={(remote: RemoteType) =>\n                this.selectRemoteToEdit(remote)\n              }\n              syncRemote={distro =>\n                RemoteAPI.sync(distro).then(result => this.loadContent())\n              }\n              user={user}\n              refreshRemotes={this.refreshContent}\n            />\n          </Section>\n        </Main>\n      );\n    }\n  }\n\n  private selectRemoteToEdit = (remote: RemoteType) => {\n    // save a copy of the remote to diff against\n    this.unModifiedRemote = { ...remote };\n\n    this.setState({\n      // create a copy of the remote to pass to the edit form, so that the\n      // list of remotes doesn't get updated by accident.\n      remoteToEdit: { ...remote },\n      showRemoteFormModal: true,\n    });\n  };\n\n  private refreshContent = () => {\n    this.loadContent(false);\n  };\n\n  private loadContent = (showLoading = true) => {\n    const { params } = this.state;\n    this.setState({ loading: showLoading }, () => {\n      if (params['tab'] == 'remote') {\n        RemoteAPI.list(\n          ParamHelper.getReduced(params, this.nonQueryStringParams),\n        ).then(result => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      } else {\n        let APIClass = DistributionAPI;\n\n        if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE) {\n          APIClass = MyDistributionAPI;\n        }\n\n        APIClass.list().then(result => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      }\n    });\n  };\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n}\n\nexport default withRouter(RepositoryList);\nRepositoryList.contextType = AppContext;\ntry {\n    // @ts-ignore\n    repositorylist.displayName = \"repositorylist\";\n    // @ts-ignore\n    repositorylist.__docgenInfo = { \"description\": \"\", \"displayName\": \"repositorylist\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<RepositoryList>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/repositories/repository-list.tsx#repositorylist\"] = { docgenInfo: repositorylist.__docgenInfo, name: \"repositorylist\", path: \"src/containers/repositories/repository-list.tsx#repositorylist\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/containers/namespace-detail/import-modal/import-modal.scss","webpack:///./src/containers/namespace-detail/import-modal/import-modal.tsx","webpack:///./src/containers/namespace-detail/namespace-detail.tsx","webpack:///./src/containers/namespace-detail/import-modal/import-modal.scss?0eb5","webpack:///./src/containers/edit-namespace/namespace-form.tsx","webpack:///./src/containers/namespace-detail/manage-namespace.tsx","webpack:///./src/containers/namespace-detail/partner-detail.tsx"],"names":["module","exports","push","i","Status","props","acceptedFileTypes","state","file","undefined","errors","uploadProgress","uploadStatus","waiting","render","isOpen","collection","Modal","isSmall","title","name","onClose","handleClose","actions","Button","key","variant","onClick","saveFile","isDisabled","this","canUpload","className","disabled","type","id","onChange","e","handleFileUpload","target","files","htmlFor","renderFileIcon","style","width","uploading","newCollection","length","setState","includes","split","artifact","sha256","cancelToken","getCancelToken","upload","loaded","total","then","response","onUploadSuccess","catch","errorMessage","a","isCancel","data","detail","finally","_","msg","cancel","setOpen","nonAPIParams","nonQueryStringParams","params","parseParamString","location","search","match","collections","namespace","redirect","itemCount","showImportModal","warning","updateCollection","componentDidMount","loadAll","breadcrumbs","Redirect","to","result","history","myImports","warn","toggleImportModal","Alert","position","right","top","zIndex","action","AlertActionCloseButton","concat","tabs","updateParams","p","pageControls","renderPageControls","tab","toLowerCase","loadCollections","showControls","handleControlClick","handleCollectionAction","renderResources","find","x","source","resources","list","getReduced","meta","count","Promise","all","get","val","notFound","updateParamsMixin","display","alignItems","items","DropdownItem","Link","editNamespace","token","newState","content","options","transform","update","locals","hot","accept","newContent","b","idx","Error","dispose","TabKeys","newLinkURL","newLinkName","errorMessages","saving","unsavedData","loadNamespace","url","myNamespaces","myCollections","updateNamespace","saveNamespace","color","validateNamesace","EditNamespace","ManageNamespace","partners","PartnerDetail"],"mappings":"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","file":"js/namespace_detail.js","sourcesContent":["exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/* logo blue */\\n/* well background color */\\n/* alert info background color */\\n/* alert info border color */\\n.upload-collection .file-error-messages {\\n  color: #cc0000; }\\n\\n.upload-collection .upload-file {\\n  width: 0.1px;\\n  height: 0.1px;\\n  opacity: 0;\\n  overflow: hidden;\\n  position: absolute;\\n  z-index: -1; }\\n\\n.upload-collection .upload-file-label {\\n  display: inline-block;\\n  cursor: pointer;\\n  width: 100%;\\n  font-weight: normal; }\\n  .upload-collection .upload-file-label .upload-box {\\n    display: flex;\\n    border-style: solid;\\n    border-width: thin;\\n    width: 100%;\\n    border-radius: 3px; }\\n    .upload-collection .upload-file-label .upload-box .upload-button,\\n    .upload-collection .upload-file-label .upload-box .upload-text {\\n      padding: 5px; }\\n    .upload-collection .upload-file-label .upload-box .upload-button {\\n      border-right: thin solid;\\n      padding-left: 10px;\\n      padding-right: 10px; }\\n    .upload-collection .upload-file-label .upload-box .upload-button:hover {\\n      color: white;\\n      background-color: #808080; }\\n    .upload-collection .upload-file-label .upload-box .upload-text {\\n      position: relative;\\n      width: 100%; }\\n    .upload-collection .upload-file-label .upload-box .loading-bar {\\n      position: absolute;\\n      height: 3px;\\n      background-color: #5bb75b;\\n      bottom: 0px;\\n      left: 0px; }\\n\", \"\"]);\n\n","import * as React from 'react';\nimport './import-modal.scss';\nimport axios from 'axios';\n\nimport { Modal, Button } from '@patternfly/react-core';\nimport { FolderOpenIcon, SpinnerIcon } from '@patternfly/react-icons';\n\nimport {\n    CollectionListType,\n    CollectionAPI,\n    CollectionUploadType,\n} from '../../../api';\n\nenum Status {\n    uploading = 'uploading',\n    waiting = 'waiting',\n}\n\ninterface IProps {\n    isOpen: boolean;\n    setOpen: (isOpen, warnings?) => void;\n    onUploadSuccess: (result) => void;\n\n    collection?: CollectionListType;\n}\n\ninterface IState {\n    file?: File;\n    errors?: string;\n    uploadProgress: number;\n    uploadStatus: Status;\n}\n\nexport class ImportModal extends React.Component<IProps, IState> {\n    acceptedFileTypes = ['application/x-gzip', 'application/gzip'];\n    cancelToken: any;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            file: undefined,\n            errors: '',\n            uploadProgress: 0,\n            uploadStatus: Status.waiting,\n        };\n    }\n    render() {\n        const { isOpen, collection } = this.props;\n\n        const { file, errors, uploadProgress, uploadStatus } = this.state;\n        return (\n            <Modal\n                isSmall\n                title={\n                    collection\n                        ? 'New version of ' + collection.name\n                        : 'New collection'\n                }\n                isOpen={isOpen}\n                onClose={() => this.handleClose()}\n                actions={[\n                    <Button\n                        key='cancel'\n                        variant='secondary'\n                        onClick={() => this.handleClose()}\n                    >\n                        Cancel\n                    </Button>,\n                    <Button\n                        key='confirm'\n                        variant='primary'\n                        onClick={() => this.saveFile()}\n                        isDisabled={!this.canUpload()}\n                    >\n                        Upload\n                    </Button>,\n                ]}\n            >\n                <div className='upload-collection'>\n                    <form>\n                        <input\n                            disabled={uploadStatus !== Status.waiting}\n                            className='upload-file'\n                            type='file'\n                            id='collection-widget'\n                            onChange={e =>\n                                this.handleFileUpload(e.target.files)\n                            }\n                        />\n                        <label\n                            className='upload-file-label'\n                            htmlFor='collection-widget'\n                        >\n                            <div className='upload-box'>\n                                <div className='upload-button'>\n                                    {this.renderFileIcon()}\n                                </div>\n                                <div className='upload-text'>\n                                    {file != null ? file.name : 'Select file'}\n                                    <div\n                                        className='loading-bar'\n                                        style={{\n                                            width: uploadProgress * 100 + '%',\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </label>\n                    </form>\n                    {errors ? (\n                        <span className='file-error-messages'>\n                            <i className='pficon-error-circle-o' /> {errors}\n                        </span>\n                    ) : null}\n                </div>\n            </Modal>\n        );\n    }\n\n    private canUpload() {\n        if (this.state.errors) {\n            return false;\n        }\n\n        if (this.state.uploadStatus !== Status.waiting) {\n            return false;\n        }\n\n        if (!this.state.file) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private renderFileIcon() {\n        switch (this.state.uploadStatus) {\n            case Status.uploading:\n                return <SpinnerIcon className='fa-spin'></SpinnerIcon>;\n            default:\n                return <FolderOpenIcon></FolderOpenIcon>;\n        }\n    }\n\n    private handleFileUpload(files) {\n        // Selects the artifact that will be uploaded and performs some basic\n        // preliminary checks on it.\n        const newCollection = files[0];\n        const { collection } = this.props;\n\n        if (files.length > 1) {\n            this.setState({\n                errors: 'Please select no more than one file.',\n            });\n        } else if (!this.acceptedFileTypes.includes(newCollection.type)) {\n            this.setState({\n                errors: 'Invalid file format.',\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        } else if (\n            collection &&\n            collection.name !== newCollection.name.split('-')[1]\n        ) {\n            this.setState({\n                errors: `The file you have selected doesn't appear to match ${collection.name}`,\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        } else {\n            this.setState({\n                errors: '',\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        }\n    }\n\n    saveFile() {\n        this.setState({ uploadStatus: Status.uploading });\n        const artifact = {\n            file: this.state.file,\n            sha256: '',\n        } as CollectionUploadType;\n\n        this.cancelToken = CollectionAPI.getCancelToken();\n\n        CollectionAPI.upload(\n            artifact,\n            e => {\n                this.setState({\n                    uploadProgress: e.loaded / e.total,\n                });\n            },\n            this.cancelToken,\n        )\n            .then(response => {\n                this.props.onUploadSuccess(response);\n            })\n            .catch(errors => {\n                let errorMessage = '';\n\n                // If request was canceled by the user\n                if (!axios.isCancel(errors)) {\n                    // Upload fails\n                    for (let err of errors.response.data.errors) {\n                        errorMessage = errorMessage + err.detail + ' ';\n                    }\n                }\n\n                this.setState({\n                    uploadStatus: Status.waiting,\n                    errors: errorMessage,\n                });\n            })\n            .finally(_ => {\n                this.cancelToken = null;\n            });\n    }\n\n    handleClose() {\n        let msg = null;\n        if (this.cancelToken && this.state.uploadStatus === Status.uploading) {\n            msg = 'Collection upload canceled';\n            this.cancelToken.cancel(msg);\n        }\n\n        this.setState(\n            {\n                file: undefined,\n                errors: '',\n                uploadProgress: 0,\n                uploadStatus: Status.waiting,\n            },\n            () => this.props.setOpen(false, msg),\n        );\n    }\n}\n","import * as React from 'react';\n\nimport {\n    withRouter,\n    RouteComponentProps,\n    Redirect,\n    Link,\n} from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    Button,\n    DropdownItem,\n    Alert,\n    AlertActionCloseButton,\n} from '@patternfly/react-core';\n\nimport * as ReactMarkdown from 'react-markdown';\n\nimport {\n    CollectionListType,\n    CollectionAPI,\n    NamespaceAPI,\n    NamespaceType,\n} from '../../api';\n\nimport {\n    CollectionList,\n    PartnerHeader,\n    StatefulDropdown,\n    LoadingPageWithHeader,\n} from '../../components';\n\nimport { ImportModal } from './import-modal/import-modal';\n\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { Paths, formatPath } from '../../paths';\n\ninterface IState {\n    collections: CollectionListType[];\n    namespace: NamespaceType;\n    params: {\n        sort?: string;\n        page?: number;\n        page_size?: number;\n        tab?: string;\n        keywords?: string;\n        namespace?: string;\n    };\n    redirect: string;\n    itemCount: number;\n    showImportModal: boolean;\n    warning: string;\n    updateCollection: CollectionListType;\n}\n\ninterface IProps extends RouteComponentProps {\n    showControls: boolean;\n    breadcrumbs: { name: string; url?: string }[];\n}\n\nexport class NamespaceDetail extends React.Component<IProps, IState> {\n    nonAPIParams = ['tab'];\n\n    // namespace is a positional url argument, so don't include it in the\n    // query params\n    nonQueryStringParams = ['namespace'];\n\n    constructor(props) {\n        super(props);\n        const params = ParamHelper.parseParamString(props.location.search, [\n            'page',\n            'page_size',\n        ]);\n\n        if (!params['tab']) {\n            params['tab'] = 'collections';\n        }\n\n        params['namespace'] = props.match.params['namespace'];\n\n        this.state = {\n            collections: [],\n            namespace: null,\n            params: params,\n            redirect: null,\n            itemCount: 0,\n            showImportModal: false,\n            warning: '',\n            updateCollection: null,\n        };\n    }\n\n    componentDidMount() {\n        this.loadAll();\n    }\n\n    render() {\n        const {\n            collections,\n            namespace,\n            params,\n            redirect,\n            itemCount,\n            showImportModal,\n            warning,\n            updateCollection,\n        } = this.state;\n\n        const { breadcrumbs } = this.props;\n\n        if (redirect) {\n            return <Redirect to={redirect} />;\n        }\n\n        if (!namespace) {\n            return <LoadingPageWithHeader></LoadingPageWithHeader>;\n        }\n        return (\n            <React.Fragment>\n                <ImportModal\n                    isOpen={showImportModal}\n                    onUploadSuccess={result =>\n                        this.props.history.push(\n                            formatPath(\n                                Paths.myImports,\n                                {},\n                                {\n                                    namespace: namespace.name,\n                                },\n                            ),\n                        )\n                    }\n                    // onCancel\n                    setOpen={(isOpen, warn) =>\n                        this.toggleImportModal(isOpen, warn)\n                    }\n                    collection={updateCollection}\n                />\n                {warning ? (\n                    <Alert\n                        style={{\n                            position: 'fixed',\n                            right: '5px',\n                            top: '80px',\n                            zIndex: 300,\n                        }}\n                        variant='warning'\n                        title={warning}\n                        action={\n                            <AlertActionCloseButton\n                                onClose={() => this.setState({ warning: '' })}\n                            />\n                        }\n                    ></Alert>\n                ) : null}\n                <PartnerHeader\n                    namespace={namespace}\n                    breadcrumbs={breadcrumbs.concat([{ name: namespace.name }])}\n                    tabs={['Collections', 'Resources']}\n                    params={params}\n                    updateParams={p => this.updateParams(p)}\n                    pageControls={this.renderPageControls()}\n                ></PartnerHeader>\n                <Main>\n                    <Section className='body'>\n                        {params.tab.toLowerCase() === 'collections' ? (\n                            <CollectionList\n                                updateParams={params =>\n                                    this.updateParams(params, () =>\n                                        this.loadCollections(),\n                                    )\n                                }\n                                params={params}\n                                collections={collections}\n                                itemCount={itemCount}\n                                showControls={this.props.showControls}\n                                handleControlClick={(id, action) =>\n                                    this.handleCollectionAction(id, action)\n                                }\n                            />\n                        ) : (\n                            this.renderResources(namespace)\n                        )}\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private handleCollectionAction(id, action) {\n        if (action === 'upload') {\n            const collection = this.state.collections.find(x => x.id === id);\n\n            this.setState({\n                updateCollection: collection,\n                showImportModal: true,\n            });\n        }\n    }\n\n    private renderResources(namespace: NamespaceType) {\n        return (\n            <div className='pf-c-content preview'>\n                <ReactMarkdown source={namespace.resources} />\n            </div>\n        );\n    }\n\n    private loadCollections() {\n        CollectionAPI.list(\n            ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n        ).then(result => {\n            this.setState({\n                collections: result.data.data,\n                itemCount: result.data.meta.count,\n            });\n        });\n    }\n\n    private loadAll() {\n        Promise.all([\n            CollectionAPI.list(\n                ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n            ),\n            NamespaceAPI.get(this.props.match.params['namespace']),\n        ])\n            .then(val => {\n                this.setState({\n                    collections: val[0].data.data,\n                    itemCount: val[0].data.meta.count,\n                    namespace: val[1].data,\n                });\n            })\n            .catch(response => {\n                this.setState({ redirect: Paths.notFound });\n            });\n    }\n\n    private get updateParams() {\n        return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n    }\n\n    private renderPageControls() {\n        if (!this.props.showControls) {\n            return null;\n        }\n        return (\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Button\n                    onClick={() => this.setState({ showImportModal: true })}\n                >\n                    Upload Collection\n                </Button>\n                <StatefulDropdown\n                    items={[\n                        <DropdownItem key='1'>\n                            <Link\n                                to={formatPath(Paths.editNamespace, {\n                                    namespace: this.state.namespace.name,\n                                })}\n                            >\n                                Edit Namespace\n                            </Link>\n                        </DropdownItem>,\n                        <DropdownItem key='2'>\n                            <Link\n                                to={formatPath(\n                                    Paths.myImports,\n                                    {},\n                                    { namespace: this.state.namespace.name },\n                                )}\n                            >\n                                Imports\n                            </Link>\n                        </DropdownItem>,\n                        <DropdownItem key='3'>\n                            <Link to={Paths.token} target='_blank'>\n                                Get API Token\n                            </Link>\n                        </DropdownItem>,\n                    ]}\n                />\n            </div>\n        );\n    }\n\n    private toggleImportModal(isOpen: boolean, warning?: string) {\n        const newState = { showImportModal: isOpen };\n        if (warning) {\n            newState['warning'] = warning;\n        }\n\n        if (!isOpen) {\n            newState['updateCollection'] = null;\n        }\n\n        this.setState(newState);\n    }\n}\n","\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./import-modal.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./import-modal.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./import-modal.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport {\n    Main,\n    Section,\n    Spinner,\n} from '@redhat-cloud-services/frontend-components';\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\n\nimport { PartnerHeader, NamespaceForm, ResourcesForm } from '../../components';\nimport { NamespaceAPI, NamespaceType } from '../../api';\n\ninterface IProps extends RouteComponentProps {}\n\nimport {\n    Form,\n    ActionGroup,\n    Button,\n    Breadcrumb,\n    BreadcrumbItem,\n    Tab,\n    Tabs,\n} from '@patternfly/react-core';\n\nimport { Paths, formatPath } from '../../paths';\nimport { ParamHelper } from '../../utilities/param-helper';\n\ninterface IState {\n    namespace: NamespaceType;\n    newLinkName: string;\n    newLinkURL: string;\n    errorMessages: any;\n    saving: boolean;\n    redirect: string;\n    unsavedData: boolean;\n    params: {\n        tab?: string;\n    };\n}\n\nenum TabKeys {\n    details = 1,\n    resources = 2,\n}\n\nclass EditNamespace extends React.Component<IProps, IState> {\n    queryParams: URLSearchParams;\n\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search);\n\n        if (!params['tab']) {\n            params['tab'] = 'edit details';\n        }\n\n        this.state = {\n            namespace: null,\n            newLinkURL: '',\n            newLinkName: '',\n            errorMessages: {},\n            saving: false,\n            redirect: null,\n            unsavedData: false,\n            params: params,\n        };\n    }\n\n    componentDidMount() {\n        this.loadNamespace();\n    }\n\n    render() {\n        const {\n            namespace,\n            errorMessages,\n            saving,\n            redirect,\n            params,\n        } = this.state;\n\n        if (redirect) {\n            return <Redirect to={redirect} />;\n        }\n\n        if (!namespace) {\n            return null;\n        }\n        return (\n            <React.Fragment>\n                <PartnerHeader\n                    namespace={namespace}\n                    breadcrumbs={[\n                        { name: 'My Namespaces', url: Paths.myNamespaces },\n                        {\n                            name: namespace.name,\n                            url: formatPath(Paths.myCollections, {\n                                namespace: namespace.name,\n                            }),\n                        },\n                        { name: 'Edit' },\n                    ]}\n                    tabs={['Edit Details', 'Edit Resources']}\n                    params={params}\n                    updateParams={p => this.updateParams(p)}\n                ></PartnerHeader>\n                <Main>\n                    <Section className='body'>\n                        {params.tab.toLowerCase() === 'edit details' ? (\n                            <NamespaceForm\n                                namespace={namespace}\n                                errorMessages={errorMessages}\n                                updateNamespace={namespace =>\n                                    this.setState({\n                                        namespace: namespace,\n                                        unsavedData: true,\n                                    })\n                                }\n                            />\n                        ) : (\n                            <ResourcesForm\n                                updateNamespace={namespace =>\n                                    this.setState({\n                                        namespace: namespace,\n                                        unsavedData: true,\n                                    })\n                                }\n                                namespace={namespace}\n                            />\n                        )}\n                        <Form>\n                            <ActionGroup>\n                                <Button\n                                    variant='primary'\n                                    onClick={() => this.saveNamespace()}\n                                >\n                                    Save\n                                </Button>\n                                <Button\n                                    variant='secondary'\n                                    onClick={() => this.cancel()}\n                                >\n                                    Cancel\n                                </Button>\n\n                                {this.state.saving ? <Spinner></Spinner> : null}\n                            </ActionGroup>\n                            {this.state.unsavedData ? (\n                                <div style={{ color: 'red' }}>\n                                    You have unsaved changes\n                                </div>\n                            ) : null}\n                        </Form>\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n\n    private loadNamespace() {\n        NamespaceAPI.get(this.props.match.params['namespace'])\n            .then(response => {\n                this.setState({ namespace: response.data });\n            })\n            .catch(response => {\n                this.setState({ redirect: Paths.notFound });\n            });\n    }\n\n    private saveNamespace() {\n        this.setState({ saving: true }, () => {\n            NamespaceAPI.update(this.state.namespace.name, this.state.namespace)\n                .then(result => {\n                    this.setState({\n                        namespace: result.data,\n                        errorMessages: {},\n                        saving: false,\n                        unsavedData: false,\n                        redirect: formatPath(Paths.myCollections, {\n                            namespace: this.state.namespace.name,\n                        }),\n                    });\n                })\n                .catch(result => {\n                    this.setState({\n                        errorMessages: result.data,\n                        saving: false,\n                    });\n                });\n        });\n    }\n\n    private cancel() {\n        this.setState({\n            redirect: formatPath(Paths.myCollections, {\n                namespace: this.state.namespace.name,\n            }),\n        });\n    }\n\n    private validateNamesace(namespace) {\n        // TODO: add data validation once error format and validation checks\n        // are known\n    }\n}\n\nexport default withRouter(EditNamespace);\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceDetail } from './namespace-detail';\nimport { Paths } from '../../paths';\n\nclass ManageNamespace extends React.Component<RouteComponentProps> {\n    render() {\n        return (\n            <NamespaceDetail\n                {...this.props}\n                showControls={true}\n                breadcrumbs={[\n                    { url: Paths.myNamespaces, name: 'My Namespaces' },\n                ]}\n            ></NamespaceDetail>\n        );\n    }\n}\n\nexport default withRouter(ManageNamespace);\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceDetail } from './namespace-detail';\nimport { Paths } from '../../paths';\n\nclass PartnerDetail extends React.Component<RouteComponentProps> {\n    render() {\n        return (\n            <NamespaceDetail\n                {...this.props}\n                showControls={false}\n                breadcrumbs={[{ url: Paths.partners, name: 'Partners' }]}\n            ></NamespaceDetail>\n        );\n    }\n}\n\nexport default withRouter(PartnerDetail);\n"],"sourceRoot":""}
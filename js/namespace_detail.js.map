{"version":3,"sources":["webpack:///./src/containers/namespace-detail/import-modal/import-modal.scss","webpack:///./src/containers/namespace-detail/import-modal/import-modal.tsx","webpack:///./src/containers/namespace-detail/namespace-detail.tsx","webpack:///./src/containers/namespace-detail/import-modal/import-modal.scss?0eb5","webpack:///./src/containers/edit-namespace/namespace-form.tsx","webpack:///./src/containers/namespace-detail/manage-namespace.tsx","webpack:///./src/containers/namespace-detail/partner-detail.tsx"],"names":["module","exports","push","i","Status","props","acceptedFileTypes","COLLECTION_NAME_REGEX","state","file","undefined","errors","uploadProgress","uploadStatus","waiting","render","isOpen","collection","Modal","isSmall","title","name","onClose","handleClose","actions","Button","key","variant","onClick","saveFile","isDisabled","this","canUpload","isFooterLeftAligned","className","disabled","type","id","onChange","e","handleFileUpload","target","files","htmlFor","renderFileIcon","style","width","uploading","newCollection","length","setState","includes","test","split","namespace","artifact","sha256","cancelToken","getCancelToken","upload","loaded","total","then","response","onUploadSuccess","catch","errorMessage","a","isCancel","data","messages","err","detail","code","status","join","finally","_","msg","cancel","setOpen","nonAPIParams","persistentParams","certification","certified","nonQueryStringParams","params","parseParamString","location","search","match","collections","redirect","itemCount","showImportModal","warning","updateCollection","componentDidMount","loadAll","breadcrumbs","Redirect","to","tabs","resources","result","history","myImports","warn","toggleImportModal","Alert","position","right","top","zIndex","action","AlertActionCloseButton","concat","updateParams","p","pageControls","renderPageControls","tab","toLowerCase","loadCollections","showControls","handleControlClick","handleCollectionAction","renderResources","find","x","setDeprecation","deprecated","error","source","list","getReduced","meta","count","Promise","all","get","val","notFound","updateParamsMixin","display","alignItems","marginLeft","items","DropdownItem","component","Link","editNamespace","newState","content","options","transform","update","locals","hot","accept","newContent","b","idx","Error","dispose","newLinkURL","newLinkName","errorMessages","saving","unsavedData","loadNamespace","url","myNamespaces","myCollections","updateNamespace","saveNamespace","color","removeGroupsPrefix","groups","unprefixedGroupOwners","owner","parameter","EditNamespace","ManageNamespace","partners","PartnerDetail"],"mappings":"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","file":"js/namespace_detail.js","sourcesContent":["exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/* logo blue */\\n/* well background color */\\n/* alert info background color */\\n/* alert info border color */\\n.upload-collection .file-error-messages {\\n  color: #cc0000; }\\n\\n.upload-collection .upload-file {\\n  width: 0.1px;\\n  height: 0.1px;\\n  opacity: 0;\\n  overflow: hidden;\\n  position: absolute;\\n  z-index: -1; }\\n\\n.upload-collection .upload-file-label {\\n  display: inline-block;\\n  cursor: pointer;\\n  width: 100%;\\n  font-weight: normal; }\\n  .upload-collection .upload-file-label .upload-box {\\n    display: flex;\\n    border-style: solid;\\n    border-width: thin;\\n    width: 100%;\\n    border-radius: 3px; }\\n    .upload-collection .upload-file-label .upload-box .upload-button,\\n    .upload-collection .upload-file-label .upload-box .upload-text {\\n      padding: 5px; }\\n    .upload-collection .upload-file-label .upload-box .upload-button {\\n      border-right: thin solid;\\n      padding-left: 10px;\\n      padding-right: 10px; }\\n    .upload-collection .upload-file-label .upload-box .upload-button:hover {\\n      color: white;\\n      background-color: #808080; }\\n    .upload-collection .upload-file-label .upload-box .upload-text {\\n      position: relative;\\n      width: 100%; }\\n    .upload-collection .upload-file-label .upload-box .loading-bar {\\n      position: absolute;\\n      height: 3px;\\n      background-color: #5bb75b;\\n      bottom: 0px;\\n      left: 0px; }\\n\", \"\"]);\n\n","import * as React from 'react';\nimport './import-modal.scss';\nimport axios from 'axios';\n\nimport { Modal, Button } from '@patternfly/react-core';\nimport { FolderOpenIcon, SpinnerIcon } from '@patternfly/react-icons';\n\nimport {\n    CollectionListType,\n    CollectionAPI,\n    CollectionUploadType,\n} from '../../../api';\n\nenum Status {\n    uploading = 'uploading',\n    waiting = 'waiting',\n}\n\ninterface IProps {\n    isOpen: boolean;\n    setOpen: (isOpen, warnings?) => void;\n    onUploadSuccess: (result) => void;\n\n    collection?: CollectionListType;\n    namespace: string;\n}\n\ninterface IState {\n    file?: File;\n    errors?: string;\n    uploadProgress: number;\n    uploadStatus: Status;\n}\n\nexport class ImportModal extends React.Component<IProps, IState> {\n    acceptedFileTypes = ['application/x-gzip', 'application/gzip'];\n    cancelToken: any;\n    COLLECTION_NAME_REGEX = /[0-9a-z_]+\\-[0-9a-z_]+\\-[0-9A-Za-z.+-]+/;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            file: undefined,\n            errors: '',\n            uploadProgress: 0,\n            uploadStatus: Status.waiting,\n        };\n    }\n    render() {\n        const { isOpen, collection } = this.props;\n\n        const { file, errors, uploadProgress, uploadStatus } = this.state;\n        return (\n            <Modal\n                isSmall\n                title={\n                    collection\n                        ? 'New version of ' + collection.name\n                        : 'New collection'\n                }\n                isOpen={isOpen}\n                onClose={() => this.handleClose()}\n                actions={[\n                    <Button\n                        key='confirm'\n                        variant='primary'\n                        onClick={() => this.saveFile()}\n                        isDisabled={!this.canUpload()}\n                    >\n                        Upload\n                    </Button>,\n                    <Button\n                        key='cancel'\n                        variant='secondary'\n                        onClick={() => this.handleClose()}\n                    >\n                        Cancel\n                    </Button>,\n                ]}\n                isFooterLeftAligned\n            >\n                <div className='upload-collection'>\n                    <form>\n                        <input\n                            disabled={uploadStatus !== Status.waiting}\n                            className='upload-file'\n                            type='file'\n                            id='collection-widget'\n                            onChange={e =>\n                                this.handleFileUpload(e.target.files)\n                            }\n                        />\n                        <label\n                            className='upload-file-label'\n                            htmlFor='collection-widget'\n                        >\n                            <div className='upload-box'>\n                                <div className='upload-button'>\n                                    {this.renderFileIcon()}\n                                </div>\n                                <div className='upload-text'>\n                                    {file != null ? file.name : 'Select file'}\n                                    <div\n                                        className='loading-bar'\n                                        style={{\n                                            width: uploadProgress * 100 + '%',\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </label>\n                    </form>\n                    {errors ? (\n                        <span className='file-error-messages'>\n                            <i className='pficon-error-circle-o' /> {errors}\n                        </span>\n                    ) : null}\n                </div>\n            </Modal>\n        );\n    }\n\n    private canUpload() {\n        if (this.state.errors) {\n            return false;\n        }\n\n        if (this.state.uploadStatus !== Status.waiting) {\n            return false;\n        }\n\n        if (!this.state.file) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private renderFileIcon() {\n        switch (this.state.uploadStatus) {\n            case Status.uploading:\n                return <SpinnerIcon className='fa-spin'></SpinnerIcon>;\n            default:\n                return <FolderOpenIcon></FolderOpenIcon>;\n        }\n    }\n\n    private handleFileUpload(files) {\n        // Selects the artifact that will be uploaded and performs some basic\n        // preliminary checks on it.\n        const newCollection = files[0];\n        const { collection } = this.props;\n\n        if (files.length > 1) {\n            this.setState({\n                errors: 'Please select no more than one file.',\n            });\n        } else if (!this.acceptedFileTypes.includes(newCollection.type)) {\n            this.setState({\n                errors: 'Invalid file format.',\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        } else if (!this.COLLECTION_NAME_REGEX.test(newCollection.name)) {\n            this.setState({\n                errors: `Invalid file name. Collections must be formatted as 'namespace-collection_name-1.0.0'`,\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        } else if (\n            collection &&\n            collection.name !== newCollection.name.split('-')[1]\n        ) {\n            this.setState({\n                errors: `The collection you have selected doesn't appear to match ${collection.name}`,\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        } else if (this.props.namespace != newCollection.name.split('-')[0]) {\n            this.setState({\n                errors: `The collection you have selected does not match this namespace.`,\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        } else {\n            this.setState({\n                errors: '',\n                file: newCollection,\n                uploadProgress: 0,\n            });\n        }\n    }\n\n    saveFile() {\n        this.setState({ uploadStatus: Status.uploading });\n        const artifact = {\n            file: this.state.file,\n            sha256: '',\n        } as CollectionUploadType;\n\n        this.cancelToken = CollectionAPI.getCancelToken();\n\n        CollectionAPI.upload(\n            artifact,\n            e => {\n                this.setState({\n                    uploadProgress: e.loaded / e.total,\n                });\n            },\n            this.cancelToken,\n        )\n            .then(response => {\n                this.props.onUploadSuccess(response);\n            })\n            .catch(errors => {\n                let errorMessage = '';\n\n                // If request was canceled by the user\n                if (!axios.isCancel(errors)) {\n                    // Upload fails\n                    if (errors.response.data.errors) {\n                        const messages = [];\n                        for (let err of errors.response.data.errors) {\n                            messages.push(\n                                err.detail ||\n                                    err.title ||\n                                    err.code ||\n                                    'API error. Status code: ' + err.status,\n                            );\n                        }\n                        errorMessage = messages.join(', ');\n                    } else {\n                        errorMessage =\n                            'API error. Status code: ' + errors.response.status;\n                    }\n                }\n\n                this.setState({\n                    uploadStatus: Status.waiting,\n                    errors: errorMessage,\n                });\n            })\n            .finally(_ => {\n                this.cancelToken = null;\n            });\n    }\n\n    handleClose() {\n        let msg = null;\n        if (this.cancelToken && this.state.uploadStatus === Status.uploading) {\n            msg = 'Collection upload canceled';\n            this.cancelToken.cancel(msg);\n        }\n\n        this.setState(\n            {\n                file: undefined,\n                errors: '',\n                uploadProgress: 0,\n                uploadStatus: Status.waiting,\n            },\n            () => this.props.setOpen(false, msg),\n        );\n    }\n}\n","import * as React from 'react';\n\nimport {\n    withRouter,\n    RouteComponentProps,\n    Redirect,\n    Link,\n} from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    Button,\n    DropdownItem,\n    Alert,\n    AlertActionCloseButton,\n} from '@patternfly/react-core';\n\nimport * as ReactMarkdown from 'react-markdown';\n\nimport {\n    CollectionListType,\n    CollectionAPI,\n    NamespaceAPI,\n    NamespaceType,\n    CertificationStatus,\n} from '../../api';\n\nimport {\n    CollectionList,\n    PartnerHeader,\n    StatefulDropdown,\n    LoadingPageWithHeader,\n    APIButton,\n} from '../../components';\n\nimport { ImportModal } from './import-modal/import-modal';\n\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { Paths, formatPath } from '../../paths';\n\ninterface IState {\n    collections: CollectionListType[];\n    namespace: NamespaceType;\n    params: {\n        sort?: string;\n        page?: number;\n        page_size?: number;\n        tab?: string;\n        keywords?: string;\n        namespace?: string;\n    };\n    redirect: string;\n    itemCount: number;\n    showImportModal: boolean;\n    warning: string;\n    updateCollection: CollectionListType;\n}\n\ninterface IProps extends RouteComponentProps {\n    showControls: boolean;\n    breadcrumbs: { name: string; url?: string }[];\n}\n\nexport class NamespaceDetail extends React.Component<IProps, IState> {\n    nonAPIParams = ['tab'];\n    persistentParams = { certification: CertificationStatus.certified };\n\n    // namespace is a positional url argument, so don't include it in the\n    // query params\n    nonQueryStringParams = ['namespace'];\n\n    constructor(props) {\n        super(props);\n        const params = ParamHelper.parseParamString(props.location.search, [\n            'page',\n            'page_size',\n        ]);\n\n        if (!params['tab']) {\n            params['tab'] = 'collections';\n        }\n\n        params['namespace'] = props.match.params['namespace'];\n\n        this.state = {\n            collections: [],\n            namespace: null,\n            params: params,\n            redirect: null,\n            itemCount: 0,\n            showImportModal: false,\n            warning: '',\n            updateCollection: null,\n        };\n    }\n\n    componentDidMount() {\n        this.loadAll();\n    }\n\n    render() {\n        const {\n            collections,\n            namespace,\n            params,\n            redirect,\n            itemCount,\n            showImportModal,\n            warning,\n            updateCollection,\n        } = this.state;\n\n        const { breadcrumbs } = this.props;\n\n        if (redirect) {\n            return <Redirect to={redirect} />;\n        }\n\n        if (!namespace) {\n            return <LoadingPageWithHeader></LoadingPageWithHeader>;\n        }\n\n        const tabs = ['Collections'];\n\n        if (namespace.resources) {\n            tabs.push('Resources');\n        }\n\n        return (\n            <React.Fragment>\n                <ImportModal\n                    isOpen={showImportModal}\n                    onUploadSuccess={result =>\n                        this.props.history.push(\n                            formatPath(\n                                Paths.myImports,\n                                {},\n                                {\n                                    namespace: namespace.name,\n                                },\n                            ),\n                        )\n                    }\n                    // onCancel\n                    setOpen={(isOpen, warn) =>\n                        this.toggleImportModal(isOpen, warn)\n                    }\n                    collection={updateCollection}\n                    namespace={namespace.name}\n                />\n                {warning ? (\n                    <Alert\n                        style={{\n                            position: 'fixed',\n                            right: '5px',\n                            top: '80px',\n                            zIndex: 300,\n                        }}\n                        variant='warning'\n                        title={warning}\n                        action={\n                            <AlertActionCloseButton\n                                onClose={() => this.setState({ warning: '' })}\n                            />\n                        }\n                    ></Alert>\n                ) : null}\n                <PartnerHeader\n                    namespace={namespace}\n                    breadcrumbs={breadcrumbs.concat([{ name: namespace.name }])}\n                    tabs={tabs}\n                    params={params}\n                    updateParams={p => this.updateParams(p)}\n                    pageControls={this.renderPageControls()}\n                ></PartnerHeader>\n                <Main>\n                    <Section className='body'>\n                        {params.tab.toLowerCase() === 'collections' ? (\n                            <CollectionList\n                                updateParams={params =>\n                                    this.updateParams(params, () =>\n                                        this.loadCollections(),\n                                    )\n                                }\n                                params={params}\n                                collections={collections}\n                                itemCount={itemCount}\n                                showControls={this.props.showControls}\n                                handleControlClick={(id, action) =>\n                                    this.handleCollectionAction(id, action)\n                                }\n                            />\n                        ) : (\n                            this.renderResources(namespace)\n                        )}\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private handleCollectionAction(id, action) {\n        const collection = this.state.collections.find(x => x.id === id);\n\n        switch (action) {\n            case 'upload':\n                this.setState({\n                    updateCollection: collection,\n                    showImportModal: true,\n                });\n                break;\n            case 'deprecate':\n                CollectionAPI.setDeprecation(collection, !collection.deprecated)\n                    .then(() => this.loadCollections())\n                    .catch(error => {\n                        this.setState({\n                            warning: 'API Error: Failed to set deprecation.',\n                        });\n                    });\n                break;\n        }\n    }\n\n    private renderResources(namespace: NamespaceType) {\n        return (\n            <div className='pf-c-content preview'>\n                <ReactMarkdown source={namespace.resources} />\n            </div>\n        );\n    }\n\n    private loadCollections() {\n        CollectionAPI.list({\n            ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n            ...this.persistentParams,\n        }).then(result => {\n            this.setState({\n                collections: result.data.data,\n                itemCount: result.data.meta.count,\n            });\n        });\n    }\n\n    private loadAll() {\n        Promise.all([\n            CollectionAPI.list({\n                ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n                ...this.persistentParams,\n            }),\n            NamespaceAPI.get(this.props.match.params['namespace']),\n        ])\n            .then(val => {\n                this.setState({\n                    collections: val[0].data.data,\n                    itemCount: val[0].data.meta.count,\n                    namespace: val[1].data,\n                });\n            })\n            .catch(response => {\n                this.setState({ redirect: Paths.notFound });\n            });\n    }\n\n    private get updateParams() {\n        return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n    }\n\n    private renderPageControls() {\n        if (!this.props.showControls) {\n            return (\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <APIButton style={{ marginLeft: '8px' }} />\n                </div>\n            );\n        }\n        return (\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Button\n                    onClick={() => this.setState({ showImportModal: true })}\n                >\n                    Upload collection\n                </Button>\n                <APIButton style={{ marginLeft: '8px' }} />\n                <StatefulDropdown\n                    items={[\n                        <DropdownItem\n                            key='1'\n                            component={\n                                <Link\n                                    to={formatPath(Paths.editNamespace, {\n                                        namespace: this.state.namespace.name,\n                                    })}\n                                >\n                                    Edit namespace\n                                </Link>\n                            }\n                        />,\n                        <DropdownItem\n                            key='2'\n                            component={\n                                <Link\n                                    to={formatPath(\n                                        Paths.myImports,\n                                        {},\n                                        {\n                                            namespace: this.state.namespace\n                                                .name,\n                                        },\n                                    )}\n                                >\n                                    Imports\n                                </Link>\n                            }\n                        />,\n                    ]}\n                />\n            </div>\n        );\n    }\n\n    private toggleImportModal(isOpen: boolean, warning?: string) {\n        const newState = { showImportModal: isOpen };\n        if (warning) {\n            newState['warning'] = warning;\n        }\n\n        if (!isOpen) {\n            newState['updateCollection'] = null;\n        }\n\n        this.setState(newState);\n    }\n}\n","\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./import-modal.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./import-modal.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./import-modal.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport {\n    Main,\n    Section,\n    Spinner,\n} from '@redhat-cloud-services/frontend-components';\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\n\nimport { PartnerHeader, NamespaceForm, ResourcesForm } from '../../components';\nimport { NamespaceAPI, NamespaceType } from '../../api';\n\nimport { Form, ActionGroup, Button } from '@patternfly/react-core';\n\nimport { Paths, formatPath } from '../../paths';\nimport { ParamHelper } from '../../utilities/param-helper';\n\ninterface IState {\n    namespace: NamespaceType;\n    newLinkName: string;\n    newLinkURL: string;\n    errorMessages: any;\n    saving: boolean;\n    redirect: string;\n    unsavedData: boolean;\n    params: {\n        tab?: string;\n    };\n}\n\nclass EditNamespace extends React.Component<RouteComponentProps, IState> {\n    queryParams: URLSearchParams;\n\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search);\n\n        if (!params['tab']) {\n            params['tab'] = 'edit details';\n        }\n\n        this.state = {\n            namespace: null,\n            newLinkURL: '',\n            newLinkName: '',\n            errorMessages: {},\n            saving: false,\n            redirect: null,\n            unsavedData: false,\n            params: params,\n        };\n    }\n\n    componentDidMount() {\n        this.loadNamespace();\n    }\n\n    render() {\n        const {\n            namespace,\n            errorMessages,\n            saving,\n            redirect,\n            params,\n        } = this.state;\n\n        if (redirect) {\n            return <Redirect to={redirect} />;\n        }\n\n        if (!namespace) {\n            return null;\n        }\n        return (\n            <React.Fragment>\n                <PartnerHeader\n                    namespace={namespace}\n                    breadcrumbs={[\n                        { name: 'My namespaces', url: Paths.myNamespaces },\n                        {\n                            name: namespace.name,\n                            url: formatPath(Paths.myCollections, {\n                                namespace: namespace.name,\n                            }),\n                        },\n                        { name: 'Edit' },\n                    ]}\n                    tabs={['Edit details', 'Edit resources']}\n                    params={params}\n                    updateParams={p => this.updateParams(p)}\n                ></PartnerHeader>\n                <Main>\n                    <Section className='body'>\n                        {params.tab.toLowerCase() === 'edit details' ? (\n                            <NamespaceForm\n                                namespace={namespace}\n                                errorMessages={errorMessages}\n                                updateNamespace={namespace =>\n                                    this.setState({\n                                        namespace: namespace,\n                                        unsavedData: true,\n                                    })\n                                }\n                            />\n                        ) : (\n                            <ResourcesForm\n                                updateNamespace={namespace =>\n                                    this.setState({\n                                        namespace: namespace,\n                                        unsavedData: true,\n                                    })\n                                }\n                                namespace={namespace}\n                            />\n                        )}\n                        <Form>\n                            <ActionGroup>\n                                <Button\n                                    variant='primary'\n                                    onClick={() => this.saveNamespace()}\n                                >\n                                    Save\n                                </Button>\n                                <Button\n                                    variant='secondary'\n                                    onClick={() => this.cancel()}\n                                >\n                                    Cancel\n                                </Button>\n\n                                {saving ? <Spinner></Spinner> : null}\n                            </ActionGroup>\n                            {this.state.unsavedData ? (\n                                <div style={{ color: 'red' }}>\n                                    You have unsaved changes\n                                </div>\n                            ) : null}\n                        </Form>\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n\n    private removeGroupsPrefix(groups) {\n        const partnerEngineerOwner = 'system:partner-engineers';\n        let unprefixedGroupOwners = [partnerEngineerOwner];\n        for (const owner of groups) {\n            if (owner == partnerEngineerOwner) {\n                continue;\n            }\n            // 'rh-identity-account', '<id>'\n            else unprefixedGroupOwners.push(owner.split(':')[1]);\n        }\n        return unprefixedGroupOwners;\n    }\n\n    private loadNamespace() {\n        NamespaceAPI.get(this.props.match.params['namespace'])\n            .then(response => {\n                response.data.groups = this.removeGroupsPrefix(\n                    response.data.groups,\n                );\n                this.setState({ namespace: response.data });\n            })\n            .catch(response => {\n                this.setState({ redirect: Paths.notFound });\n            });\n    }\n\n    private saveNamespace() {\n        this.setState({ saving: true }, () => {\n            NamespaceAPI.update(this.state.namespace.name, this.state.namespace)\n                .then(result => {\n                    this.setState({\n                        namespace: result.data,\n                        errorMessages: {},\n                        saving: false,\n                        unsavedData: false,\n                        redirect: formatPath(Paths.myCollections, {\n                            namespace: this.state.namespace.name,\n                        }),\n                    });\n                })\n                .catch(error => {\n                    const result = error.response;\n                    if (result.status === 400) {\n                        const messages: any = {};\n                        for (const e of result.data.errors) {\n                            messages[e.source.parameter] = e.detail;\n                        }\n\n                        this.setState({\n                            errorMessages: messages,\n                            saving: false,\n                        });\n                    }\n                });\n        });\n    }\n\n    private cancel() {\n        this.setState({\n            redirect: formatPath(Paths.myCollections, {\n                namespace: this.state.namespace.name,\n            }),\n        });\n    }\n}\n\nexport default withRouter(EditNamespace);\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceDetail } from './namespace-detail';\nimport { Paths } from '../../paths';\n\nclass ManageNamespace extends React.Component<RouteComponentProps> {\n    render() {\n        return (\n            <NamespaceDetail\n                {...this.props}\n                showControls={true}\n                breadcrumbs={[\n                    { url: Paths.myNamespaces, name: 'My namespaces' },\n                ]}\n            ></NamespaceDetail>\n        );\n    }\n}\n\nexport default withRouter(ManageNamespace);\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceDetail } from './namespace-detail';\nimport { Paths } from '../../paths';\n\nclass PartnerDetail extends React.Component<RouteComponentProps> {\n    render() {\n        return (\n            <NamespaceDetail\n                {...this.props}\n                showControls={false}\n                breadcrumbs={[{ url: Paths.partners, name: 'Partners' }]}\n            ></NamespaceDetail>\n        );\n    }\n}\n\nexport default withRouter(PartnerDetail);\n"],"sourceRoot":""}
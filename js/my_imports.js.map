{"version":3,"sources":["webpack:///./src/containers/my-imports/my-imports.scss","webpack:///./src/containers/my-imports/my-imports.scss?428f","webpack:///./src/containers/my-imports/my-imports.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","params","parseParamString","location","search","topOfPage","state","selectedImport","importList","namespaces","selectedImportDetails","resultsCount","importDetailError","followLogs","loadingImports","loadingImportDetails","componentDidMount","this","loadNamespaces","loadImportList","loadTaskDetails","polling","setInterval","running","waiting","poll","componentWillUnmount","clearInterval","render","ref","title","className","loading","numberOfResults","selectImport","sImport","updateParams","setState","task","followMessages","setFollowMessages","isFollowing","apiError","updateParamsMixin","current","scrollIntoView","behavior","importIndex","findIndex","x","id","imports","newSelectedImport","finished_at","callback","list","page_size","then","result","selectedNS","data","namespace","find","name","catch","console","log","sort","meta","count","get","MyImports"],"mappings":"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","file":"js/my_imports.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/* logo blue */\\n/* well background color */\\n/* alert info background color */\\n/* alert info border color */\\n.page-container {\\n  display: flex; }\\n  .page-container .import-list {\\n    width: 400px; }\\n  .page-container .import-console {\\n    flex-grow: 1;\\n    margin-left: 10px; }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./my-imports.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./my-imports.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./my-imports.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\nimport './my-imports.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { cloneDeep } from 'lodash';\n\nimport { BaseHeader, ImportConsole, ImportList, Main } from '../../components';\n\nimport {\n    ImportAPI,\n    ImportDetailType,\n    ImportListType,\n    NamespaceType,\n    PulpStatus,\n    MyNamespaceAPI,\n} from '../../api';\n\nimport { ParamHelper } from '../../utilities/param-helper';\n\ninterface IState {\n    selectedImport: ImportListType;\n    importList: ImportListType[];\n    selectedImportDetails: ImportDetailType;\n    params: {\n        page_size?: number;\n        page?: number;\n        keyword?: string;\n        namespace?: string;\n    };\n    namespaces: NamespaceType[];\n    resultsCount: number;\n    importDetailError: string;\n    followLogs: boolean;\n    loadingImports: boolean;\n    loadingImportDetails: boolean;\n}\n\nclass MyImports extends React.Component<RouteComponentProps, IState> {\n    polling: any;\n    topOfPage: any;\n\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search, [\n            'page',\n            'page_size',\n        ]);\n\n        this.topOfPage = React.createRef();\n\n        this.state = {\n            selectedImport: undefined,\n            importList: [],\n            params: params,\n            namespaces: [],\n            selectedImportDetails: undefined,\n            resultsCount: 0,\n            importDetailError: '',\n            followLogs: false,\n            loadingImports: true,\n            loadingImportDetails: true,\n        };\n    }\n\n    componentDidMount() {\n        // Load namespaces, use the namespaces to query the import list,\n        // use the import list to load the task details\n        this.loadNamespaces(() =>\n            this.loadImportList(() => this.loadTaskDetails()),\n        );\n\n        this.polling = setInterval(() => {\n            if (\n                this.state.selectedImportDetails &&\n                (this.state.selectedImportDetails.state ===\n                    PulpStatus.running ||\n                    this.state.selectedImportDetails.state ===\n                        PulpStatus.waiting)\n            ) {\n                this.poll();\n            }\n        }, 10000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.polling);\n    }\n\n    render() {\n        const {\n            selectedImport,\n            importList,\n            params,\n            namespaces,\n            selectedImportDetails,\n            resultsCount,\n            loadingImports,\n            loadingImportDetails,\n            importDetailError,\n            followLogs,\n        } = this.state;\n\n        if (!importList) {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <div ref={this.topOfPage}></div>\n                <BaseHeader title='My imports' />\n                <Main>\n                    <Section className='body'>\n                        <div className='page-container'>\n                            <div className='import-list'>\n                                <ImportList\n                                    importList={importList}\n                                    selectedImport={selectedImport}\n                                    loading={loadingImports}\n                                    numberOfResults={resultsCount}\n                                    params={params}\n                                    namespaces={namespaces}\n                                    selectImport={sImport =>\n                                        this.selectImport(sImport)\n                                    }\n                                    updateParams={params => {\n                                        this.updateParams(params, () =>\n                                            this.setState(\n                                                {\n                                                    loadingImports: true,\n                                                    loadingImportDetails: true,\n                                                },\n                                                () =>\n                                                    this.loadImportList(() =>\n                                                        this.loadTaskDetails(),\n                                                    ),\n                                            ),\n                                        );\n                                    }}\n                                />\n                            </div>\n\n                            <div className='import-console'>\n                                <ImportConsole\n                                    loading={loadingImportDetails}\n                                    task={selectedImportDetails}\n                                    followMessages={followLogs}\n                                    setFollowMessages={isFollowing => {\n                                        this.setState({\n                                            followLogs: isFollowing,\n                                        });\n                                    }}\n                                    selectedImport={selectedImport}\n                                    apiError={importDetailError}\n                                />\n                            </div>\n                        </div>\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n\n    private selectImport(sImport) {\n        this.setState(\n            { selectedImport: sImport, loadingImportDetails: true },\n            () => {\n                this.topOfPage.current.scrollIntoView({\n                    behavior: 'smooth',\n                });\n                this.loadTaskDetails();\n            },\n        );\n    }\n\n    private poll() {\n        this.loadTaskDetails(() => {\n            // Update the state of the selected import in the list if it's\n            // different from the one loaded from the API.\n            const {\n                selectedImport,\n                selectedImportDetails,\n                importList,\n            } = this.state;\n\n            if (!selectedImportDetails) {\n                return;\n            }\n\n            if (selectedImport.state !== selectedImportDetails.state) {\n                const importIndex = importList.findIndex(\n                    x => x.id === selectedImport.id,\n                );\n\n                const imports = cloneDeep(importList);\n                const newSelectedImport = cloneDeep(selectedImport);\n\n                newSelectedImport.state = selectedImportDetails.state;\n                newSelectedImport.finished_at =\n                    selectedImportDetails.finished_at;\n\n                imports[importIndex] = newSelectedImport;\n\n                this.setState({\n                    selectedImport: newSelectedImport,\n                    importList: imports,\n                });\n            }\n        });\n    }\n\n    private loadNamespaces(callback?: () => void) {\n        MyNamespaceAPI.list({ page_size: 1000 })\n            .then(result => {\n                const namespaces = result.data.data;\n                let selectedNS;\n\n                if (this.state.params.namespace) {\n                    selectedNS = namespaces.find(\n                        x => x.name === this.state.params.namespace,\n                    );\n                }\n\n                if (!selectedNS) {\n                    selectedNS = namespaces[0];\n                }\n\n                this.setState(\n                    {\n                        namespaces: namespaces,\n                        params: {\n                            ...this.state.params,\n                            namespace: selectedNS.name,\n                        },\n                    },\n                    callback,\n                );\n            })\n            .catch(result => console.log(result));\n    }\n\n    private loadImportList(callback?: () => void) {\n        ImportAPI.list({ ...this.state.params, sort: '-created' })\n            .then(importList => {\n                this.setState(\n                    {\n                        importList: importList.data.data,\n                        selectedImport: importList.data.data[0],\n                        resultsCount: importList.data.meta.count,\n                        loadingImports: false,\n                    },\n                    callback,\n                );\n            })\n            .catch(result => console.log(result));\n    }\n\n    private loadTaskDetails(callback?: () => void) {\n        if (!this.state.selectedImport) {\n            this.setState({\n                importDetailError: 'No data',\n                loadingImportDetails: false,\n            });\n        } else {\n            ImportAPI.get(this.state.selectedImport.id)\n                .then(result => {\n                    this.setState(\n                        {\n                            importDetailError: '',\n                            loadingImportDetails: false,\n                            selectedImportDetails: result.data,\n                        },\n                        callback,\n                    );\n                })\n                .catch(result => {\n                    this.setState({\n                        selectedImportDetails: undefined,\n                        importDetailError: 'Error fetching import from API',\n                        loadingImportDetails: false,\n                    });\n                });\n        }\n    }\n}\n\nexport default withRouter(MyImports);\n"],"sourceRoot":""}
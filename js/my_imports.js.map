{"version":3,"sources":["webpack:///./src/containers/my-imports/my-imports.scss","webpack:///./src/containers/my-imports/my-imports.scss?428f","webpack:///./src/containers/my-imports/my-imports.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","params","parseParamString","location","search","topOfPage","state","selectedImport","importList","namespaces","selectedImportDetails","resultsCount","noImportsExist","importDetailError","followLogs","componentDidMount","this","loadNamespaces","loadImportList","loadTaskDetails","polling","setInterval","running","waiting","poll","componentWillUnmount","clearInterval","render","ref","title","className","numberOfResults","selectImport","sImport","updateParams","task","followMessages","setFollowMessages","isFollowing","setState","apiError","updateParamsMixin","current","scrollIntoView","behavior","importIndex","findIndex","x","id","imports","newSelectedImport","finished_at","callback","list","offset","then","result","selectedNS","data","namespace","find","name","catch","console","log","meta","count","get","MyImports"],"mappings":"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","file":"js/my_imports.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/* logo blue */\\n/* well background color */\\n/* alert info background color */\\n/* alert info border color */\\n.page-container {\\n  display: flex; }\\n  .page-container .import-list {\\n    width: 400px; }\\n  .page-container .import-console {\\n    flex-grow: 1;\\n    margin-left: 10px; }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./my-imports.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./my-imports.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./my-imports.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\nimport './my-imports.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\nimport { Button } from '@patternfly/react-core';\nimport { cloneDeep } from 'lodash';\n\nimport { BaseHeader, ImportConsole, ImportList } from '../../components';\n\nimport {\n    ImportAPI,\n    ImportDetailType,\n    ImportListType,\n    NamespaceAPI,\n    NamespaceType,\n    PulpStatus,\n} from '../../api';\n\nimport { ParamHelper } from '../../utilities/param-helper';\n\ninterface IState {\n    selectedImport: ImportListType;\n    importList: ImportListType[];\n    selectedImportDetails: ImportDetailType;\n    params: {\n        page_size?: number;\n        page?: number;\n        keyword?: string;\n        namespace?: string;\n    };\n    namespaces: NamespaceType[];\n    resultsCount: number;\n    noImportsExist: boolean;\n    importDetailError: string;\n    followLogs: boolean;\n}\n\nclass MyImports extends React.Component<RouteComponentProps, IState> {\n    polling: any;\n    topOfPage: any;\n\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search, [\n            'page',\n            'page_size',\n        ]);\n\n        this.topOfPage = React.createRef();\n\n        this.state = {\n            selectedImport: undefined,\n            importList: [],\n            params: params,\n            namespaces: [],\n            selectedImportDetails: undefined,\n            resultsCount: 0,\n            noImportsExist: false,\n            importDetailError: '',\n            followLogs: false,\n        };\n    }\n\n    componentDidMount() {\n        // Load namespaces, use the namespaces to query the import list,\n        // use the import list to load the task details\n        this.loadNamespaces(() =>\n            this.loadImportList(() => this.loadTaskDetails()),\n        );\n\n        this.polling = setInterval(() => {\n            if (\n                this.state.selectedImportDetails &&\n                (this.state.selectedImportDetails.state ===\n                    PulpStatus.running ||\n                    this.state.selectedImportDetails.state ===\n                        PulpStatus.waiting)\n            ) {\n                this.poll();\n            }\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.polling);\n    }\n\n    render() {\n        const {\n            selectedImport,\n            importList,\n            params,\n            namespaces,\n            selectedImportDetails,\n            resultsCount,\n            noImportsExist,\n            importDetailError,\n            followLogs,\n        } = this.state;\n\n        if (!importList) {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <div ref={this.topOfPage}></div>\n                <BaseHeader title='My Imports' />\n                <Main>\n                    <Section className='body'>\n                        <div className='page-container'>\n                            <div className='import-list'>\n                                <ImportList\n                                    importList={importList}\n                                    selectedImport={selectedImport}\n                                    noImportsExist={noImportsExist}\n                                    numberOfResults={resultsCount}\n                                    params={params}\n                                    namespaces={namespaces}\n                                    selectImport={sImport =>\n                                        this.selectImport(sImport)\n                                    }\n                                    updateParams={params => {\n                                        this.updateParams(params, () =>\n                                            this.loadImportList(() =>\n                                                this.loadTaskDetails(),\n                                            ),\n                                        );\n                                    }}\n                                />\n                            </div>\n\n                            <div className='import-console'>\n                                <ImportConsole\n                                    task={selectedImportDetails}\n                                    followMessages={followLogs}\n                                    setFollowMessages={isFollowing => {\n                                        this.setState({\n                                            followLogs: isFollowing,\n                                        });\n                                    }}\n                                    selectedImport={selectedImport}\n                                    apiError={importDetailError}\n                                />\n                            </div>\n                        </div>\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n\n    private selectImport(sImport) {\n        this.setState({ selectedImport: sImport }, () => {\n            this.topOfPage.current.scrollIntoView({\n                behavior: 'smooth',\n            });\n            this.loadTaskDetails();\n        });\n    }\n\n    private poll() {\n        this.loadTaskDetails(() => {\n            // Update the state of the selected import in the list if it's\n            // different from the one loaded from the API.\n            const {\n                selectedImport,\n                selectedImportDetails,\n                importList,\n            } = this.state;\n\n            if (!selectedImportDetails) {\n                return;\n            }\n\n            if (selectedImport.state !== selectedImportDetails.state) {\n                const importIndex = importList.findIndex(\n                    x => x.id === selectedImport.id,\n                );\n\n                const imports = cloneDeep(importList);\n                const newSelectedImport = cloneDeep(selectedImport);\n\n                newSelectedImport.state = selectedImportDetails.state;\n                newSelectedImport.finished_at =\n                    selectedImportDetails.finished_at;\n\n                imports[importIndex] = newSelectedImport;\n\n                this.setState({\n                    selectedImport: newSelectedImport,\n                    importList: imports,\n                });\n            }\n        });\n    }\n\n    private loadNamespaces(callback?: () => void) {\n        // TODO: filter by namespaces by current user\n        // TODO: We don't currently have a good way to display namespaces for\n        // users that have a lot of namespaces (such as admins).\n        NamespaceAPI.list({ offset: 1000 })\n            .then(result => {\n                const namespaces = result.data.data;\n                let selectedNS;\n\n                if (this.state.params.namespace) {\n                    selectedNS = namespaces.find(\n                        x => x.name === this.state.params.namespace,\n                    );\n                }\n\n                if (!selectedNS) {\n                    selectedNS = namespaces[0];\n                }\n\n                this.setState(\n                    {\n                        namespaces: namespaces,\n                        params: {\n                            ...this.state.params,\n                            namespace: selectedNS.name,\n                        },\n                    },\n                    callback,\n                );\n            })\n            .catch(result => console.log(result));\n    }\n\n    private loadImportList(callback?: () => void) {\n        ImportAPI.list(this.state.params)\n            .then(importList => {\n                this.setState(\n                    {\n                        importList: importList.data.data,\n                        selectedImport: importList.data.data[0],\n                        resultsCount: importList.data.meta.count,\n                    },\n                    callback,\n                );\n            })\n            .catch(result => console.log(result));\n    }\n\n    private loadTaskDetails(callback?: () => void) {\n        if (!this.state.selectedImport) {\n            this.setState({\n                importDetailError: 'No Data',\n                noImportsExist: true,\n            });\n        } else {\n            ImportAPI.get(this.state.selectedImport.id)\n                .then(result => {\n                    this.setState(\n                        {\n                            importDetailError: '',\n                            noImportsExist: false,\n                            selectedImportDetails: result.data,\n                        },\n                        callback,\n                    );\n                })\n                .catch(result => {\n                    this.setState({\n                        selectedImportDetails: undefined,\n                        importDetailError: 'Error fetching import from API',\n                    });\n                });\n        }\n    }\n}\n\nexport default withRouter(MyImports);\n"],"sourceRoot":""}
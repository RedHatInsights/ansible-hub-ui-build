{"version":3,"sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.scss","webpack:///./src/containers/collection-detail/collection-detail.scss?14b9","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/warning-triangle-icon.js","webpack:///./src/containers/collection-detail/collection-detail.tsx","webpack:///./src/containers/collection-detail/collection-content.tsx","webpack:///./src/containers/collection-detail/collection-docs.tsx","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"names":["loadCollection","forceReload","callback","getCached","this","props","match","params","state","then","result","setState","collection","catch","history","push","notFound","module","exports","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","name","height","width","svgPath","yOffset","xOffset","parseParamString","location","search","componentDidMount","render","breadcrumbs","url","partners","namespace","updateParams","p","activeTab","className","updateParamsMixin","CollectionDetail","collectiondetail","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","contents","latest_version","CollectionContent","collectioncontent","docsRef","displayHTML","pluginData","urlFields","contentType","contentName","docs_blob","documentation_files","file","find","x","html","content_type","content_name","collection_readme","current","scrollIntoView","selectedName","selectedType","ref","dangerouslySetInnerHTML","__html","plugin","collectionName","namespaceName","allContent","renderNotFound","variant","full","icon","headingLevel","size","CollectionDocs","collectiondocs","loadingImports","selectedImportDetail","selectedImport","apiError","loadData","loading","task","followMessages","setFollowMessages","_","hideCollectionName","failMsg","list","version","sort","importListResult","importObj","data","get","id","importDetailResult","err","CollectionImportLog","collectionimportlog"],"mappings":"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","file":"js/collection_detail.js","sourcesContent":["import { CollectionDetailType, CollectionAPI } from '../../api';\nimport { Paths } from '../../paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n}\n\nexport function loadCollection(forceReload = false, callback = () => null) {\n  CollectionAPI.getCached(\n    this.props.match.params['namespace'],\n    this.props.match.params['collection'],\n    this.state.params,\n    forceReload,\n  )\n    .then(result => {\n      this.setState({ collection: result }, callback);\n    })\n    .catch(result => {\n      this.props.history.push(Paths.notFound);\n    });\n}\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".main{margin:0px;padding:0px}.header{border-bottom:1px solid #d8d8d8}.docs-container{padding-top:24px;background-color:white}@media (min-width: 1000px){.docs-container{display:flex}}.docs-container .sidebar{min-width:294px;max-width:294px;border-right:1px solid #d8d8d8;padding:0px;padding-top:0px}.docs-container .docs{flex-grow:1;padding:24px;padding-top:0px;min-height:calc(100vh - 250px)}.docs-container .docs table tr:nth-child(2n){background-color:#f2f2f2}.docs-container .docs table td,.docs-container .docs table th{border:1px solid #ccc;padding:5px}\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/* This file is generated by createIcons.js any changes will be lost. */\nimport createIcon from '../createIcon';\nexport const WarningTriangleIconConfig = {\n  name: 'WarningTriangleIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M511.488 949.321c6.656 0 13.093-0.878 19.456-2.487s12.142-4.169 17.481-7.461c5.998-3.365 11.118-7.314 15.506-11.995s8.119-10.021 11.483-15.945l437.979-842.24c6.656-11.995 9.801-23.918 9.509-35.913s-3.877-23.918-10.459-35.913c-3.365-5.998-7.168-11.118-11.483-15.506s-9.509-8.192-15.506-11.483c-5.339-2.706-10.971-4.827-16.969-6.51s-12.288-2.487-18.944-2.487h-876.032c-6.656 0-12.946 0.805-18.944 2.487s-11.63 3.803-16.969 6.51c-5.998 3.291-11.118 7.095-15.506 11.483s-8.192 9.509-11.483 15.506c-6.656 11.995-10.094 23.918-10.459 35.913s2.779 23.918 9.509 35.913l437.979 842.24c3.291 5.998 7.095 11.264 11.483 15.945s9.509 8.631 15.506 11.995c5.339 3.291 11.118 5.778 17.481 7.461s12.8 2.487 19.456 2.487zM132.974 73.289h759.296l-380.782 741.595-378.514-741.595zM583.387 156.526c-2.121-5.632-7.534-9.509-13.97-9.509-14.263 0-28.526 0-42.715 0-21.138 0-42.277 0-63.415 0-11.045 0-24.576 0.585-24.576 14.994 0 0 0 44.325 0 44.544 0 8.558 6.437 14.994 14.994 14.994 0 0 115.712 0 115.785 0 8.485 0 14.994-6.437 14.994-14.994 0 0 0-44.544 0-44.544 0-1.975-0.366-3.803-1.024-5.486zM583.826 301.934c-2.121-5.632-7.534-9.509-13.97-9.509-14.263 0-28.526 0-42.715 0-21.138 0-42.277 0-63.415 0-11.045 0-24.576 0.585-24.576 14.994 0 0 0 224.914 0 225.134 0 8.558 6.437 14.994 14.994 14.994 0 0 115.712 0 115.785 0 8.485 0 14.994-6.437 14.994-14.994 0 0 0-225.134 0-225.134 0-1.975-0.366-3.803-1.024-5.486z',\n  yOffset: '64',\n  xOffset: '',\n  transform: 'rotate(180 0 512) scale(-1 1)'\n};\nexport default createIcon(WarningTriangleIconConfig);\n//# sourceMappingURL=warning-triangle-icon.js.map","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection();\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        name: collection.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () => this.loadCollection(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='details'\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionInfo\n              {...collection}\n              updateParams={p => this.updateParams(p)}\n              params={this.state.params}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDetail);\ntry {\n    // @ts-ignore\n    collectiondetail.displayName = \"collectiondetail\";\n    // @ts-ignore\n    collectiondetail.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectiondetail\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionDetail>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-detail.tsx#collectiondetail\"] = { docgenInfo: collectiondetail.__docgenInfo, name: \"collectiondetail\", path: \"src/containers/collection-detail/collection-detail.tsx#collectiondetail\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionContentList,\n  LoadingPageWithHeader,\n  Main,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection();\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collection, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n        }),\n        name: collection.name,\n      },\n      { name: 'Content' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () => this.loadCollection(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionContentList\n              contents={collection.latest_version.contents}\n              collection={collection.name}\n              namespace={collection.namespace.name}\n              params={params}\n              updateParams={p => this.updateParams(p)}\n            ></CollectionContentList>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\ntry {\n    // @ts-ignore\n    collectioncontent.displayName = \"collectioncontent\";\n    // @ts-ignore\n    collectioncontent.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectioncontent\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionContent>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-content.tsx#collectioncontent\"] = { docgenInfo: collectioncontent.__docgenInfo, name: \"collectioncontent\", path: \"src/containers/collection-detail/collection-content.tsx#collectioncontent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport './collection-detail.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Title,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nimport { WarningTriangleIcon } from '@patternfly/react-icons';\n\nimport {\n  CollectionHeader,\n  TableOfContents,\n  RenderPluginDoc,\n  LoadingPageWithHeader,\n  Main,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper, sanitizeDocsUrls } from '../../utilities';\nimport { formatPath, Paths } from '../../paths';\n\n// renders markdown files in collection docs/ directory\nclass CollectionDocs extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  docsRef: any;\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n\n    this.docsRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadCollection();\n  }\n\n  render() {\n    const { params, collection } = this.state;\n    const urlFields = this.props.match.params;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // If the parser can't find anything that matches the URL, neither of\n    // these variables should be set\n    let displayHTML: string;\n    let pluginData;\n\n    const contentType = urlFields['type'] || 'docs';\n    const contentName = urlFields['name'] || urlFields['page'] || null;\n\n    if (contentType === 'docs' && contentName) {\n      if (collection.latest_version.docs_blob.documentation_files) {\n        const file = collection.latest_version.docs_blob.documentation_files.find(\n          x => sanitizeDocsUrls(x.name) === urlFields['page'],\n        );\n\n        if (file) {\n          displayHTML = file.html;\n        }\n      }\n    } else if (contentName) {\n      // check if contents exists\n      if (collection.latest_version.docs_blob.contents) {\n        const content = collection.latest_version.docs_blob.contents.find(\n          x => x.content_type === contentType && x.content_name === contentName,\n        );\n\n        if (content) {\n          if (contentType === 'role') {\n            displayHTML = content['readme_html'];\n          } else {\n            pluginData = content;\n          }\n        }\n      }\n    } else {\n      if (collection.latest_version.docs_blob.collection_readme) {\n        displayHTML =\n          collection.latest_version.docs_blob.collection_readme.html;\n      }\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collection, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n        }),\n        name: collection.name,\n      },\n      { name: 'Documentation' },\n    ];\n\n    // scroll to top of page\n    if (this.docsRef.current) {\n      this.docsRef.current.scrollIntoView();\n    }\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () => this.loadCollection(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='documentation'\n          className='header'\n        />\n        <Main className='main'>\n          <Section className='docs-container'>\n            <TableOfContents\n              className='sidebar'\n              namespace={collection.namespace.name}\n              collection={collection.name}\n              docs_blob={collection.latest_version.docs_blob}\n              selectedName={contentName}\n              selectedType={contentType}\n              params={params}\n            ></TableOfContents>\n            <div className='body docs' ref={this.docsRef}>\n              {displayHTML || pluginData ? (\n                // if neither variable is set, render not found\n                displayHTML ? (\n                  // if displayHTML is set, render it\n                  <div\n                    className='pf-c-content'\n                    dangerouslySetInnerHTML={{\n                      __html: displayHTML,\n                    }}\n                  ></div>\n                ) : (\n                  // if plugin data is set render it\n                  <RenderPluginDoc\n                    plugin={pluginData}\n                    collectionName={collection.name}\n                    namespaceName={collection.namespace.name}\n                    allContent={collection.latest_version.contents}\n                    params={params}\n                  />\n                )\n              ) : (\n                this.renderNotFound(collection.name)\n              )}\n            </div>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderNotFound(collectionName) {\n    return (\n      <EmptyState className='empty' variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WarningTriangleIcon} />\n        <Title headingLevel='h2' size='lg'>\n          Not found\n        </Title>\n        <EmptyStateBody>\n          The file you're looking for doesn't seem to be available in this\n          version of {collectionName}.\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDocs);\ntry {\n    // @ts-ignore\n    collectiondocs.displayName = \"collectiondocs\";\n    // @ts-ignore\n    collectiondocs.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectiondocs\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionDocs>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-docs.tsx#collectiondocs\"] = { docgenInfo: collectiondocs.__docgenInfo, name: \"collectiondocs\", path: \"src/containers/collection-detail/collection-docs.tsx#collectiondocs\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport { ImportAPI, ImportDetailType, ImportListType } from '../../api';\nimport {\n  CollectionHeader,\n  LoadingPageWithHeader,\n  ImportConsole,\n  Main,\n} from '../../components';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collection, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n        }),\n        name: collection.name,\n      },\n      { name: 'Import log' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n        />\n        <Main>\n          <Section className='body'>\n            <ImportConsole\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={_ => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = 'Could not load import log';\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.namespace.name,\n          name: this.state.collection.name,\n          version: this.state.collection.latest_version.version,\n          sort: '-created',\n        })\n          .then(importListResult => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then(importDetailResult => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch(err => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch(err => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\ntry {\n    // @ts-ignore\n    collectionimportlog.displayName = \"collectionimportlog\";\n    // @ts-ignore\n    collectionimportlog.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectionimportlog\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionImportLog>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-import-log.tsx#collectionimportlog\"] = { docgenInfo: collectionimportlog.__docgenInfo, name: \"collectionimportlog\", path: \"src/containers/collection-detail/collection-import-log.tsx#collectionimportlog\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
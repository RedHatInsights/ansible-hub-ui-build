{"version":3,"sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.scss","webpack:///./src/containers/collection-detail/collection-detail.scss?bb89","webpack:///./src/containers/collection-detail/collection-detail.tsx","webpack:///./src/containers/collection-detail/collection-content.tsx","webpack:///./src/containers/collection-detail/collection-docs.tsx"],"names":["loadCollection","forceReload","getCached","this","props","match","params","state","then","result","setState","collection","catch","history","push","notFound","module","exports","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","parseParamString","location","search","componentDidMount","render","breadcrumbs","url","partners","name","namespace","updateParams","p","activeTab","className","updateParamsMixin","CollectionDetail","contents","latest_version","CollectionContent","docsRef","displayHTML","pluginData","urlFields","contentType","contentName","docs_blob","documentation_files","file","find","x","html","content_type","content_name","collection_readme","current","scrollIntoView","selectedName","selectedType","ref","dangerouslySetInnerHTML","__html","plugin","collectionName","namespaceName","allContent","renderNotFound","variant","full","icon","headingLevel","size","CollectionDocs"],"mappings":"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","file":"js/collection_detail.js","sourcesContent":["import { CollectionDetailType, CollectionAPI } from '../../api';\nimport { Paths } from '../../paths';\n\nexport interface IBaseCollectionState {\n    params: {\n        version?: string;\n        showing?: string;\n        keywords?: string;\n    };\n    collection: CollectionDetailType;\n}\n\nexport function loadCollection(forceReload = false) {\n    CollectionAPI.getCached(\n        this.props.match.params['namespace'],\n        this.props.match.params['collection'],\n        this.state.params,\n        forceReload,\n    )\n        .then(result => {\n            this.setState({ collection: result });\n        })\n        .catch(result => {\n            this.props.history.push(Paths.notFound);\n        });\n}\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/* logo blue */\\n/* well background color */\\n/* alert info background color */\\n/* alert info border color */\\n.main {\\n  margin: 0px;\\n  padding: 0px; }\\n\\n.header {\\n  border-bottom: 1px solid #d8d8d8; }\\n\\n@media (min-width: 1000px) {\\n  .docs-container {\\n    display: flex; } }\\n\\n.docs-container .sidebar {\\n  min-width: 294px;\\n  max-width: 294px;\\n  border-right: 1px solid #d8d8d8;\\n  padding: 24px;\\n  padding-top: 36px; }\\n\\n.docs-container .docs {\\n  flex-grow: 1;\\n  padding: 24px;\\n  min-height: calc(100vh - 250px); }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./collection-detail.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./collection-detail.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./collection-detail.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n    CollectionHeader,\n    CollectionInfo,\n    LoadingPageWithHeader,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n    RouteComponentProps,\n    IBaseCollectionState\n> {\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search);\n\n        this.state = {\n            collection: undefined,\n            params: params,\n        };\n    }\n\n    componentDidMount() {\n        this.loadCollection();\n    }\n\n    render() {\n        const { collection, params } = this.state;\n\n        if (!collection) {\n            return <LoadingPageWithHeader></LoadingPageWithHeader>;\n        }\n\n        const breadcrumbs = [\n            { url: Paths.partners, name: 'Partners' },\n            {\n                url: formatPath(Paths.namespace, {\n                    namespace: collection.namespace.name,\n                }),\n                name: collection.namespace.name,\n            },\n            {\n                name: collection.name,\n            },\n        ];\n\n        return (\n            <React.Fragment>\n                <CollectionHeader\n                    collection={collection}\n                    params={params}\n                    updateParams={p =>\n                        this.updateParams(p, () => this.loadCollection(true))\n                    }\n                    breadcrumbs={breadcrumbs}\n                    activeTab='details'\n                />\n                <Main>\n                    <Section className='body'>\n                        <CollectionInfo\n                            {...collection}\n                            updateParams={p => this.updateParams(p)}\n                            params={this.state.params}\n                        />\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    get loadCollection() {\n        return loadCollection;\n    }\n\n    get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n}\n\nexport default withRouter(CollectionDetail);\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n    CollectionHeader,\n    CollectionContentList,\n    LoadingPageWithHeader,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n    RouteComponentProps,\n    IBaseCollectionState\n> {\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search);\n\n        this.state = {\n            collection: undefined,\n            params: params,\n        };\n    }\n\n    componentDidMount() {\n        this.loadCollection();\n    }\n\n    render() {\n        const { collection, params } = this.state;\n\n        if (!collection) {\n            return <LoadingPageWithHeader></LoadingPageWithHeader>;\n        }\n\n        const breadcrumbs = [\n            { url: Paths.partners, name: 'Partners' },\n            {\n                url: formatPath(Paths.namespace, {\n                    namespace: collection.namespace.name,\n                }),\n                name: collection.namespace.name,\n            },\n            {\n                url: formatPath(Paths.collection, {\n                    namespace: collection.namespace.name,\n                    collection: collection.name,\n                }),\n                name: collection.name,\n            },\n            { name: 'Content' },\n        ];\n\n        return (\n            <React.Fragment>\n                <CollectionHeader\n                    collection={collection}\n                    params={params}\n                    updateParams={params =>\n                        this.updateParams(params, () =>\n                            this.loadCollection(true),\n                        )\n                    }\n                    breadcrumbs={breadcrumbs}\n                    activeTab='contents'\n                />\n                <Main>\n                    <Section className='body'>\n                        <CollectionContentList\n                            contents={collection.latest_version.contents}\n                            collection={collection.name}\n                            namespace={collection.namespace.name}\n                            params={params}\n                            updateParams={p => this.updateParams(p)}\n                        ></CollectionContentList>\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    get loadCollection() {\n        return loadCollection;\n    }\n\n    get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n}\n\nexport default withRouter(CollectionContent);\n","import * as React from 'react';\nimport './collection-detail.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant,\n    Title,\n    EmptyStateIcon,\n} from '@patternfly/react-core';\n\nimport { WarningTriangleIcon } from '@patternfly/react-icons';\n\nimport {\n    CollectionHeader,\n    TableOfContents,\n    RenderPluginDoc,\n    LoadingPageWithHeader,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper, sanitizeDocsUrls } from '../../utilities';\nimport { formatPath, Paths } from '../../paths';\n\n// renders markdown files in collection docs/ directory\nclass CollectionDocs extends React.Component<\n    RouteComponentProps,\n    IBaseCollectionState\n> {\n    docsRef: any;\n\n    constructor(props) {\n        super(props);\n        const params = ParamHelper.parseParamString(props.location.search);\n\n        this.state = {\n            collection: undefined,\n            params: params,\n        };\n\n        this.docsRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.loadCollection();\n    }\n\n    render() {\n        const { params, collection } = this.state;\n        const urlFields = this.props.match.params;\n\n        if (!collection) {\n            return <LoadingPageWithHeader></LoadingPageWithHeader>;\n        }\n\n        // If the parser can't find anything that matches the URL, neither of\n        // these variables should be set\n        let displayHTML: string;\n        let pluginData;\n\n        const contentType = urlFields['type'] || 'docs';\n        const contentName = urlFields['name'] || urlFields['page'] || null;\n\n        if (contentType === 'docs' && contentName) {\n            if (collection.latest_version.docs_blob.documentation_files) {\n                const file = collection.latest_version.docs_blob.documentation_files.find(\n                    x => sanitizeDocsUrls(x.name) === urlFields['page'],\n                );\n\n                if (file) {\n                    displayHTML = file.html;\n                }\n            }\n        } else if (contentName) {\n            // check if contents exists\n            if (collection.latest_version.docs_blob.contents) {\n                const content = collection.latest_version.docs_blob.contents.find(\n                    x =>\n                        x.content_type === contentType &&\n                        x.content_name === contentName,\n                );\n\n                if (content) {\n                    if (contentType === 'role') {\n                        displayHTML = content['readme_html'];\n                    } else {\n                        pluginData = content;\n                    }\n                }\n            }\n        } else {\n            if (collection.latest_version.docs_blob.collection_readme) {\n                displayHTML =\n                    collection.latest_version.docs_blob.collection_readme.html;\n            }\n        }\n\n        const breadcrumbs = [\n            { url: Paths.partners, name: 'Partners' },\n            {\n                url: formatPath(Paths.namespace, {\n                    namespace: collection.namespace.name,\n                }),\n                name: collection.namespace.name,\n            },\n            {\n                url: formatPath(Paths.collection, {\n                    namespace: collection.namespace.name,\n                    collection: collection.name,\n                }),\n                name: collection.name,\n            },\n            { name: 'Documentation' },\n        ];\n\n        // scroll to top of page\n        if (this.docsRef.current) {\n            this.docsRef.current.scrollIntoView();\n        }\n\n        return (\n            <React.Fragment>\n                <CollectionHeader\n                    collection={collection}\n                    params={params}\n                    updateParams={p =>\n                        this.updateParams(p, () => this.loadCollection(true))\n                    }\n                    breadcrumbs={breadcrumbs}\n                    activeTab='documentation'\n                    className='header'\n                />\n                <Main className='main'>\n                    <Section className='docs-container'>\n                        <TableOfContents\n                            className='sidebar'\n                            namespace={collection.namespace.name}\n                            collection={collection.name}\n                            docs_blob={collection.latest_version.docs_blob}\n                            selectedName={contentName}\n                            selectedType={contentType}\n                            params={params}\n                        ></TableOfContents>\n                        <div className='body docs' ref={this.docsRef}>\n                            {displayHTML || pluginData ? (\n                                // if neither variable is set, render not found\n                                displayHTML ? (\n                                    // if displayHTML is set, render it\n                                    <div\n                                        className='pf-c-content'\n                                        dangerouslySetInnerHTML={{\n                                            __html: displayHTML,\n                                        }}\n                                    ></div>\n                                ) : (\n                                    // if plugin data is set render it\n                                    <RenderPluginDoc\n                                        plugin={pluginData}\n                                        collectionName={collection.name}\n                                        namespaceName={\n                                            collection.namespace.name\n                                        }\n                                        allContent={\n                                            collection.latest_version.contents\n                                        }\n                                        params={params}\n                                    />\n                                )\n                            ) : (\n                                this.renderNotFound(collection.name)\n                            )}\n                        </div>\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private renderNotFound(collectionName) {\n        return (\n            <EmptyState className='empty' variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={WarningTriangleIcon} />\n                <Title headingLevel='h2' size='lg'>\n                    Not Found\n                </Title>\n                <EmptyStateBody>\n                    The file you're looking for doesn't seem to be available in\n                    this version of {collectionName}.\n                </EmptyStateBody>\n            </EmptyState>\n        );\n    }\n\n    get loadCollection() {\n        return loadCollection;\n    }\n\n    get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n}\n\nexport default withRouter(CollectionDocs);\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/containers/namespace-list/namespace-list.scss","webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/namespace-list.scss?dbb7","webpack:///./src/containers/namespace-list/my-namespaces.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"names":["module","exports","push","i","props","nonURLParams","params","parseParamString","location","search","state","namespaces","undefined","itemCount","hasPermission","componentDidMount","this","filterOwner","getMyNamespaces","then","results","data","meta","count","loadNamespaces","setState","render","title","namespacePath","className","sortOptions","id","searchPlaceholder","updateParams","p","isTop","length","variant","full","icon","headingLevel","size","map","ns","key","to","namespace","name","list","updateParamsMixin","content","options","transform","update","locals","hot","accept","newContent","a","b","idx","Error","dispose","myCollections","MyNamespaces","Partners"],"mappings":"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","file":"js/namespace_list.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".card-layout {\\n  display: flex;\\n  flex-wrap: wrap; }\\n  .card-layout .card-wrapper {\\n    margin-right: 24px;\\n    margin-bottom: 24px; }\\n\\n.toolbar {\\n  padding-bottom: 16px;\\n  display: flex;\\n  justify-content: space-between; }\\n\", \"\"]);\n\n","import * as React from 'react';\nimport './namespace-list.scss';\n\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    EmptyState,\n    EmptyStateIcon,\n    Title,\n    EmptyStateBody,\n    EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { WarningTriangleIcon } from '@patternfly/react-icons';\n\nimport { ParamHelper } from '../../utilities/param-helper';\nimport {\n    BaseHeader,\n    NamespaceCard,\n    Toolbar,\n    Pagination,\n    LoadingPageWithHeader,\n} from '../../components';\nimport { NamespaceAPI, NamespaceListType } from '../../api';\nimport { Paths, formatPath } from '../../paths';\n\ninterface IState {\n    namespaces: NamespaceListType[];\n    itemCount: number;\n    params: {\n        name?: string;\n        sort?: string;\n        page?: number;\n        page_size?: number;\n        tenant?: string;\n    };\n    hasPermission: boolean;\n}\n\ninterface IProps extends RouteComponentProps {\n    title: string;\n    namespacePath: Paths;\n    filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n    nonURLParams = ['tenant'];\n\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search, [\n            'page',\n            'page_size',\n        ]);\n\n        if (!params['page_size']) {\n            params['page_size'] = 50;\n        }\n\n        this.state = {\n            namespaces: undefined,\n            itemCount: 0,\n            params: params,\n            hasPermission: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.filterOwner) {\n            // Make a query with no params and see if it returns results to tell\n            // if the user can edit namespaces\n            NamespaceAPI.getMyNamespaces({}).then(results => {\n                if (results.data.meta.count !== 0) {\n                    this.loadNamespaces();\n                } else {\n                    this.setState({ hasPermission: false, namespaces: [] });\n                }\n            });\n        } else {\n            this.loadNamespaces();\n        }\n    }\n\n    render() {\n        const { namespaces, params, itemCount, hasPermission } = this.state;\n        const { title, namespacePath } = this.props;\n        if (!namespaces) {\n            return <LoadingPageWithHeader></LoadingPageWithHeader>;\n        }\n\n        return (\n            <React.Fragment>\n                <BaseHeader title={title}>\n                    <div className='toolbar'>\n                        <Toolbar\n                            params={params}\n                            sortOptions={[{ title: 'Name', id: 'name' }]}\n                            searchPlaceholder={'Search ' + title}\n                            updateParams={p =>\n                                this.updateParams(p, () =>\n                                    this.loadNamespaces(),\n                                )\n                            }\n                        />\n\n                        <div>\n                            <Pagination\n                                params={params}\n                                updateParams={p =>\n                                    this.updateParams(p, () =>\n                                        this.loadNamespaces(),\n                                    )\n                                }\n                                count={itemCount}\n                                isTop\n                            />\n                        </div>\n                    </div>\n                </BaseHeader>\n                <Main>\n                    {namespaces.length === 0 ? (\n                        <Section>\n                            <EmptyState\n                                className='empty'\n                                variant={EmptyStateVariant.full}\n                            >\n                                <EmptyStateIcon icon={WarningTriangleIcon} />\n                                <Title headingLevel='h2' size='lg'>\n                                    {hasPermission\n                                        ? 'No matches'\n                                        : 'No managed namespaces'}\n                                </Title>\n                                <EmptyStateBody>\n                                    {hasPermission\n                                        ? 'Please try adjusting your search query.'\n                                        : 'This account is not set up to manage any namespaces.'}\n                                </EmptyStateBody>\n                            </EmptyState>\n                        </Section>\n                    ) : (\n                        <Section className='card-layout'>\n                            {namespaces.map((ns, i) => (\n                                <div key={i} className='card-wrapper'>\n                                    <Link\n                                        to={formatPath(namespacePath, {\n                                            namespace: ns.name,\n                                        })}\n                                    >\n                                        <NamespaceCard\n                                            key={i}\n                                            {...ns}\n                                        ></NamespaceCard>\n                                    </Link>\n                                </div>\n                            ))}\n                        </Section>\n                    )}\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private loadNamespaces() {\n        let apiFunc: any;\n\n        if (this.props.filterOwner) {\n            apiFunc = p => NamespaceAPI.getMyNamespaces(p);\n        } else {\n            apiFunc = p => NamespaceAPI.list(p);\n        }\n\n        apiFunc(this.state.params).then(results => {\n            this.setState({\n                namespaces: results.data.data,\n                itemCount: results.data.meta.count,\n            });\n        });\n    }\n\n    private get updateParams() {\n        return ParamHelper.updateParamsMixin(this.nonURLParams);\n    }\n}\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./namespace-list.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./namespace-list.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./namespace-list.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceList } from './namespace-list';\nimport { Paths } from '../../paths';\n\nclass MyNamespaces extends React.Component<RouteComponentProps, {}> {\n    render() {\n        return (\n            <NamespaceList\n                {...this.props}\n                namespacePath={Paths.myCollections}\n                title='My namespaces'\n                filterOwner={true}\n            />\n        );\n    }\n}\n\nexport default withRouter(MyNamespaces);\n","import * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceList } from './namespace-list';\nimport { Paths } from '../../paths';\n\nclass Partners extends React.Component<RouteComponentProps, {}> {\n    render() {\n        return (\n            <NamespaceList\n                {...this.props}\n                namespacePath={Paths.namespace}\n                title='Partners'\n            />\n        );\n    }\n}\n\nexport default withRouter(Partners);\n"],"sourceRoot":""}
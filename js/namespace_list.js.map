{"version":3,"sources":["webpack:///./src/containers/namespace-list/namespace-list.scss","webpack:///./src/containers/namespace-list/namespace-list.tsx","webpack:///./src/containers/namespace-list/namespace-list.scss?e8b7","webpack:///./src/containers/namespace-list/my-namespaces.tsx","webpack:///./src/containers/namespace-list/partners.tsx"],"names":["module","exports","push","i","props","nonURLParams","handleModalToggle","setState","isModalOpen","params","parseParamString","location","search","state","namespaces","undefined","itemCount","hasPermission","partnerEngineer","loading","componentDidMount","this","isPartnerEngineer","filterOwner","list","then","results","data","meta","count","loadNamespaces","render","title","extra","key","variant","onClick","className","sortOptions","id","type","searchPlaceholder","toLowerCase","updateParams","p","extraInputs","isCompact","perPageOptions","CARD_DEFAULT_PAGINATION_OPTIONS","renderBody","isOpen","toggleModal","onCreateSuccess","result","history","myCollections","namespace","namespacePath","length","full","icon","headingLevel","size","map","ns","namespaceURL","name","apiFunc","updateParamsMixin","response","me","is_partner_engineer","NamespaceList","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","content","options","transform","update","locals","hot","accept","newContent","a","b","idx","Error","dispose","MyNamespaces","mynamespaces","Partners","partners"],"mappings":"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","file":"js/namespace_list.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".card-layout{display:flex;flex-wrap:wrap}.card-layout .card-wrapper{margin-right:24px;margin-bottom:24px}.toolbar{padding-bottom:24px;display:flex;justify-content:space-between}\\n\", \"\"]);\n\n","import * as React from 'react';\nimport './namespace-list.scss';\n\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\n\nimport { ParamHelper } from '../../utilities/param-helper';\nimport {\n  BaseHeader,\n  NamespaceCard,\n  Toolbar,\n  Pagination,\n  NamespaceModal,\n  LoadingPageWithHeader,\n  Main,\n  LoadingPageSpinner,\n} from '../../components';\nimport { Button } from '@patternfly/react-core';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport {\n  NamespaceAPI,\n  NamespaceListType,\n  ActiveUserAPI,\n  MeType,\n  MyNamespaceAPI,\n} from '../../api';\nimport { Paths, formatPath } from '../../paths';\nimport { Constants } from '../../constants';\n\ninterface IState {\n  namespaces: NamespaceListType[];\n  itemCount: number;\n  params: {\n    name?: string;\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tenant?: string;\n  };\n  hasPermission: boolean;\n  partnerEngineer: boolean;\n  isModalOpen: boolean;\n  loading: boolean;\n}\n\ninterface IProps extends RouteComponentProps {\n  title: string;\n  namespacePath: Paths;\n  filterOwner?: boolean;\n}\n\nexport class NamespaceList extends React.Component<IProps, IState> {\n  nonURLParams = ['tenant'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 24;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = 'name';\n    }\n\n    this.state = {\n      namespaces: undefined,\n      itemCount: 0,\n      params: params,\n      hasPermission: true,\n      isModalOpen: false,\n      partnerEngineer: false,\n      loading: true,\n    };\n  }\n\n  private handleModalToggle = () => {\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n    }));\n  };\n\n  componentDidMount() {\n    this.isPartnerEngineer();\n    if (this.props.filterOwner) {\n      // Make a query with no params and see if it returns results to tell\n      // if the user can edit namespaces\n      MyNamespaceAPI.list({}).then(results => {\n        if (results.data.meta.count !== 0) {\n          this.loadNamespaces();\n        } else {\n          this.setState({\n            hasPermission: false,\n            namespaces: [],\n            loading: false,\n          });\n        }\n      });\n    } else {\n      this.loadNamespaces();\n    }\n  }\n\n  render() {\n    const { namespaces, params, itemCount, partnerEngineer } = this.state;\n    const { title } = this.props;\n\n    if (!namespaces) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    let extra = [];\n\n    if (partnerEngineer) {\n      extra.push(<ToolbarItem key='separator' variant='separator' />);\n      extra.push(\n        <ToolbarItem key='create-button'>\n          <Button variant='primary' onClick={this.handleModalToggle}>\n            Create\n          </Button>\n        </ToolbarItem>,\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title={title}>\n          <div className='toolbar'>\n            <Toolbar\n              params={params}\n              sortOptions={[{ title: 'Name', id: 'name', type: 'alpha' }]}\n              searchPlaceholder={'Search ' + title.toLowerCase()}\n              updateParams={p =>\n                this.updateParams(p, () => this.loadNamespaces())\n              }\n              extraInputs={extra}\n            />\n            <div>\n              <Pagination\n                params={params}\n                updateParams={p =>\n                  this.updateParams(p, () => this.loadNamespaces())\n                }\n                count={itemCount}\n                isCompact\n                perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n              />\n            </div>\n          </div>\n        </BaseHeader>\n        <Main>\n          <Section>{this.renderBody()}</Section>\n          <NamespaceModal\n            isOpen={this.state.isModalOpen}\n            toggleModal={this.handleModalToggle}\n            onCreateSuccess={result =>\n              this.props.history.push(\n                formatPath(Paths.myCollections, {\n                  namespace: result['name'],\n                }),\n              )\n            }\n          ></NamespaceModal>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderBody() {\n    const { namespaces, hasPermission } = this.state;\n    const { namespacePath } = this.props;\n    const { loading } = this.state;\n\n    if (loading) {\n      return (\n        <Section>\n          <LoadingPageSpinner></LoadingPageSpinner>;\n        </Section>\n      );\n    }\n\n    if (namespaces.length === 0) {\n      return (\n        <Section>\n          <EmptyState className='empty' variant={EmptyStateVariant.full}>\n            <EmptyStateIcon icon={SearchIcon} />\n            <Title headingLevel='h2' size='lg'>\n              {hasPermission ? 'No results found' : 'No managed namespaces'}\n            </Title>\n            <EmptyStateBody>\n              {hasPermission\n                ? 'No results match the filter criteria.' +\n                  ' Remove all filters or clear all filters' +\n                  ' to show results.'\n                : 'This account is not set up to manage any namespaces.'}\n            </EmptyStateBody>\n            {hasPermission && (\n              <Button\n                variant='link'\n                onClick={() =>\n                  this.updateParams({}, () => this.loadNamespaces())\n                }\n              >\n                Clear all filters\n              </Button>\n            )}\n          </EmptyState>\n        </Section>\n      );\n    }\n\n    return (\n      <Section className='card-layout'>\n        {namespaces.map((ns, i) => (\n          <div key={i} className='card-wrapper'>\n            <NamespaceCard\n              namespaceURL={formatPath(namespacePath, {\n                namespace: ns.name,\n              })}\n              key={i}\n              {...ns}\n            ></NamespaceCard>\n          </div>\n        ))}\n      </Section>\n    );\n  }\n\n  private loadNamespaces() {\n    let apiFunc: any;\n\n    if (this.props.filterOwner) {\n      apiFunc = p => MyNamespaceAPI.list(p);\n    } else {\n      apiFunc = p => NamespaceAPI.list(p);\n    }\n    this.setState({ loading: true }, () => {\n      apiFunc(this.state.params).then(results => {\n        this.setState({\n          namespaces: results.data.data,\n          itemCount: results.data.meta.count,\n          loading: false,\n        });\n      });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonURLParams);\n  }\n\n  private isPartnerEngineer() {\n    ActiveUserAPI.isPartnerEngineer().then(response => {\n      const me: MeType = response.data;\n      this.setState({ partnerEngineer: me.is_partner_engineer });\n    });\n  }\n}\ntry {\n    // @ts-ignore\n    NamespaceList.displayName = \"NamespaceList\";\n    // @ts-ignore\n    NamespaceList.__docgenInfo = { \"description\": \"\", \"displayName\": \"NamespaceList\", \"props\": { \"title\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"title\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"namespacePath\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"namespacePath\", \"required\": true, \"type\": { \"name\": \"Paths\" } }, \"filterOwner\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"filterOwner\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"history\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"history\", \"required\": true, \"type\": { \"name\": \"History<any>\" } }, \"location\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"location\", \"required\": true, \"type\": { \"name\": \"Location<any>\" } }, \"match\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"match\", \"required\": true, \"type\": { \"name\": \"match<{}>\" } }, \"staticContext\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"staticContext\", \"required\": false, \"type\": { \"name\": \"StaticContext\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/namespace-list/namespace-list.tsx#NamespaceList\"] = { docgenInfo: NamespaceList.__docgenInfo, name: \"NamespaceList\", path: \"src/containers/namespace-list/namespace-list.tsx#NamespaceList\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./namespace-list.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./namespace-list.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./namespace-list.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceList } from './namespace-list';\nimport { Paths } from '../../paths';\n\nclass MyNamespaces extends React.Component<RouteComponentProps, {}> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.myCollections}\n        title='My namespaces'\n        filterOwner={true}\n      />\n    );\n  }\n}\n\nexport default withRouter(MyNamespaces);\ntry {\n    // @ts-ignore\n    mynamespaces.displayName = \"mynamespaces\";\n    // @ts-ignore\n    mynamespaces.__docgenInfo = { \"description\": \"\", \"displayName\": \"mynamespaces\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<MyNamespaces>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/namespace-list/my-namespaces.tsx#mynamespaces\"] = { docgenInfo: mynamespaces.__docgenInfo, name: \"mynamespaces\", path: \"src/containers/namespace-list/my-namespaces.tsx#mynamespaces\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport { NamespaceList } from './namespace-list';\nimport { Paths } from '../../paths';\n\nclass Partners extends React.Component<RouteComponentProps, {}> {\n  render() {\n    return (\n      <NamespaceList\n        {...this.props}\n        namespacePath={Paths.namespace}\n        title='Partners'\n      />\n    );\n  }\n}\n\nexport default withRouter(Partners);\ntry {\n    // @ts-ignore\n    partners.displayName = \"partners\";\n    // @ts-ignore\n    partners.__docgenInfo = { \"description\": \"\", \"displayName\": \"partners\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<Partners>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/namespace-list/partners.tsx#partners\"] = { docgenInfo: partners.__docgenInfo, name: \"partners\", path: \"src/containers/namespace-list/partners.tsx#partners\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/containers/repositories/repository-list.tsx"],"names":["props","nonQueryStringParams","params","parseParamString","location","search","STANDALONE_DEPLOYMENT_MODE","state","itemCount","loading","showRemoteFormModal","content","remoteToEdit","undefined","errorMessages","componentDidMount","this","loadContent","render","remote","updateRemote","r","setState","saveRemote","distro_path","repositories","distributions","base_path","update","then","catch","err","__nofield","showModal","closeModal","title","className","tabs","updateParams","p","renderContent","user","context","INSIGHTS_DEPLOYMENT_MODE","tab","toLowerCase","editRemote","syncRemote","distro","sync","result","list","getReduced","data","meta","count","APIClass","updateParamsMixin","RepositoryList","contextType","repositorylist","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error"],"mappings":"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","file":"js/repository-list.js","sourcesContent":["import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport {\n  BaseHeader,\n  LoadingPageSpinner,\n  Main,\n  Tabs,\n  RemoteRepositoryTable,\n  LocalRepositoryTable,\n  RemoteForm,\n} from '../../components';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ParamHelper, mapErrorMessages } from '../../utilities';\nimport { Constants } from '../../constants';\nimport {\n  RemoteAPI,\n  RemoteType,\n  DistributionAPI,\n  MyDistributionAPI,\n  DistributionType,\n} from '../../api';\nimport { AppContext } from '../../loaders/app-context';\n\nexport class Repository {\n  name: string;\n  url: string;\n  token: string;\n  ssoUrl: string;\n  yaml: string;\n  sync: boolean;\n}\n\ninterface IState {\n  params: {\n    page?: number;\n    page_size?: number;\n    tab?: string;\n  };\n  itemCount: number;\n  loading: boolean;\n  showRemoteFormModal: boolean;\n  errorMessages: Object;\n\n  content: RemoteType[] | DistributionType[];\n  remoteToEdit: RemoteType;\n}\n\nclass RepositoryList extends React.Component<RouteComponentProps, IState> {\n  nonQueryStringParams = ['repository'];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['tab']) {\n      params['tab'] = 'local';\n    }\n\n    if (\n      !params['tab'] &&\n      DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE\n    ) {\n      params['tab'] = 'local';\n    }\n\n    this.state = {\n      itemCount: 1,\n      params: params,\n      loading: false,\n      showRemoteFormModal: false,\n      content: [],\n      remoteToEdit: undefined,\n      errorMessages: {},\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n  }\n\n  render() {\n    const {\n      params,\n      itemCount,\n      loading,\n      content,\n      remoteToEdit,\n      showRemoteFormModal,\n      errorMessages,\n    } = this.state;\n\n    const tabs = ['Local', 'Remote'];\n    return (\n      <React.Fragment>\n        {remoteToEdit && showRemoteFormModal && (\n          <RemoteForm\n            remote={remoteToEdit}\n            updateRemote={(r: RemoteType) => this.setState({ remoteToEdit: r })}\n            saveRemote={() => {\n              const { remoteToEdit } = this.state;\n\n              try {\n                const distro_path =\n                  remoteToEdit.repositories[0].distributions[0].base_path;\n                RemoteAPI.update(distro_path, remoteToEdit)\n                  .then(r => {\n                    this.setState(\n                      {\n                        errorMessages: {},\n                        showRemoteFormModal: false,\n                        remoteToEdit: undefined,\n                      },\n                      () => this.loadContent(),\n                    );\n                  })\n                  .catch(err =>\n                    this.setState({ errorMessages: mapErrorMessages(err) }),\n                  );\n              } catch {\n                this.setState({\n                  errorMessages: {\n                    __nofield:\n                      \"Can't update remote without a distribution attached to it.\",\n                  },\n                });\n              }\n            }}\n            errorMessages={errorMessages}\n            showModal={showRemoteFormModal}\n            closeModal={() =>\n              this.setState({ showRemoteFormModal: false, errorMessages: {} })\n            }\n          />\n        )}\n        <BaseHeader title='Repo Management'>\n          {DEPLOYMENT_MODE === Constants.STANDALONE_DEPLOYMENT_MODE ? (\n            <div className='header-bottom'>\n              <div className='tab-link-container'>\n                <div className='tabs'>\n                  <Tabs\n                    tabs={tabs}\n                    params={params}\n                    updateParams={p => {\n                      // empty the content before updating the params to prevent\n                      // rendering from breaking when the wrong content is loaded\n                      this.setState({ content: [] }, () =>\n                        this.updateParams(p, () => this.loadContent()),\n                      );\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </BaseHeader>\n        <Main className='repository-list'>\n          <Section className='body'>\n            {this.renderContent(params, loading, itemCount, content)}\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderContent(params, loading, itemCount, content) {\n    const { user } = this.context;\n    // Dont show remotes on insights\n    if (\n      DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE ||\n      (!!params.tab && params.tab.toLowerCase() === 'local')\n    ) {\n      return (\n        <div>\n          {loading ? (\n            <LoadingPageSpinner />\n          ) : (\n            <LocalRepositoryTable\n              repositories={content}\n              updateParams={this.updateParams}\n            />\n          )}\n        </div>\n      );\n    }\n    if (!!params.tab && params.tab.toLowerCase() === 'remote') {\n      return (\n        <div>\n          {loading ? (\n            <LoadingPageSpinner />\n          ) : (\n            <RemoteRepositoryTable\n              repositories={content}\n              updateParams={this.updateParams}\n              editRemote={(remote: RemoteType) => {\n                this.setState({\n                  remoteToEdit: remote,\n                  showRemoteFormModal: true,\n                });\n              }}\n              syncRemote={distro =>\n                RemoteAPI.sync(distro).then(result => this.loadContent())\n              }\n              user={user}\n            />\n          )}\n        </div>\n      );\n    }\n  }\n\n  private loadContent() {\n    const { params } = this.state;\n    this.setState({ loading: true }, () => {\n      if (params['tab'] == 'remote') {\n        RemoteAPI.list(\n          ParamHelper.getReduced(params, this.nonQueryStringParams),\n        ).then(result => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      } else {\n        let APIClass = DistributionAPI;\n\n        if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE) {\n          APIClass = MyDistributionAPI;\n        }\n\n        APIClass.list().then(result => {\n          this.setState({\n            loading: false,\n            content: result.data.data,\n            itemCount: result.data.meta.count,\n          });\n        });\n      }\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n}\n\nRepositoryList.contextType = AppContext;\n\nexport default withRouter(RepositoryList);\ntry {\n    // @ts-ignore\n    repositorylist.displayName = \"repositorylist\";\n    // @ts-ignore\n    repositorylist.__docgenInfo = { \"description\": \"\", \"displayName\": \"repositorylist\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<RepositoryList>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/repositories/repository-list.tsx#repositorylist\"] = { docgenInfo: repositorylist.__docgenInfo, name: \"repositorylist\", path: \"src/containers/repositories/repository-list.tsx#repositorylist\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
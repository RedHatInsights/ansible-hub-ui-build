{"version":3,"sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.scss","webpack:///./src/containers/certification-dashboard/certification-dashboard.scss?13e2","webpack:///./src/containers/token/token-insights.tsx","webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","state","tokenData","componentDidMount","window","insights","chrome","auth","getOfflineToken","then","result","setState","data","render","this","title","className","to","repositories","search","href","target","refresh_token","onClick","loadToken","isReadOnly","doOffline","TokenPage","tokeninsights","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error","params","parseParamString","location","versions","itemCount","loading","updatingVersions","alerts","unauthorized","context","user","model_permissions","move_collection","queryCollections","closeAlert","updateParams","p","filterConfig","id","inputType","NOTCERTIFIED","NEEDSREVIEW","PUBLISHED","count","isTop","ignoredParams","renderTable","length","description","headers","type","map","version","renderRow","renderStatus","includes","repository_list","style","color","index","namespace","collectionByRepo","collection","repo","date","created_at","renderButtons","importsLink","component","myImports","certifyDropDown","isDisabled","originalRepo","updateCertification","rejectDropDown","items","destinationRepo","setRepository","waitForUpdate","remove_task_id","catch","error","concat","variant","response","status","taskId","get","Promise","r","setTimeout","list","meta","updateParamsMixin","CertificationDashboard","contextType","certificationdashboard"],"mappings":"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","file":"js/settings.7f26e395002912a6e94a.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".certification-dasboard .toolbar{padding-bottom:16px;display:flex;justify-content:space-between}.certification-dasboard .control-column{display:flex;justify-content:flex-end;align-items:center}.certification-dasboard .footer{padding-top:16px}.certification-dasboard .updating-spinner{color:var(--pf-global--info-color--100)}\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ClipboardCopy, Button } from '@patternfly/react-core';\n\nimport { Paths } from 'src/paths';\nimport { BaseHeader, Main } from 'src/components';\nimport { getRepoUrl } from 'src/utilities';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    (window as any).insights.chrome.auth.getOfflineToken().then(result => {\n      this.setState({ tokenData: result.data });\n    });\n  }\n\n  render() {\n    const { tokenData } = this.state;\n\n    return (\n      <React.Fragment>\n        <BaseHeader title='Connect to Hub'></BaseHeader>\n        <Main>\n          <Section className='body pf-c-content'>\n            <h2>Connect Private Automation Hub</h2>\n            <p>\n              Use the <Link to={Paths.repositories}>Repository Management</Link>{' '}\n              page to sync collections curated by your organization to the Red\n              Hat Certified repository in your private Automation Hub. Users\n              with the correct permissions can use the sync toggles on the{' '}\n              <Link to={Paths.search}>Collections</Link> page to control which\n              collections are added to their organization's sync repository.\n            </p>\n          </Section>\n          <Section className='body pf-c-content'>\n            <h2>Connect the ansible-galaxy client</h2>\n            <p>\n              Documentation on how to configure the <code>ansible-galaxy</code>{' '}\n              client can be found{' '}\n              <a\n                href='https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/'\n                target='_blank'\n              >\n                here\n              </a>\n              . Use the following parameters to configure the client.\n            </p>\n          </Section>\n          <Section className='body pf-c-content'>\n            <h2>Offline token</h2>\n            <p>\n              Use this token to authenticate clients that need to download\n              content from Automation Hub. This is a secret token used to\n              protect your content. Store your API token in a secure location.\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <Button onClick={() => this.loadToken()}>Load token</Button>\n            )}\n            <h2>Manage tokens</h2>\n            To revoke a token or see all of your tokens, visit the{' '}\n            <a\n              href='https://sso.redhat.com/auth/realms/redhat-external/account/applications'\n              target='_blank'\n            >\n              offline API token management\n            </a>{' '}\n            page.\n          </Section>\n          <Section className='body pf-c-content'>\n            <h2>Server URL</h2>\n            <p>\n              Use this URL to configure the API endpoints that clients need to\n              download content from Automation Hub.\n            </p>\n            <ClipboardCopy isReadOnly>{getRepoUrl('')}</ClipboardCopy>\n            <p>\n              Note: this URL contains all collections in Hub. To connect to your\n              organization's sync repository use the URL found on{' '}\n              <Link to={Paths.repositories}>Repository Management</Link>.\n            </p>\n          </Section>\n          <Section className='body pf-c-content'>\n            <h2>SSO URL</h2>\n            <p>\n              Use this URL to configure the authentication URLs that clients\n              need to download content from Automation Hub.\n            </p>\n            <ClipboardCopy isReadOnly>\n              https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n            </ClipboardCopy>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    (window as any).insights.chrome.auth\n      // doOffline causes the page to refresh and will make the data\n      // available to getOfflineToken() when the component mounts after\n      // the reload\n      .doOffline();\n  }\n}\n\nexport default withRouter(TokenPage);\ntry {\n    // @ts-ignore\n    tokeninsights.displayName = \"tokeninsights\";\n    // @ts-ignore\n    tokeninsights.__docgenInfo = { \"description\": \"\", \"displayName\": \"tokeninsights\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<TokenPage>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/token/token-insights.tsx#tokeninsights\"] = { docgenInfo: tokeninsights.__docgenInfo, name: \"tokeninsights\", path: \"src/containers/token/token-insights.tsx#tokeninsights\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport './certification-dashboard.scss';\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  Main,\n} from 'src/components';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n} from '@patternfly/react-core';\n\nimport {\n  InfoCircleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n} from '@patternfly/react-icons';\n\nimport { CollectionVersionAPI, CollectionVersion, TaskAPI } from 'src/api';\nimport { filterIsSet, ParamHelper } from 'src/utilities';\nimport {\n  LoadingPageWithHeader,\n  StatefulDropdown,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !this.context.user ||\n      !this.context.user.model_permissions.move_collection\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title='Approval dashboard'></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={i => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='certification-dashboard'>\n            <Section className='body'>\n              <div className='toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        updateParams={p =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: 'Namespace',\n                          },\n                          {\n                            id: 'name',\n                            title: 'Collection Name',\n                          },\n                          {\n                            id: 'repository',\n                            title: 'Repository',\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: 'Rejected',\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: 'Needs Review',\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: 'Approved',\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={p =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={p =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={p =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </Section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={'No managed collections yet'}\n          description={'Collections will appear once uploaded'}\n        />\n      );\n    }\n    let sortTableOptions = {\n      headers: [\n        {\n          title: 'Namespace',\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: 'Collection',\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: 'Version',\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: 'Date created',\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: 'Status',\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label='Collection versions'\n        className='content-table pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <CheckCircleIcon\n            style={{ color: 'var(--pf-global--success-color--100)' }}\n          />{' '}\n          Approved\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <ExclamationCircleIcon\n            style={{ color: 'var(--pf-global--danger-color--100)' }}\n          />{' '}\n          Rejected\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <InfoCircleIcon\n            style={{ color: 'var(--pf-global--info-color--100)' }}\n          />{' '}\n          Needs Review\n        </span>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr\n        aria-labelledby={`${version.namespace}.${version.name} v${version.version}`}\n        key={index}\n      >\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        <td>\n          <div className='control-column'>\n            <div>{this.renderButtons(version)}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return;\n    }\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            View Import Logs\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        Approve\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        Reject\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(true, Constants.PUBLISHED),\n              rejectDropDown(false, Constants.PUBLISHED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(false, Constants.NOTCERTIFIED),\n              rejectDropDown(true, Constants.NOTCERTIFIED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <Button\n            onClick={() =>\n              this.updateCertification(\n                version,\n                Constants.NEEDSREVIEW,\n                Constants.PUBLISHED,\n              )\n            }\n          >\n            <span>Approve</span>\n          </Button>\n          <StatefulDropdown\n            items={[rejectDropDown(false, Constants.NEEDSREVIEW), importsLink]}\n          />\n        </span>\n      );\n    }\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: [],\n      },\n      () =>\n        CollectionVersionAPI.setRepository(\n          version.namespace,\n          version.name,\n          version.version,\n          originalRepo,\n          destinationRepo,\n        )\n          .then(result =>\n            // Since pulp doesn't reply with the new object, perform a\n            // second query to get the updated data\n            {\n              this.setState({\n                updatingVersions: [version],\n              });\n              this.waitForUpdate(result.data.remove_task_id, version);\n            },\n          )\n          .catch(error => {\n            this.setState({\n              updatingVersions: [],\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: `API Error: ${error.response.status}`,\n                description:\n                  `Could not update the certification ` +\n                  `status for ${version.namespace}.` +\n                  `${version.name}.${version.version}.`,\n              }),\n            });\n          }),\n    );\n  }\n\n  private waitForUpdate(result, version) {\n    const taskId = result;\n    return TaskAPI.get(taskId).then(async result => {\n      if (result.data.state === 'waiting' || result.data.state === 'running') {\n        await new Promise(r => setTimeout(r, 500));\n        this.waitForUpdate(taskId, version);\n      } else if (result.data.state === 'completed') {\n        return CollectionVersionAPI.list(this.state.params).then(\n          async result => {\n            this.setState({\n              versions: result.data.data,\n              updatingVersions: [],\n            });\n          },\n        );\n      } else {\n        this.setState({\n          updatingVersions: [],\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: `API Error: 500`,\n            description:\n              `Could not update the certification ` +\n              `status for ${version.namespace}.` +\n              `${version.name}.${version.version}.`,\n          }),\n        });\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then(result => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        });\n      }),\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\ntry {\n    // @ts-ignore\n    certificationdashboard.displayName = \"certificationdashboard\";\n    // @ts-ignore\n    certificationdashboard.__docgenInfo = { \"description\": \"\", \"displayName\": \"certificationdashboard\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CertificationDashboard>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/certification-dashboard/certification-dashboard.tsx#certificationdashboard\"] = { docgenInfo: certificationdashboard.__docgenInfo, name: \"certificationdashboard\", path: \"src/containers/certification-dashboard/certification-dashboard.tsx#certificationdashboard\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
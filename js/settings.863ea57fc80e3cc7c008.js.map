{"version":3,"sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.scss","webpack:///./src/containers/certification-dashboard/certification-dashboard.scss?13e2","webpack:///./src/containers/token/token-insights.tsx","webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","state","tokenData","componentDidMount","window","insights","chrome","auth","getOfflineToken","then","result","setState","data","render","user","this","context","renewTokenCmd","username","refresh_token","title","className","to","repositories","search","href","target","onClick","loadToken","style","paddingTop","isCode","isReadOnly","variant","expansion","doOffline","TokenPage","contextType","params","parseParamString","location","versions","itemCount","loading","updatingVersions","alerts","unauthorized","model_permissions","move_collection","queryCollections","closeAlert","updateParams","p","filterConfig","id","inputType","NOTCERTIFIED","NEEDSREVIEW","PUBLISHED","count","isTop","ignoredParams","niceValues","repository","niceNames","renderTable","length","description","headers","type","map","version","renderRow","renderStatus","includes","repository_list","color","index","namespace","name","collectionByRepo","collection","repo","date","created_at","renderButtons","importsLink","component","myImports","certifyDropDown","isDisabled","originalRepo","updateCertification","rejectDropDown","items","destinationRepo","setRepository","waitForUpdate","remove_task_id","catch","error","concat","response","status","taskId","get","Promise","r","setTimeout","list","meta","updateParamsMixin","CertificationDashboard"],"mappings":"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","file":"js/settings.863ea57fc80e3cc7c008.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".certification-dasboard .toolbar{padding-bottom:16px;display:flex;justify-content:space-between}.certification-dasboard .control-column{display:flex;justify-content:flex-end;align-items:center}.certification-dasboard .footer{padding-top:16px}.certification-dasboard .updating-spinner{color:var(--pf-global--info-color--100)}\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  Button,\n} from '@patternfly/react-core';\n\nimport { Paths } from 'src/paths';\nimport { BaseHeader, Main } from 'src/components';\nimport { getRepoUrl } from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    (window as any).insights.chrome.auth.getOfflineToken().then(result => {\n      this.setState({ tokenData: result.data });\n    });\n  }\n\n  render() {\n    const { user } = this.context;\n    const { tokenData } = this.state;\n    const renewTokenCmd = `curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=\"${\n      user.username\n    }\" -d refresh_token=\\\"${tokenData?.refresh_token ??\n      '{{ user_token }}'}\\\" --fail --silent --show-error --output /dev/null`;\n\n    return (\n      <React.Fragment>\n        <BaseHeader title='Connect to Hub'></BaseHeader>\n        <Main>\n          <section className='body pf-c-content'>\n            <h2>Connect Private Automation Hub</h2>\n            <p>\n              Use the <Link to={Paths.repositories}>Repository Management</Link>{' '}\n              page to sync collections curated by your organization to the Red\n              Hat Certified repository in your private Automation Hub. Users\n              with the correct permissions can use the sync toggles on the{' '}\n              <Link to={Paths.search}>Collections</Link> page to control which\n              collections are added to their organization's sync repository.\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>Connect the ansible-galaxy client</h2>\n            <p>\n              Documentation on how to configure the <code>ansible-galaxy</code>{' '}\n              client can be found{' '}\n              <a\n                href='https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/'\n                target='_blank'\n              >\n                here\n              </a>\n              . Use the following parameters to configure the client.\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>Offline token</h2>\n            <p>\n              Use this token to authenticate clients that need to download\n              content from Automation Hub. This is a secret token used to\n              protect your content. Store your API token in a secure location.\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <Button onClick={() => this.loadToken()}>Load token</Button>\n            )}\n            <div\n              className='pf-c-content'\n              style={{ paddingTop: 'var(--pf-global--spacer--md)' }}\n            >\n              <span>\n                The token will expire after 30 days of inactivity. Run the\n                command below periodically to prevent your token from expiring.\n              </span>\n              <ClipboardCopy\n                isCode\n                isReadOnly\n                variant={ClipboardCopyVariant.expansion}\n              >\n                {renewTokenCmd}\n              </ClipboardCopy>\n            </div>\n            <h2>Manage tokens</h2>\n            To revoke a token or see all of your tokens, visit the{' '}\n            <a\n              href='https://sso.redhat.com/auth/realms/redhat-external/account/applications'\n              target='_blank'\n            >\n              offline API token management\n            </a>{' '}\n            page.\n          </section>\n          <section className='body pf-c-content'>\n            <h2>Server URL</h2>\n            <p>\n              Use this URL to configure the API endpoints that clients need to\n              download content from Automation Hub.\n            </p>\n            <ClipboardCopy isReadOnly>{getRepoUrl('')}</ClipboardCopy>\n            <p>\n              Note: this URL contains all collections in Hub. To connect to your\n              organization's sync repository use the URL found on{' '}\n              <Link to={Paths.repositories}>Repository Management</Link>.\n            </p>\n          </section>\n          <section className='body pf-c-content'>\n            <h2>SSO URL</h2>\n            <p>\n              Use this URL to configure the authentication URLs that clients\n              need to download content from Automation Hub.\n            </p>\n            <ClipboardCopy isReadOnly>\n              https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token\n            </ClipboardCopy>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    (window as any).insights.chrome.auth\n      // doOffline causes the page to refresh and will make the data\n      // available to getOfflineToken() when the component mounts after\n      // the reload\n      .doOffline();\n  }\n}\n\nexport default withRouter(TokenPage);\nTokenPage.contextType = AppContext;\n","import * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport {\n  BaseHeader,\n  DateComponent,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  EmptyStateUnauthorized,\n  Main,\n} from 'src/components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n} from '@patternfly/react-core';\n\nimport {\n  InfoCircleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n} from '@patternfly/react-icons';\n\nimport { CollectionVersionAPI, CollectionVersion, TaskAPI } from 'src/api';\nimport { filterIsSet, ParamHelper } from 'src/utilities';\nimport {\n  LoadingPageWithHeader,\n  StatefulDropdown,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n} from 'src/components';\nimport { Paths, formatPath } from 'src/paths';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  unauthorized: boolean;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      alerts: [],\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !this.context.user ||\n      !this.context.user.model_permissions.move_collection\n    ) {\n      this.setState({ unauthorized: true });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, unauthorized } = this.state;\n\n    if (!versions && !unauthorized) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    return (\n      <React.Fragment>\n        <BaseHeader title='Approval dashboard'></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={i => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main className='certification-dashboard'>\n            <section className='body'>\n              <div className='toolbar'>\n                <Toolbar>\n                  <ToolbarGroup>\n                    <ToolbarItem>\n                      <CompoundFilter\n                        updateParams={p =>\n                          this.updateParams(p, () => this.queryCollections())\n                        }\n                        params={params}\n                        filterConfig={[\n                          {\n                            id: 'namespace',\n                            title: 'Namespace',\n                          },\n                          {\n                            id: 'name',\n                            title: 'Collection Name',\n                          },\n                          {\n                            id: 'repository',\n                            title: 'Status',\n                            inputType: 'select',\n                            options: [\n                              {\n                                id: Constants.NOTCERTIFIED,\n                                title: 'Rejected',\n                              },\n                              {\n                                id: Constants.NEEDSREVIEW,\n                                title: 'Needs Review',\n                              },\n                              {\n                                id: Constants.PUBLISHED,\n                                title: 'Approved',\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    </ToolbarItem>\n                  </ToolbarGroup>\n                </Toolbar>\n\n                <Pagination\n                  params={params}\n                  updateParams={p =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                  isTop\n                />\n              </div>\n              <div>\n                <AppliedFilters\n                  updateParams={p =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  params={params}\n                  ignoredParams={['page_size', 'page', 'sort']}\n                  niceValues={{\n                    repository: {\n                      [Constants.PUBLISHED]: 'Approved',\n                      [Constants.NEEDSREVIEW]: 'Needs Review',\n                      [Constants.NOTCERTIFIED]: 'Rejected',\n                    },\n                  }}\n                  niceNames={{\n                    repository: 'Status',\n                  }}\n                />\n              </div>\n              {loading ? (\n                <LoadingPageSpinner />\n              ) : (\n                this.renderTable(versions, params)\n              )}\n\n              <div className='footer'>\n                <Pagination\n                  params={params}\n                  updateParams={p =>\n                    this.updateParams(p, () => this.queryCollections())\n                  }\n                  count={itemCount}\n                />\n              </div>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return filterIsSet(params, ['namespace', 'name', 'repository']) ? (\n        <EmptyStateFilter />\n      ) : (\n        <EmptyStateNoData\n          title={'No managed collections yet'}\n          description={'Collections will appear once uploaded'}\n        />\n      );\n    }\n    let sortTableOptions = {\n      headers: [\n        {\n          title: 'Namespace',\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: 'Collection',\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: 'Version',\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: 'Date created',\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: 'Status',\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label='Collection versions'\n        className='content-table pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <CheckCircleIcon\n            style={{ color: 'var(--pf-global--success-color--100)' }}\n          />{' '}\n          Approved\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <ExclamationCircleIcon\n            style={{ color: 'var(--pf-global--danger-color--100)' }}\n          />{' '}\n          Rejected\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <InfoCircleIcon\n            style={{ color: 'var(--pf-global--info-color--100)' }}\n          />{' '}\n          Needs Review\n        </span>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr\n        aria-labelledby={`${version.namespace}.${version.name} v${version.version}`}\n        key={index}\n      >\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n        </td>\n        <td>\n          <DateComponent date={version.created_at} />\n        </td>\n        <td>{this.renderStatus(version)}</td>\n        <td>\n          <div className='control-column'>\n            <div>{this.renderButtons(version)}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return;\n    }\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            View Import Logs\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.PUBLISHED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        Approve\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        Reject\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.PUBLISHED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(true, Constants.PUBLISHED),\n              rejectDropDown(false, Constants.PUBLISHED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(false, Constants.NOTCERTIFIED),\n              rejectDropDown(true, Constants.NOTCERTIFIED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <Button\n            onClick={() =>\n              this.updateCertification(\n                version,\n                Constants.NEEDSREVIEW,\n                Constants.PUBLISHED,\n              )\n            }\n          >\n            <span>Approve</span>\n          </Button>\n          <StatefulDropdown\n            items={[rejectDropDown(false, Constants.NEEDSREVIEW), importsLink]}\n          />\n        </span>\n      );\n    }\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: [],\n      },\n      () =>\n        CollectionVersionAPI.setRepository(\n          version.namespace,\n          version.name,\n          version.version,\n          originalRepo,\n          destinationRepo,\n        )\n          .then(result =>\n            // Since pulp doesn't reply with the new object, perform a\n            // second query to get the updated data\n            {\n              this.setState({\n                updatingVersions: [version],\n              });\n              this.waitForUpdate(result.data.remove_task_id, version);\n            },\n          )\n          .catch(error => {\n            this.setState({\n              updatingVersions: [],\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: `API Error: ${error.response.status}`,\n                description:\n                  `Could not update the certification ` +\n                  `status for ${version.namespace}.` +\n                  `${version.name}.${version.version}.`,\n              }),\n            });\n          }),\n    );\n  }\n\n  private waitForUpdate(result, version) {\n    const taskId = result;\n    return TaskAPI.get(taskId).then(async result => {\n      if (result.data.state === 'waiting' || result.data.state === 'running') {\n        await new Promise(r => setTimeout(r, 500));\n        this.waitForUpdate(taskId, version);\n      } else if (result.data.state === 'completed') {\n        return CollectionVersionAPI.list(this.state.params).then(\n          async result => {\n            this.setState({\n              versions: result.data.data,\n              updatingVersions: [],\n            });\n          },\n        );\n      } else {\n        this.setState({\n          updatingVersions: [],\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: `API Error: 500`,\n            description:\n              `Could not update the certification ` +\n              `status for ${version.namespace}.` +\n              `${version.name}.${version.version}.`,\n          }),\n        });\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then(result => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        });\n      }),\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\n"],"sourceRoot":""}
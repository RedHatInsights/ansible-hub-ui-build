{"version":3,"sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.scss","webpack:///./src/containers/certification-dashboard/certification-dashboard.scss?0af1","webpack:///./src/containers/token/token-insights.tsx","webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","state","tokenData","componentDidMount","window","insights","chrome","auth","getOfflineToken","then","result","setState","data","render","title","className","refresh_token","onClick","loadToken","href","target","doOffline","TokenPage","tokeninsights","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error","params","parseParamString","location","search","needsReview","versions","itemCount","loading","updatingVersions","redirect","alerts","isPartnerEngineer","response","is_partner_engineer","queryCollections","notFound","to","this","closeAlert","updateParams","p","filterConfig","id","inputType","type","count","isTop","ignoredParams","renderTable","length","variant","full","icon","headingLevel","size","map","version","renderRow","renderStatus","includes","certification","certified","notCertified","index","namespace","collection","created_at","fromNow","renderButtons","importsLink","component","myImports","certifyDropDown","isDisabled","updateCertification","rejectDropDown","items","concat","setCertifiation","list","updatedVersion","newVersionList","ind","findIndex","x","filter","v","catch","error","status","description","meta","updateParamsMixin","CertificationDashboard","certificationdashboard"],"mappings":"8EAAUA,EAAOC,QAAU,EAAQ,EAAR,EAAgE,IAEnFC,KAAK,CAACF,EAAOG,EAAI,4fAA6f,M,oBCDthB,IAAIC,EAAU,EAAQ,KAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACJ,EAAOG,EAAIC,EAAS,MAOhE,IAAIC,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAEjBC,EAAS,EAAQ,EAAR,CAAgEJ,EAASC,GAEnFD,EAAQK,SAAQT,EAAOC,QAAUG,EAAQK,QAG3CT,EAAOU,IAAIC,OAAO,KAAiI,WAClJ,IAAIC,EAAa,EAAQ,KAiBzB,GAfyB,iBAAfA,IAAyBA,EAAa,CAAC,CAACZ,EAAOG,EAAIS,EAAY,OAE3D,SAASC,EAAGC,GACzB,IAAIC,EAAKC,EAAM,EAEf,IAAID,KAAOF,EAAG,CACb,IAAIC,GAAKD,EAAEE,KAASD,EAAEC,GAAM,OAAO,EACnCC,IAGD,IAAID,KAAOD,EAAGE,IAEd,OAAe,IAARA,EAVK,CAWXZ,EAAQK,OAAQG,EAAWH,QAEjB,MAAM,IAAIQ,MAAM,uDAE5BT,EAAOI,MAGRZ,EAAOU,IAAIQ,SAAQ,WAAaV,Q,qZCtBjC,cACE,WAAYW,GAAZ,MACE,YAAMA,IAAM,K,OAEZ,EAAKC,MAAQ,CACXC,eAAWd,G,EAqDjB,OA1DwB,OAStB,YAAAe,kBAAA,sBAEGC,OAAeC,SAASC,OAAOC,KAAKC,kBAAkBC,MAAK,SAAAC,GAC1D,EAAKC,SAAS,CAAET,UAAWQ,EAAOE,WAItC,YAAAC,OAAA,sBACUX,EAAA,WAAAA,UAER,OACE,gBAAC,WAAc,KACb,gBAAC,IAAU,CAACY,MAAM,qBAClB,gBAAC,IAAI,KACH,gBAAC,UAAO,CAACC,UAAU,qBACjB,2CACA,yB,sCACqC,8CAA4B,I,WAGhEb,EACC,2BACE,gBAAC,IAAa,KAAEA,EAAUc,gBAG5B,gBAAC,IAAM,CAACC,QAAS,WAAM,SAAKC,cAAW,cAEzC,2C,qCACmC,IACnC,qBACEC,KAAK,8DACLC,OAAO,UAAQ,iC,QAWnB,YAAAF,UAAR,WACGd,OAAeC,SAASC,OAAOC,KAI7Bc,aAEP,EA1DA,CAAwB,aA4DT,sBAAWC,GAC1B,IAEIC,cAAcC,YAAc,gBAE5BD,cAAcE,aAAe,CAAE,YAAe,GAAI,YAAe,gBAAiB,MAAS,CAAE,oBAAuB,CAAE,aAAgB,KAAM,YAAe,GAAI,KAAQ,sBAAuB,UAAY,EAAO,KAAQ,CAAE,KAAQ,qBAE5L,oBAA5BC,0BAEPA,wBAAwB,yDAA2D,CAAEC,WAAYJ,cAAcE,aAAcG,KAAM,gBAAiBC,KAAM,0DAElK,MAAOC,M,0uBCrBP,cAIE,WAAY9B,GAAZ,MACE,YAAMA,IAAM,KAEN+B,EAAS,IAAYC,iBAAiBhC,EAAMiC,SAASC,OAAQ,CACjE,OACA,c,OAGGH,EAAkB,YACrBA,EAAkB,UAAI,IAGnBA,EAAa,OAChBA,EAAa,KAAI,iBAGdA,EAAsB,gBACzBA,EAAsB,cAAI,IAAoBI,aAGhD,EAAKlC,MAAQ,CACXmC,cAAUhD,EACViD,UAAW,EACXN,OAAQA,EACRO,SAAS,EACTC,iBAAkB,GAClBC,cAAUpD,EACVqD,OAAQ,I,EA2Yd,OA1aqC,OAmCnC,YAAAtC,kBAAA,sBACE,IAAcuC,oBAAoBjC,MAAK,SAAAkC,GAClBA,EAAS/B,KACpBgC,oBAGN,EAAKC,mBAFL,EAAKlC,SAAS,CAAE6B,SAAU,IAAMM,eAOtC,YAAAjC,OAAA,sBACQ,aAAEuB,EAAA,EAAAA,SAAUL,EAAA,EAAAA,OAAQM,EAAA,EAAAA,UAAWC,EAAA,EAAAA,QAASE,EAAA,EAAAA,SAE9C,GAAIA,EACF,OAAO,gBAAC,IAAQ,CAACO,GAAIP,IAcvB,OAAKJ,EAIH,gBAAC,WAAc,KACb,gBAAC,IAAU,CAACtB,MAAM,4BAClB,gBAAC,IAAS,CACR2B,OAAQO,KAAK/C,MAAMwC,OACnBQ,WAAY,SAAAjE,GAAK,SAAKiE,WAAWjE,MAEnC,gBAAC,IAAI,KACH,gBAAC,UAAO,CAAC+B,UAAU,QACjB,uBAAKA,UAAU,WACb,gBAAC,IAAO,KACN,gBAAC,IAAY,KACX,gBAAC,IAAW,KACV,gBAAC,IAAc,CACbmC,aAAc,SAAAC,GACZ,SAAKD,aAAaC,GAAG,WAAM,SAAKN,uBAElCd,OAAQA,EACRqB,aAAc,CACZ,CACEC,GAAI,YACJvC,MAAO,aAET,CACEuC,GAAI,OACJvC,MAAO,mBAET,CACEuC,GAAI,gBACJvC,MAAO,uBACPwC,UAAW,SACXpE,QAAS,CACP,CACEmE,GAAI,gBACJvC,MAAO,YAET,CACEuC,GAAI,eACJvC,MAAO,gBAET,CACEuC,GAAI,YACJvC,MAAO,oBAQrB,gBAAC,IAAY,KACX,gBAAC,IAAW,KACV,gBAAC,IAAI,CACH5B,QAnEmB,CACnC,CACEmE,GAAI,eACJvC,MAAO,eACPyC,KAAM,WAER,CAAEF,GAAI,YAAavC,MAAO,iBAAkByC,KAAM,SAClD,CAAEF,GAAI,UAAWvC,MAAO,iBAAkByC,KAAM,WAChD,CAAEF,GAAI,OAAQvC,MAAO,kBAAmByC,KAAM,UA4D9BxB,OAAQA,EACRmB,aAAc,SAAAC,GACZ,SAAKD,aAAaC,GAAG,WAAM,SAAKN,4BAO1C,gBAAC,IAAU,CACTd,OAAQA,EACRmB,aAAc,SAAAC,GACZ,SAAKD,aAAaC,GAAG,WAAM,SAAKN,uBAElCW,MAAOnB,EACPoB,OAAK,KAGT,2BACE,gBAAC,IAAc,CACbP,aAAc,SAAAC,GACZ,SAAKD,aAAaC,GAAG,WAAM,SAAKN,uBAElCd,OAAQA,EACR2B,cAAe,CAAC,YAAa,OAAQ,WAGxCpB,EAAU,gBAAC,IAAkB,MAAMU,KAAKW,YAAYvB,GAErD,uBAAKrB,UAAU,UACb,gBAAC,IAAU,CACTgB,OAAQA,EACRmB,aAAc,SAAAC,GACZ,SAAKD,aAAaC,GAAG,WAAM,SAAKN,uBAElCW,MAAOnB,QA3FV,gBAAC,IAAqB,OAoGzB,YAAAsB,YAAR,SAAoBvB,GAApB,WACE,OAAwB,IAApBA,EAASwB,OAET,gBAAC,IAAU,CAAC7C,UAAU,QAAQ8C,QAAS,IAAkBC,MACvD,gBAAC,IAAc,CAACC,KAAM,MACtB,gBAAC,IAAK,CAACC,aAAa,KAAKC,KAAK,MAAI,cAGlC,gBAAC,IAAc,iDAQnB,sCACa,sBACXlD,UAAU,4BAEV,6BACE,wCAAoB,WAClB,uCACA,wCACA,qCACA,0CACA,oCACA,6BAGJ,6BACGqB,EAAS8B,KAAI,SAACC,EAASnF,GAAM,SAAKoF,UAAUD,EAASnF,SAMtD,YAAAqF,aAAR,SAAqBF,GACnB,GAAInB,KAAK/C,MAAMsC,iBAAiB+B,SAASH,EAAQd,IAC/C,OAAO,wBAAMtC,UAAU,gCAEzB,OAAQoD,EAAQI,eACd,KAAK,IAAoBC,UACvB,OACE,4BACE,gBAAC,IAAe,CAACzD,UAAU,mB,cAGjC,KAAK,IAAoB0D,aACvB,OACE,4BACE,gBAAC,IAAqB,CAAC1D,UAAU,kB,aAGvC,KAAK,IAAoBoB,YACvB,OACE,4BACE,gBAAC,IAAc,CAACpB,UAAU,sB,mBAM5B,YAAAqD,UAAR,SAAkBD,EAA4BO,GAC5C,OACE,wCACsBP,EAAQQ,UAAS,IAAIR,EAAQvC,KAAI,KAAKuC,EAAQA,QAClEvE,IAAK8E,GAEL,0BAAKP,EAAQQ,WACb,0BAAKR,EAAQvC,MACb,0BACE,gBAAC,IAAI,CACHmB,GAAI,YACF,IAAM6B,WACN,CACED,UAAWR,EAAQQ,UACnBC,WAAYT,EAAQvC,MAEtB,CACEuC,QAASA,EAAQA,WAIpBA,EAAQA,UAGb,0BAAK,EAAOA,EAAQU,YAAYC,WAChC,0BAAK9B,KAAKqB,aAAaF,IACvB,0BACE,uBAAKpD,UAAU,kBACb,2BAAMiC,KAAK+B,cAAcZ,QAO3B,YAAAY,cAAR,SAAsBZ,GAAtB,WACQa,EACJ,gBAAC,IAAY,CACXpF,IAAI,UACJqF,UACE,gBAAC,IAAI,CACHlC,GAAI,YACF,IAAMmC,UACN,GACA,CACEP,UAAWR,EAAQQ,UACnB/C,KAAMuC,EAAQvC,KACduC,QAASA,EAAQA,WAEpB,sBAQHgB,EAAkB,SAACC,GAAwB,OAC/C,gBAAC,IAAY,CACXnE,QAAS,WACP,SAAKoE,oBAAoBlB,EAAS,IAAoBK,YAExDY,WAAYA,EACZxF,IAAI,WAAS,YAMX0F,EAAiB,SAACF,GAAwB,OAC9C,gBAAC,IAAY,CACXnE,QAAS,WACP,SAAKoE,oBAAoBlB,EAAS,IAAoBM,eAExDW,WAAYA,EACZrE,UAAU,gBACVnB,IAAI,UAAQ,WAMhB,OAAQuE,EAAQI,eACd,KAAK,IAAoBC,UACvB,OACE,4BACE,gBAAC,IAAgB,CACfe,MAAO,CACLJ,GAAgB,GAChBG,GAAe,GACfN,MAKV,KAAK,IAAoBP,aACvB,OACE,4BACE,gBAAC,IAAgB,CACfc,MAAO,CACLJ,GAAgB,GAChBG,GAAe,GACfN,MAKV,KAAK,IAAoB7C,YACvB,OACE,4BACE,gBAAC,IAAM,CACLlB,QAAS,WACP,SAAKoE,oBAAoBlB,EAAS,IAAoBK,aAGxD,wCAEF,gBAAC,IAAgB,CAACe,MAAO,CAACD,GAAe,GAAQN,QAMnD,YAAAK,oBAAR,SAA4BlB,EAASI,GAArC,WAEEvB,KAAKrC,SACH,CACE4B,iBAAkBS,KAAK/C,MAAMsC,iBAAiBiD,OAAO,CAACrB,EAAQd,OAEhE,WAEE,WAAqBoC,gBACnBtB,EAAQQ,UACRR,EAAQvC,KACRuC,EAAQA,QACRI,GAEC9D,MAAK,WAGJ,WAAqBiF,KAAK,CACxBf,UAAWR,EAAQQ,UACnB/C,KAAMuC,EAAQvC,KACduC,QAASA,EAAQA,UAChB1D,MAAK,SAAAC,GACN,IAAMiF,EAAiBjF,EAAOE,KAAKA,KAAK,GAClCgF,EAAiB,EAAI,EAAK3F,MAAMmC,UAChCyD,EAAMD,EAAeE,WACzB,SAAAC,GAAK,OAAAA,EAAE1C,KAAOsC,EAAetC,MAE/BuC,EAAeC,GAAOF,EAEtB,EAAKhF,SAAS,CACZyB,SAAUwD,EACVrD,iBAAkB,EAAKtC,MAAMsC,iBAAiByD,QAC5C,SAAAC,GAAK,OAAAA,GAAKN,EAAetC,cAKhC6C,OAAM,SAAAC,GACL,EAAKxF,SAAS,CACZ4B,iBAAkB,EAAKtC,MAAMsC,iBAAiByD,QAC5C,SAAAC,GAAK,OAAAA,GAAK9B,EAAQd,MAEpBZ,OAAQ,EAAKxC,MAAMwC,OAAO+C,OAAO,CAC/B3B,QAAS,SACT/C,MAAO,cAAcqF,EAAMxD,SAASyD,OACpCC,YACE,iDACclC,EAAQQ,UAAS,IAC5BR,EAAQvC,KAAI,IAAIuC,EAAQA,QAAO,eAO1C,YAAAtB,iBAAR,sBACEG,KAAKrC,SAAS,CAAE2B,SAAS,IAAQ,WAC/B,WAAqBoD,KAAK,EAAKzF,MAAM8B,QAAQtB,MAAK,SAAAC,GAChD,SAAKC,SAAS,CACZyB,SAAU1B,EAAOE,KAAKA,KACtByB,UAAW3B,EAAOE,KAAK0F,KAAK9C,MAC5BlB,SAAS,EACTC,iBAAkB,YAM1B,sBAAY,2BAAY,C,IAAxB,WACE,OAAO,IAAYgE,qB,gCAGrB,sBAAY,yBAAU,C,IAAtB,WACE,OAAO,YAAgB,W,gCAE3B,EA1aA,CAAqC,aA4atB,sBAAWC,GAC1B,IAEIC,uBAAuBjF,YAAc,yBAErCiF,uBAAuBhF,aAAe,CAAE,YAAe,GAAI,YAAe,yBAA0B,MAAS,CAAE,oBAAuB,CAAE,aAAgB,KAAM,YAAe,GAAI,KAAQ,sBAAuB,UAAY,EAAO,KAAQ,CAAE,KAAQ,kCAE9M,oBAA5BC,0BAEPA,wBAAwB,6FAA+F,CAAEC,WAAY8E,uBAAuBhF,aAAcG,KAAM,yBAA0BC,KAAM,8FAExN,MAAOC","file":"js/settings.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".toolbar {\\n  padding-bottom: 16px;\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.certified-icon {\\n  color: var(--pf-global--success-color--100); }\\n\\n.rejected-icon {\\n  color: var(--pf-global--danger-color--100); }\\n\\n.needs-review-icon {\\n  color: var(--pf-global--info-color--100); }\\n\\n.control-column {\\n  display: flex;\\n  justify-content: flex-end;\\n  align-items: center; }\\n\\n.footer {\\n  padding-top: 16px; }\\n\\n.updating-spinner {\\n  color: var(--pf-global--info-color--100); }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./certification-dashboard.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./certification-dashboard.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./certification-dashboard.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ClipboardCopy, Button } from '@patternfly/react-core';\n\nimport { BaseHeader, Main } from '../../components';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    (window as any).insights.chrome.auth.getOfflineToken().then(result => {\n      this.setState({ tokenData: result.data });\n    });\n  }\n\n  render() {\n    const { tokenData } = this.state;\n\n    return (\n      <React.Fragment>\n        <BaseHeader title='Token management'></BaseHeader>\n        <Main>\n          <Section className='body pf-c-content'>\n            <h2>Offline token</h2>\n            <p>\n              Use this token to authenticate the <code>ansible-galaxy</code>{' '}\n              client.\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <Button onClick={() => this.loadToken()}>Load token</Button>\n            )}\n            <h2>Manage tokens</h2>\n            To remove an existing token, visit{' '}\n            <a\n              href='https://sso.redhat.com/auth/realms/redhat-external/account/'\n              target='_blank'\n            >\n              Red Hat SSO account managment\n            </a>\n            .\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    (window as any).insights.chrome.auth\n      // doOffline causes the page to refresh and will make the data\n      // available to getOfflineToken() when the component mounts after\n      // the reload\n      .doOffline();\n  }\n}\n\nexport default withRouter(TokenPage);\ntry {\n    // @ts-ignore\n    tokeninsights.displayName = \"tokeninsights\";\n    // @ts-ignore\n    tokeninsights.__docgenInfo = { \"description\": \"\", \"displayName\": \"tokeninsights\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<TokenPage>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/token/token-insights.tsx#tokeninsights\"] = { docgenInfo: tokeninsights.__docgenInfo, name: \"tokeninsights\", path: \"src/containers/token/token-insights.tsx#tokeninsights\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport * as moment from 'moment';\nimport {\n  withRouter,\n  RouteComponentProps,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport { BaseHeader, Main } from '../../components';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\n\nimport {\n  InfoCircleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  WarningTriangleIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  CollectionVersionAPI,\n  CollectionVersion,\n  CertificationStatus,\n  ActiveUserAPI,\n  MeType,\n} from '../../api';\nimport { ParamHelper } from '../../utilities';\nimport {\n  LoadingPageWithHeader,\n  StatefulDropdown,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  Sort,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortFieldType,\n} from '../../components';\nimport { Paths, formatPath } from '../../paths';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: string[];\n  redirect: string;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['certification']) {\n      params['certification'] = CertificationStatus.needsReview;\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      redirect: undefined,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    ActiveUserAPI.isPartnerEngineer().then(response => {\n      const me: MeType = response.data;\n      if (!me.is_partner_engineer) {\n        this.setState({ redirect: Paths.notFound });\n      } else {\n        this.queryCollections();\n      }\n    });\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, redirect } = this.state;\n\n    if (redirect) {\n      return <Redirect to={redirect}></Redirect>;\n    }\n\n    const sortOptions: SortFieldType[] = [\n      {\n        id: 'pulp_created',\n        title: 'Date created',\n        type: 'numeric',\n      },\n      { id: 'namespace', title: 'Namespace name', type: 'alpha' },\n      { id: 'version', title: 'Version number', type: 'numeric' },\n      { id: 'name', title: 'Collection name', type: 'alpha' },\n    ];\n\n    if (!versions) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n    return (\n      <React.Fragment>\n        <BaseHeader title='Certification dashboard'></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={i => this.closeAlert(i)}\n        />\n        <Main>\n          <Section className='body'>\n            <div className='toolbar'>\n              <Toolbar>\n                <ToolbarGroup>\n                  <ToolbarItem>\n                    <CompoundFilter\n                      updateParams={p =>\n                        this.updateParams(p, () => this.queryCollections())\n                      }\n                      params={params}\n                      filterConfig={[\n                        {\n                          id: 'namespace',\n                          title: 'Namespace',\n                        },\n                        {\n                          id: 'name',\n                          title: 'Collection Name',\n                        },\n                        {\n                          id: 'certification',\n                          title: 'Certification Status',\n                          inputType: 'select',\n                          options: [\n                            {\n                              id: 'not_certified',\n                              title: 'Rejected',\n                            },\n                            {\n                              id: 'needs_review',\n                              title: 'Needs Review',\n                            },\n                            {\n                              id: 'certified',\n                              title: 'Certified',\n                            },\n                          ],\n                        },\n                      ]}\n                    />\n                  </ToolbarItem>\n                </ToolbarGroup>\n                <ToolbarGroup>\n                  <ToolbarItem>\n                    <Sort\n                      options={sortOptions}\n                      params={params}\n                      updateParams={p =>\n                        this.updateParams(p, () => this.queryCollections())\n                      }\n                    />\n                  </ToolbarItem>\n                </ToolbarGroup>\n              </Toolbar>\n\n              <Pagination\n                params={params}\n                updateParams={p =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                count={itemCount}\n                isTop\n              />\n            </div>\n            <div>\n              <AppliedFilters\n                updateParams={p =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                params={params}\n                ignoredParams={['page_size', 'page', 'sort']}\n              />\n            </div>\n            {loading ? <LoadingPageSpinner /> : this.renderTable(versions)}\n\n            <div className='footer'>\n              <Pagination\n                params={params}\n                updateParams={p =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                count={itemCount}\n              />\n            </div>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions) {\n    if (versions.length === 0) {\n      return (\n        <EmptyState className='empty' variant={EmptyStateVariant.full}>\n          <EmptyStateIcon icon={WarningTriangleIcon} />\n          <Title headingLevel='h2' size='lg'>\n            No matches\n          </Title>\n          <EmptyStateBody>\n            Please try adjusting your search query.\n          </EmptyStateBody>\n        </EmptyState>\n      );\n    }\n\n    return (\n      <table\n        aria-label='Collection versions'\n        className='content-table pf-c-table'\n      >\n        <thead>\n          <tr aria-labelledby='headers'>\n            <th>Namespace</th>\n            <th>Collection</th>\n            <th>Version</th>\n            <th>Date created</th>\n            <th>Status</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version.id)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    switch (version.certification) {\n      case CertificationStatus.certified:\n        return (\n          <span>\n            <CheckCircleIcon className='certified-icon' /> Certified\n          </span>\n        );\n      case CertificationStatus.notCertified:\n        return (\n          <span>\n            <ExclamationCircleIcon className='rejected-icon' /> Rejected\n          </span>\n        );\n      case CertificationStatus.needsReview:\n        return (\n          <span>\n            <InfoCircleIcon className='needs-review-icon' /> Needs Review\n          </span>\n        );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr\n        aria-labelledby={`${version.namespace}.${version.name} v${version.version}`}\n        key={index}\n      >\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collection,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n        </td>\n        <td>{moment(version.created_at).fromNow()}</td>\n        <td>{this.renderStatus(version)}</td>\n        <td>\n          <div className='control-column'>\n            <div>{this.renderButtons(version)}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            View Import Logs\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, CertificationStatus.certified)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        Certify\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, CertificationStatus.notCertified)\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        Reject\n      </DropdownItem>\n    );\n\n    switch (version.certification) {\n      case CertificationStatus.certified:\n        return (\n          <span>\n            <StatefulDropdown\n              items={[\n                certifyDropDown(true),\n                rejectDropDown(false),\n                importsLink,\n              ]}\n            />\n          </span>\n        );\n      case CertificationStatus.notCertified:\n        return (\n          <span>\n            <StatefulDropdown\n              items={[\n                certifyDropDown(false),\n                rejectDropDown(true),\n                importsLink,\n              ]}\n            />\n          </span>\n        );\n      case CertificationStatus.needsReview:\n        return (\n          <span>\n            <Button\n              onClick={() =>\n                this.updateCertification(version, CertificationStatus.certified)\n              }\n            >\n              <span>Certify</span>\n            </Button>\n            <StatefulDropdown items={[rejectDropDown(false), importsLink]} />\n          </span>\n        );\n    }\n  }\n\n  private updateCertification(version, certification) {\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: this.state.updatingVersions.concat([version.id]),\n      },\n      () =>\n        // Perform the PUT request\n        CollectionVersionAPI.setCertifiation(\n          version.namespace,\n          version.name,\n          version.version,\n          certification,\n        )\n          .then(() =>\n            // Since pulp doesn't reply with the new object, perform a\n            // second query to get the updated data\n            CollectionVersionAPI.list({\n              namespace: version.namespace,\n              name: version.name,\n              version: version.version,\n            }).then(result => {\n              const updatedVersion = result.data.data[0];\n              const newVersionList = [...this.state.versions];\n              const ind = newVersionList.findIndex(\n                x => x.id === updatedVersion.id,\n              );\n              newVersionList[ind] = updatedVersion;\n\n              this.setState({\n                versions: newVersionList,\n                updatingVersions: this.state.updatingVersions.filter(\n                  v => v != updatedVersion.id,\n                ),\n              });\n            }),\n          )\n          .catch(error => {\n            this.setState({\n              updatingVersions: this.state.updatingVersions.filter(\n                v => v != version.id,\n              ),\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: `API Error: ${error.response.status}`,\n                description:\n                  `Could not update the certification ` +\n                  `status for ${version.namespace}.` +\n                  `${version.name}.${version.version}.`,\n              }),\n            });\n          }),\n    );\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then(result =>\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        }),\n      ),\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CertificationDashboard);\ntry {\n    // @ts-ignore\n    certificationdashboard.displayName = \"certificationdashboard\";\n    // @ts-ignore\n    certificationdashboard.__docgenInfo = { \"description\": \"\", \"displayName\": \"certificationdashboard\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CertificationDashboard>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/certification-dashboard/certification-dashboard.tsx#certificationdashboard\"] = { docgenInfo: certificationdashboard.__docgenInfo, name: \"certificationdashboard\", path: \"src/containers/certification-dashboard/certification-dashboard.tsx#certificationdashboard\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
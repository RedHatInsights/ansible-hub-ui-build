{"version":3,"sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.scss","webpack:///./src/containers/certification-dashboard/certification-dashboard.scss?0af1","webpack:///./src/containers/token/token.tsx","webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","state","tokenData","componentDidMount","window","insights","chrome","auth","getOfflineToken","then","result","setState","data","render","title","className","refresh_token","onClick","loadToken","href","target","doOffline","TokenPage","params","parseParamString","location","search","needsReview","versions","itemCount","loading","updatingVersions","redirect","get","response","is_partner_engineer","queryCollections","notFound","to","updateParams","p","filterConfig","id","inputType","count","isTop","ignoredParams","this","renderTable","length","variant","full","icon","headingLevel","size","map","version","renderRow","renderStatus","includes","certification","certified","notCertified","index","namespace","name","collection","created_at","fromNow","renderButtons","importsLink","component","myImports","certifyDropDown","isDisabled","updateCertification","rejectDropDown","items","concat","setCertifiation","list","updatedVersion","newVersionList","ind","findIndex","x","filter","v","meta","updateParamsMixin","CertificationDashboard"],"mappings":"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","file":"js/settings.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".toolbar {\\n  padding-bottom: 16px;\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.certified-icon {\\n  color: var(--pf-global--success-color--100); }\\n\\n.rejected-icon {\\n  color: var(--pf-global--danger-color--100); }\\n\\n.needs-review-icon {\\n  color: var(--pf-global--info-color--100); }\\n\\n.control-column {\\n  display: flex;\\n  justify-content: flex-end;\\n  align-items: center; }\\n\\n.footer {\\n  padding-top: 16px; }\\n\\n.updating-spinner {\\n  color: var(--pf-global--info-color--100); }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./certification-dashboard.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./certification-dashboard.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./certification-dashboard.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\nimport { ClipboardCopy, Button } from '@patternfly/react-core';\n\nimport { BaseHeader } from '../../components';\n\ninterface IState {\n    tokenData: {\n        access_token: string;\n        expires_in: number;\n        id_token: string;\n        refresh_expires_in: number;\n        refresh_token: string;\n        scope: string;\n        session_state: string;\n        token_type: string;\n    };\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tokenData: undefined,\n        };\n    }\n\n    componentDidMount() {\n        // this function will fail if chrome.auth.doOffline() hasn't been called\n        (window as any).insights.chrome.auth.getOfflineToken().then(result => {\n            this.setState({ tokenData: result.data });\n        });\n    }\n\n    render() {\n        const { tokenData } = this.state;\n\n        return (\n            <React.Fragment>\n                <BaseHeader title='Token management'></BaseHeader>\n                <Main>\n                    <Section className='body pf-c-content'>\n                        <h2>Offline token</h2>\n                        <p>\n                            Use this token to authenticate the{' '}\n                            <code>ansible-galaxy</code> client.\n                        </p>\n                        {tokenData ? (\n                            <div>\n                                <ClipboardCopy>\n                                    {tokenData.refresh_token}\n                                </ClipboardCopy>\n                            </div>\n                        ) : (\n                            <Button onClick={() => this.loadToken()}>\n                                Load token\n                            </Button>\n                        )}\n                        <h2>Manage tokens</h2>\n                        To remove an existing token, visit{' '}\n                        <a\n                            href='https://sso.redhat.com/auth/realms/redhat-external/account/'\n                            target='_blank'\n                        >\n                            Red Hat SSO account managment\n                        </a>\n                        .\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private loadToken() {\n        (window as any).insights.chrome.auth\n            // doOffline cuases the page to refresh and will make the data\n            // available to getOfflineToken() when the component mounts after\n            // the reload\n            .doOffline();\n    }\n}\n\nexport default withRouter(TokenPage);\n","import * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport * as moment from 'moment';\nimport {\n    withRouter,\n    RouteComponentProps,\n    Link,\n    Redirect,\n} from 'react-router-dom';\nimport { BaseHeader } from '../../components';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\nimport {\n    Toolbar,\n    ToolbarGroup,\n    ToolbarItem,\n    Button,\n    DropdownItem,\n    EmptyState,\n    EmptyStateIcon,\n    Title,\n    EmptyStateBody,\n    EmptyStateVariant,\n} from '@patternfly/react-core';\n\nimport {\n    InfoCircleIcon,\n    ExclamationCircleIcon,\n    CheckCircleIcon,\n    WarningTriangleIcon,\n} from '@patternfly/react-icons';\n\nimport {\n    CollectionVersionAPI,\n    CollectionVersion,\n    CertificationStatus,\n    MeAPI,\n    MeType,\n} from '../../api';\nimport { ParamHelper } from '../../utilities';\nimport {\n    LoadingPageWithHeader,\n    StatefulDropdown,\n    CompoundFilter,\n    LoadingPageSpinner,\n    AppliedFilters,\n    Pagination,\n    Sort,\n} from '../../components';\nimport { Paths, formatPath } from '../../paths';\n\ninterface IState {\n    params: {\n        certification?: string;\n        namespace?: string;\n        collection?: string;\n        page?: number;\n        page_size?: number;\n    };\n    versions: CollectionVersion[];\n    itemCount: number;\n    loading: boolean;\n    updatingVersions: string[];\n    redirect: string;\n}\n\nclass CertificationDashboard extends React.Component<\n    RouteComponentProps,\n    IState\n> {\n    constructor(props) {\n        super(props);\n\n        const params = ParamHelper.parseParamString(props.location.search, [\n            'page',\n            'page_size',\n        ]);\n\n        if (!params['page_size']) {\n            params['page_size'] = 10;\n        }\n\n        if (!params['sort']) {\n            params['sort'] = '-pulp_created';\n        }\n\n        if (!params['certification']) {\n            params['certification'] = CertificationStatus.needsReview;\n        }\n\n        this.state = {\n            versions: undefined,\n            itemCount: 0,\n            params: params,\n            loading: true,\n            updatingVersions: [],\n            redirect: undefined,\n        };\n    }\n\n    componentDidMount() {\n        MeAPI.get().then(response => {\n            const me: MeType = response.data;\n            if (!me.is_partner_engineer) {\n                this.setState({ redirect: Paths.notFound });\n            } else {\n                this.queryCollections();\n            }\n        });\n    }\n\n    render() {\n        const { versions, params, itemCount, loading, redirect } = this.state;\n\n        if (redirect) {\n            return <Redirect to={redirect}></Redirect>;\n        }\n\n        const sortOptions = [\n            {\n                id: 'pulp_created',\n                title: 'Date created',\n            },\n            { id: 'namespace', title: 'Namespace name' },\n            { id: 'version', title: 'Version number' },\n            { id: 'name', title: 'Collection name' },\n        ];\n\n        if (!versions) {\n            return <LoadingPageWithHeader></LoadingPageWithHeader>;\n        }\n        return (\n            <React.Fragment>\n                <BaseHeader title='Certification dashboard'></BaseHeader>\n                <Main>\n                    <Section className='body'>\n                        <div className='toolbar'>\n                            <Toolbar>\n                                <ToolbarGroup>\n                                    <ToolbarItem>\n                                        <CompoundFilter\n                                            updateParams={p =>\n                                                this.updateParams(p, () =>\n                                                    this.queryCollections(),\n                                                )\n                                            }\n                                            params={params}\n                                            filterConfig={[\n                                                {\n                                                    id: 'namespace',\n                                                    title: 'Namespace',\n                                                },\n                                                {\n                                                    id: 'name',\n                                                    title: 'Collection Name',\n                                                },\n                                                {\n                                                    id: 'certification',\n                                                    title:\n                                                        'Certification Status',\n                                                    inputType: 'select',\n                                                    options: [\n                                                        {\n                                                            id: 'not_certified',\n                                                            title: 'Rejected',\n                                                        },\n                                                        {\n                                                            id: 'needs_review',\n                                                            title:\n                                                                'Needs Review',\n                                                        },\n                                                        {\n                                                            id: 'certified',\n                                                            title: 'Certified',\n                                                        },\n                                                    ],\n                                                },\n                                            ]}\n                                        />\n                                    </ToolbarItem>\n                                </ToolbarGroup>\n                                <ToolbarGroup>\n                                    <ToolbarItem>\n                                        <Sort\n                                            options={sortOptions}\n                                            params={params}\n                                            updateParams={p =>\n                                                this.updateParams(p, () =>\n                                                    this.queryCollections(),\n                                                )\n                                            }\n                                        />\n                                    </ToolbarItem>\n                                </ToolbarGroup>\n                            </Toolbar>\n\n                            <Pagination\n                                params={params}\n                                updateParams={p =>\n                                    this.updateParams(p, () =>\n                                        this.queryCollections(),\n                                    )\n                                }\n                                count={itemCount}\n                                isTop\n                            />\n                        </div>\n                        <div>\n                            <AppliedFilters\n                                updateParams={p =>\n                                    this.updateParams(p, () =>\n                                        this.queryCollections(),\n                                    )\n                                }\n                                params={params}\n                                ignoredParams={['page_size', 'page', 'sort']}\n                            />\n                        </div>\n                        {loading ? (\n                            <LoadingPageSpinner />\n                        ) : (\n                            this.renderTable(versions)\n                        )}\n\n                        <div className='footer'>\n                            <Pagination\n                                params={params}\n                                updateParams={p =>\n                                    this.updateParams(p, () =>\n                                        this.queryCollections(),\n                                    )\n                                }\n                                count={itemCount}\n                            />\n                        </div>\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private renderTable(versions) {\n        if (versions.length === 0) {\n            return (\n                <EmptyState className='empty' variant={EmptyStateVariant.full}>\n                    <EmptyStateIcon icon={WarningTriangleIcon} />\n                    <Title headingLevel='h2' size='lg'>\n                        No matches\n                    </Title>\n                    <EmptyStateBody>\n                        Please try adjusting your search query.\n                    </EmptyStateBody>\n                </EmptyState>\n            );\n        }\n\n        return (\n            <table\n                aria-label='Collection versions'\n                className='content-table pf-c-table'\n            >\n                <thead>\n                    <tr aria-labelledby='headers'>\n                        <th>Namespace</th>\n                        <th>Collection</th>\n                        <th>Version</th>\n                        <th>Date created</th>\n                        <th>Status</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {versions.map((version, i) => this.renderRow(version, i))}\n                </tbody>\n            </table>\n        );\n    }\n\n    private renderStatus(version: CollectionVersion) {\n        if (this.state.updatingVersions.includes(version.id)) {\n            return <span className='fa fa-lg fa-spin fa-spinner' />;\n        }\n        switch (version.certification) {\n            case CertificationStatus.certified:\n                return (\n                    <span>\n                        <CheckCircleIcon className='certified-icon' /> Certified\n                    </span>\n                );\n            case CertificationStatus.notCertified:\n                return (\n                    <span>\n                        <ExclamationCircleIcon className='rejected-icon' />{' '}\n                        Rejected\n                    </span>\n                );\n            case CertificationStatus.needsReview:\n                return (\n                    <span>\n                        <InfoCircleIcon className='needs-review-icon' /> Needs\n                        Review\n                    </span>\n                );\n        }\n    }\n\n    private renderRow(version: CollectionVersion, index) {\n        return (\n            <tr\n                aria-labelledby={`${version.namespace}.${version.name} v${version.version}`}\n                key={index}\n            >\n                <td>{version.namespace}</td>\n                <td>{version.name}</td>\n                <td>\n                    <Link\n                        to={formatPath(\n                            Paths.collection,\n                            {\n                                namespace: version.namespace,\n                                collection: version.name,\n                            },\n                            {\n                                version: version.version,\n                            },\n                        )}\n                    >\n                        {version.version}\n                    </Link>\n                </td>\n                <td>{moment(version.created_at).fromNow()}</td>\n                <td>{this.renderStatus(version)}</td>\n                <td>\n                    <div className='control-column'>\n                        <div>{this.renderButtons(version)}</div>\n                    </div>\n                </td>\n            </tr>\n        );\n    }\n\n    private renderButtons(version: CollectionVersion) {\n        const importsLink = (\n            <DropdownItem\n                key='imports'\n                component={\n                    <Link\n                        to={formatPath(\n                            Paths.myImports,\n                            {},\n                            {\n                                namespace: version.namespace,\n                                name: version.name,\n                                version: version.version,\n                            },\n                        )}\n                    >\n                        View Import Logs\n                    </Link>\n                }\n            />\n        );\n\n        const certifyDropDown = (isDisabled: boolean) => (\n            <DropdownItem\n                onClick={() =>\n                    this.updateCertification(\n                        version,\n                        CertificationStatus.certified,\n                    )\n                }\n                isDisabled={isDisabled}\n                key='certify'\n            >\n                Certify\n            </DropdownItem>\n        );\n\n        const rejectDropDown = (isDisabled: boolean) => (\n            <DropdownItem\n                onClick={() =>\n                    this.updateCertification(\n                        version,\n                        CertificationStatus.notCertified,\n                    )\n                }\n                isDisabled={isDisabled}\n                className='rejected-icon'\n                key='reject'\n            >\n                Reject\n            </DropdownItem>\n        );\n\n        switch (version.certification) {\n            case CertificationStatus.certified:\n                return (\n                    <span>\n                        <StatefulDropdown\n                            items={[\n                                certifyDropDown(true),\n                                rejectDropDown(false),\n                                importsLink,\n                            ]}\n                        />\n                    </span>\n                );\n            case CertificationStatus.notCertified:\n                return (\n                    <span>\n                        <StatefulDropdown\n                            items={[\n                                certifyDropDown(false),\n                                rejectDropDown(true),\n                                importsLink,\n                            ]}\n                        />\n                    </span>\n                );\n            case CertificationStatus.needsReview:\n                return (\n                    <span>\n                        <Button\n                            onClick={() =>\n                                this.updateCertification(\n                                    version,\n                                    CertificationStatus.certified,\n                                )\n                            }\n                        >\n                            <span>Certify</span>\n                        </Button>\n                        <StatefulDropdown\n                            items={[rejectDropDown(false), importsLink]}\n                        />\n                    </span>\n                );\n        }\n    }\n\n    private updateCertification(version, certification) {\n        // Set the selected version to loading\n        this.setState(\n            {\n                updatingVersions: this.state.updatingVersions.concat([\n                    version.id,\n                ]),\n            },\n            () =>\n                // TODO: add error checking\n                // Perform the PUT request\n                CollectionVersionAPI.setCertifiation(\n                    version.namespace,\n                    version.name,\n                    version.version,\n                    certification,\n                ).then(() =>\n                    // Since pulp doesn't reply with the new object, perform a\n                    // second query to get the updated data\n                    CollectionVersionAPI.list({\n                        namespace: version.namespace,\n                        name: version.name,\n                        version: version.version,\n                    }).then(result => {\n                        const updatedVersion = result.data.data[0];\n                        const newVersionList = [...this.state.versions];\n                        const ind = newVersionList.findIndex(\n                            x => x.id === updatedVersion.id,\n                        );\n                        newVersionList[ind] = updatedVersion;\n\n                        this.setState({\n                            versions: newVersionList,\n                            updatingVersions: this.state.updatingVersions.filter(\n                                v => v != updatedVersion.id,\n                            ),\n                        });\n                    }),\n                ),\n        );\n    }\n\n    private queryCollections() {\n        this.setState({ loading: true }, () =>\n            CollectionVersionAPI.list(this.state.params).then(result =>\n                this.setState({\n                    versions: result.data.data,\n                    itemCount: result.data.meta.count,\n                    loading: false,\n                    updatingVersions: [],\n                }),\n            ),\n        );\n    }\n\n    private get updateParams() {\n        return ParamHelper.updateParamsMixin();\n    }\n}\n\nexport default withRouter(CertificationDashboard);\n"],"sourceRoot":""}
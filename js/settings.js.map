{"version":3,"sources":["webpack:///./src/containers/token/token.tsx"],"names":["props","state","tokenData","undefined","componentDidMount","window","insights","chrome","auth","getOfflineToken","then","result","setState","data","render","title","className","refresh_token","onClick","loadToken","href","target","doOffline","TokenPage"],"mappings":"6cAqBA,cACI,WAAYA,GAAZ,MACI,YAAMA,IAAM,K,OAEZ,EAAKC,MAAQ,CACTC,eAAWC,G,EAyDvB,OA9DwB,OASpB,YAAAC,kBAAA,sBAEKC,OAAeC,SAASC,OAAOC,KAAKC,kBAAkBC,MAAK,SAAAC,GACxD,EAAKC,SAAS,CAAEV,UAAWS,EAAOE,WAI1C,YAAAC,OAAA,sBACYZ,EAAA,WAAAA,UAER,OACI,gBAAC,WAAc,KACX,gBAAC,IAAU,CAACa,MAAM,qBAClB,gBAAC,OAAI,KACD,gBAAC,UAAO,CAACC,UAAU,qBACf,2CACA,yB,qCACuC,IACnC,8C,YAEHd,EACG,2BACI,gBAAC,IAAa,KACTA,EAAUe,gBAInB,gBAAC,IAAM,CAACC,QAAS,WAAM,SAAKC,cAAW,cAI3C,2C,qCACmC,IACnC,qBACIC,KAAK,8DACLC,OAAO,UAAQ,iC,QAW/B,YAAAF,UAAR,WACKd,OAAeC,SAASC,OAAOC,KAI3Bc,aAEb,EA9DA,CAAwB,aAgET,sBAAWC","file":"js/settings.js","sourcesContent":["import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\nimport { ClipboardCopy, Button } from '@patternfly/react-core';\n\nimport { BaseHeader } from '../../components';\n\ninterface IState {\n    tokenData: {\n        access_token: string;\n        expires_in: number;\n        id_token: string;\n        refresh_expires_in: number;\n        refresh_token: string;\n        scope: string;\n        session_state: string;\n        token_type: string;\n    };\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tokenData: undefined,\n        };\n    }\n\n    componentDidMount() {\n        // this function will fail if chrome.auth.doOffline() hasn't been called\n        (window as any).insights.chrome.auth.getOfflineToken().then(result => {\n            this.setState({ tokenData: result.data });\n        });\n    }\n\n    render() {\n        const { tokenData } = this.state;\n\n        return (\n            <React.Fragment>\n                <BaseHeader title='Token Management'></BaseHeader>\n                <Main>\n                    <Section className='body pf-c-content'>\n                        <h2>Offline Token</h2>\n                        <p>\n                            Use this token to authenticate the{' '}\n                            <code>ansible-galaxy</code> client.\n                        </p>\n                        {tokenData ? (\n                            <div>\n                                <ClipboardCopy>\n                                    {tokenData.refresh_token}\n                                </ClipboardCopy>\n                            </div>\n                        ) : (\n                            <Button onClick={() => this.loadToken()}>\n                                Load Token\n                            </Button>\n                        )}\n                        <h2>Manage Tokens</h2>\n                        To remove an existing token, visit{' '}\n                        <a\n                            href='https://sso.redhat.com/auth/realms/redhat-external/account/'\n                            target='_blank'\n                        >\n                            Red Hat SSO account managment\n                        </a>\n                        .\n                    </Section>\n                </Main>\n            </React.Fragment>\n        );\n    }\n\n    private loadToken() {\n        (window as any).insights.chrome.auth\n            // doOffline cuases the page to refresh and will make the data\n            // available to getOfflineToken() when the component mounts after\n            // the reload\n            .doOffline();\n    }\n}\n\nexport default withRouter(TokenPage);\n"],"sourceRoot":""}
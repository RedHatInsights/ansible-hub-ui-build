{"version":3,"sources":["webpack:///./src/containers/certification-dashboard/certification-dashboard.scss","webpack:///./src/containers/certification-dashboard/certification-dashboard.scss?13e2","webpack:///./src/containers/token/token-insights.tsx","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/info-circle-icon.js","webpack:///./src/containers/certification-dashboard/certification-dashboard.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","state","tokenData","componentDidMount","window","insights","chrome","auth","getOfflineToken","then","result","setState","data","render","this","title","className","refresh_token","onClick","loadToken","href","target","doOffline","TokenPage","tokeninsights","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error","CheckCircleIcon","createIcon","height","width","svgPath","yOffset","xOffset","InfoCircleIcon","params","parseParamString","location","search","versions","itemCount","loading","updatingVersions","redirect","alerts","context","user","model_permissions","move_collection","queryCollections","notFound","Redirect","to","closeAlert","Toolbar","ToolbarGroup","ToolbarItem","updateParams","p","filterConfig","id","inputType","NOTCERTIFIED","NEEDSREVIEW","CERTIFIED","count","isTop","ignoredParams","renderTable","length","EmptyState","variant","full","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","headers","type","map","version","renderRow","renderStatus","includes","repository_list","style","color","index","namespace","Link","collectionByRepo","collection","repo","moment","created_at","fromNow","renderButtons","importsLink","DropdownItem","component","myImports","certifyDropDown","isDisabled","originalRepo","updateCertification","rejectDropDown","items","Button","destinationRepo","setRepository","waitForUpdate","remove_task_id","catch","error","concat","response","status","description","taskId","get","Promise","r","setTimeout","list","meta","updateParamsMixin","withRouter","contextType","certificationdashboard"],"mappings":"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","file":"js/settings.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".certification-dasboard .toolbar{padding-bottom:16px;display:flex;justify-content:space-between}.certification-dasboard .control-column{display:flex;justify-content:flex-end;align-items:center}.certification-dasboard .footer{padding-top:16px}.certification-dasboard .updating-spinner{color:var(--pf-global--info-color--100)}\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./certification-dashboard.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { ClipboardCopy, Button } from '@patternfly/react-core';\n\nimport { BaseHeader, Main } from '../../components';\n\ninterface IState {\n  tokenData: {\n    access_token: string;\n    expires_in: number;\n    id_token: string;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n  };\n}\n\nclass TokenPage extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tokenData: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // this function will fail if chrome.auth.doOffline() hasn't been called\n    (window as any).insights.chrome.auth.getOfflineToken().then(result => {\n      this.setState({ tokenData: result.data });\n    });\n  }\n\n  render() {\n    const { tokenData } = this.state;\n\n    return (\n      <React.Fragment>\n        <BaseHeader title='Token management'></BaseHeader>\n        <Main>\n          <Section className='body pf-c-content'>\n            <h2>Offline token</h2>\n            <p>\n              Use this token to authenticate the <code>ansible-galaxy</code>{' '}\n              client.\n            </p>\n            {tokenData ? (\n              <div>\n                <ClipboardCopy>{tokenData.refresh_token}</ClipboardCopy>\n              </div>\n            ) : (\n              <Button onClick={() => this.loadToken()}>Load token</Button>\n            )}\n            <h2>Manage tokens</h2>\n            To remove an existing token, visit{' '}\n            <a\n              href='https://sso.redhat.com/auth/realms/redhat-external/account/'\n              target='_blank'\n            >\n              Red Hat SSO account managment\n            </a>\n            .\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadToken() {\n    (window as any).insights.chrome.auth\n      // doOffline causes the page to refresh and will make the data\n      // available to getOfflineToken() when the component mounts after\n      // the reload\n      .doOffline();\n  }\n}\n\nexport default withRouter(TokenPage);\ntry {\n    // @ts-ignore\n    tokeninsights.displayName = \"tokeninsights\";\n    // @ts-ignore\n    tokeninsights.__docgenInfo = { \"description\": \"\", \"displayName\": \"tokeninsights\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<TokenPage>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/token/token-insights.tsx#tokeninsights\"] = { docgenInfo: tokeninsights.__docgenInfo, name: \"tokeninsights\", path: \"src/containers/token/token-insights.tsx#tokeninsights\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { createIcon } from '../createIcon';\n\nexport const CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n  transform: ''\n};\n\nexport const CheckCircleIcon = createIcon(CheckCircleIconConfig);\n\nexport default CheckCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const InfoCircleIconConfig = {\n  name: 'InfoCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z',\n  yOffset: 0,\n  xOffset: 0,\n  transform: ''\n};\n\nexport const InfoCircleIcon = createIcon(InfoCircleIconConfig);\n\nexport default InfoCircleIcon;","import * as React from 'react';\nimport './certification-dashboard.scss';\n\nimport * as moment from 'moment';\nimport {\n  withRouter,\n  RouteComponentProps,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport { BaseHeader, Main } from '../../components';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport {\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  DropdownItem,\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\n\nimport {\n  InfoCircleIcon,\n  ExclamationCircleIcon,\n  CheckCircleIcon,\n  WarningTriangleIcon,\n} from '@patternfly/react-icons';\n\nimport { CollectionVersionAPI, CollectionVersion, TaskAPI } from '../../api';\nimport { ParamHelper } from '../../utilities';\nimport {\n  LoadingPageWithHeader,\n  StatefulDropdown,\n  CompoundFilter,\n  LoadingPageSpinner,\n  AppliedFilters,\n  Pagination,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  SortTable,\n} from '../../components';\nimport { Paths, formatPath } from '../../paths';\nimport { Constants } from '../../constants';\nimport { AppContext } from '../../loaders/app-context';\n\ninterface IState {\n  params: {\n    certification?: string;\n    namespace?: string;\n    collection?: string;\n    page?: number;\n    page_size?: number;\n  };\n  alerts: AlertType[];\n  versions: CollectionVersion[];\n  itemCount: number;\n  loading: boolean;\n  updatingVersions: CollectionVersion[];\n  redirect: string;\n}\n\nclass CertificationDashboard extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = 10;\n    }\n\n    if (!params['sort']) {\n      params['sort'] = '-pulp_created';\n    }\n\n    if (!params['repository']) {\n      params['repository'] = 'staging';\n    }\n\n    this.state = {\n      versions: undefined,\n      itemCount: 0,\n      params: params,\n      loading: true,\n      updatingVersions: [],\n      redirect: undefined,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    if (\n      !this.context.user ||\n      !this.context.user.model_permissions.move_collection\n    ) {\n      this.setState({ redirect: Paths.notFound });\n    } else {\n      this.queryCollections();\n    }\n  }\n\n  render() {\n    const { versions, params, itemCount, loading, redirect } = this.state;\n\n    if (redirect) {\n      return <Redirect to={redirect}></Redirect>;\n    }\n\n    if (!versions) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n    return (\n      <React.Fragment>\n        <BaseHeader title='Certification dashboard'></BaseHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={i => this.closeAlert(i)}\n        />\n        <Main className='certification-dashboard'>\n          <Section className='body'>\n            <div className='toolbar'>\n              <Toolbar>\n                <ToolbarGroup>\n                  <ToolbarItem>\n                    <CompoundFilter\n                      updateParams={p =>\n                        this.updateParams(p, () => this.queryCollections())\n                      }\n                      params={params}\n                      filterConfig={[\n                        {\n                          id: 'namespace',\n                          title: 'Namespace',\n                        },\n                        {\n                          id: 'name',\n                          title: 'Collection Name',\n                        },\n                        {\n                          id: 'repository',\n                          title: 'Repository',\n                          inputType: 'select',\n                          options: [\n                            {\n                              id: Constants.NOTCERTIFIED,\n                              title: 'Rejected',\n                            },\n                            {\n                              id: Constants.NEEDSREVIEW,\n                              title: 'Needs Review',\n                            },\n                            {\n                              id: Constants.CERTIFIED,\n                              title: 'Certified',\n                            },\n                          ],\n                        },\n                      ]}\n                    />\n                  </ToolbarItem>\n                </ToolbarGroup>\n              </Toolbar>\n\n              <Pagination\n                params={params}\n                updateParams={p =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                count={itemCount}\n                isTop\n              />\n            </div>\n            <div>\n              <AppliedFilters\n                updateParams={p =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                params={params}\n                ignoredParams={['page_size', 'page', 'sort']}\n              />\n            </div>\n            {loading ? (\n              <LoadingPageSpinner />\n            ) : (\n              this.renderTable(versions, params)\n            )}\n\n            <div className='footer'>\n              <Pagination\n                params={params}\n                updateParams={p =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                count={itemCount}\n              />\n            </div>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderTable(versions, params) {\n    if (versions.length === 0) {\n      return (\n        <EmptyState className='empty' variant={EmptyStateVariant.full}>\n          <EmptyStateIcon icon={WarningTriangleIcon} />\n          <Title headingLevel='h2' size='lg'>\n            No matches\n          </Title>\n          <EmptyStateBody>\n            Please try adjusting your search query.\n          </EmptyStateBody>\n        </EmptyState>\n      );\n    }\n    let sortTableOptions = {\n      headers: [\n        {\n          title: 'Namespace',\n          type: 'alpha',\n          id: 'namespace',\n        },\n        {\n          title: 'Collection',\n          type: 'alpha',\n          id: 'collection',\n        },\n        {\n          title: 'Version',\n          type: 'number',\n          id: 'version',\n        },\n        {\n          title: 'Date created',\n          type: 'number',\n          id: 'pulp_created',\n        },\n        {\n          title: 'Status',\n          type: 'none',\n          id: 'status',\n        },\n        {\n          title: '',\n          type: 'none',\n          id: 'certify',\n        },\n      ],\n    };\n\n    return (\n      <table\n        aria-label='Collection versions'\n        className='content-table pf-c-table'\n      >\n        <SortTable\n          options={sortTableOptions}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () => this.queryCollections())\n          }\n        />\n        <tbody>\n          {versions.map((version, i) => this.renderRow(version, i))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private renderStatus(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return <span className='fa fa-lg fa-spin fa-spinner' />;\n    }\n    if (version.repository_list.includes(Constants.CERTIFIED)) {\n      return (\n        <span>\n          <CheckCircleIcon\n            style={{ color: 'var(--pf-global--success-color--100)' }}\n          />{' '}\n          Certified\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <ExclamationCircleIcon\n            style={{ color: 'var(--pf-global--danger-color--100)' }}\n          />{' '}\n          Rejected\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <InfoCircleIcon\n            style={{ color: 'var(--pf-global--info-color--100)' }}\n          />{' '}\n          Needs Review\n        </span>\n      );\n    }\n  }\n\n  private renderRow(version: CollectionVersion, index) {\n    return (\n      <tr\n        aria-labelledby={`${version.namespace}.${version.name} v${version.version}`}\n        key={index}\n      >\n        <td>{version.namespace}</td>\n        <td>{version.name}</td>\n        <td>\n          <Link\n            to={formatPath(\n              Paths.collectionByRepo,\n              {\n                namespace: version.namespace,\n                collection: version.name,\n                repo: version.repository_list[0],\n              },\n              {\n                version: version.version,\n              },\n            )}\n          >\n            {version.version}\n          </Link>\n        </td>\n        <td>{moment(version.created_at).fromNow()}</td>\n        <td>{this.renderStatus(version)}</td>\n        <td>\n          <div className='control-column'>\n            <div>{this.renderButtons(version)}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  private renderButtons(version: CollectionVersion) {\n    if (this.state.updatingVersions.includes(version)) {\n      return;\n    }\n    const importsLink = (\n      <DropdownItem\n        key='imports'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: version.namespace,\n                name: version.name,\n                version: version.version,\n              },\n            )}\n          >\n            View Import Logs\n          </Link>\n        }\n      />\n    );\n\n    const certifyDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(version, originalRepo, Constants.CERTIFIED)\n        }\n        isDisabled={isDisabled}\n        key='certify'\n      >\n        Certify\n      </DropdownItem>\n    );\n\n    const rejectDropDown = (isDisabled: boolean, originalRepo) => (\n      <DropdownItem\n        onClick={() =>\n          this.updateCertification(\n            version,\n            originalRepo,\n            Constants.NOTCERTIFIED,\n          )\n        }\n        isDisabled={isDisabled}\n        className='rejected-icon'\n        key='reject'\n      >\n        Reject\n      </DropdownItem>\n    );\n\n    if (version.repository_list.includes(Constants.CERTIFIED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(true, Constants.CERTIFIED),\n              rejectDropDown(false, Constants.CERTIFIED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NOTCERTIFIED)) {\n      return (\n        <span>\n          <StatefulDropdown\n            items={[\n              certifyDropDown(false, Constants.NOTCERTIFIED),\n              rejectDropDown(true, Constants.NOTCERTIFIED),\n              importsLink,\n            ]}\n          />\n        </span>\n      );\n    }\n    if (version.repository_list.includes(Constants.NEEDSREVIEW)) {\n      return (\n        <span>\n          <Button\n            onClick={() =>\n              this.updateCertification(\n                version,\n                Constants.NEEDSREVIEW,\n                Constants.CERTIFIED,\n              )\n            }\n          >\n            <span>Certify</span>\n          </Button>\n          <StatefulDropdown\n            items={[rejectDropDown(false, Constants.NEEDSREVIEW), importsLink]}\n          />\n        </span>\n      );\n    }\n  }\n\n  private updateCertification(version, originalRepo, destinationRepo) {\n    // Set the selected version to loading\n    this.setState(\n      {\n        updatingVersions: [],\n      },\n      () =>\n        CollectionVersionAPI.setRepository(\n          version.namespace,\n          version.name,\n          version.version,\n          originalRepo,\n          destinationRepo,\n        )\n          .then(result =>\n            // Since pulp doesn't reply with the new object, perform a\n            // second query to get the updated data\n            {\n              this.setState({\n                updatingVersions: [version],\n              });\n              this.waitForUpdate(result.data.remove_task_id, version);\n            },\n          )\n          .catch(error => {\n            this.setState({\n              updatingVersions: [],\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: `API Error: ${error.response.status}`,\n                description:\n                  `Could not update the certification ` +\n                  `status for ${version.namespace}.` +\n                  `${version.name}.${version.version}.`,\n              }),\n            });\n          }),\n    );\n  }\n\n  private waitForUpdate(result, version) {\n    const taskId = result;\n    return TaskAPI.get(taskId).then(async result => {\n      if (result.data.state === 'waiting' || result.data.state === 'running') {\n        await new Promise(r => setTimeout(r, 500));\n        this.waitForUpdate(taskId, version);\n      } else if (result.data.state === 'completed') {\n        return CollectionVersionAPI.list(this.state.params).then(\n          async result => {\n            this.setState({\n              versions: result.data.data,\n              updatingVersions: [],\n            });\n          },\n        );\n      } else {\n        this.setState({\n          updatingVersions: [],\n          alerts: this.state.alerts.concat({\n            variant: 'danger',\n            title: `API Error: 500`,\n            description:\n              `Could not update the certification ` +\n              `status for ${version.namespace}.` +\n              `${version.name}.${version.version}.`,\n          }),\n        });\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () =>\n      CollectionVersionAPI.list(this.state.params).then(result => {\n        this.setState({\n          versions: result.data.data,\n          itemCount: result.data.meta.count,\n          loading: false,\n          updatingVersions: [],\n        });\n      }),\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nexport default withRouter(CertificationDashboard);\n\nCertificationDashboard.contextType = AppContext;\ntry {\n    // @ts-ignore\n    certificationdashboard.displayName = \"certificationdashboard\";\n    // @ts-ignore\n    certificationdashboard.__docgenInfo = { \"description\": \"\", \"displayName\": \"certificationdashboard\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CertificationDashboard>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/certification-dashboard/certification-dashboard.tsx#certificationdashboard\"] = { docgenInfo: certificationdashboard.__docgenInfo, name: \"certificationdashboard\", path: \"src/containers/certification-dashboard/certification-dashboard.tsx#certificationdashboard\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
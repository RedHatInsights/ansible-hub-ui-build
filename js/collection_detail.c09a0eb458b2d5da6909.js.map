{"version":3,"sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.scss","webpack:///./src/containers/collection-detail/collection-detail.scss?14b9","webpack:///./src/containers/collection-detail/collection-detail.tsx","webpack:///./src/containers/collection-detail/collection-content.tsx","webpack:///./src/containers/collection-detail/collection-docs.tsx","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"names":["loadCollection","repo","forceReload","callback","getCached","this","props","match","params","state","then","result","setState","collection","catch","history","push","notFound","module","exports","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","parseParamString","location","search","componentDidMount","context","selectedRepo","render","name","charAt","toUpperCase","slice","breadcrumbs","url","namespaceByRepo","namespace","updateParams","p","activeTab","className","updateParamsMixin","CollectionDetail","contextType","collectiondetail","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","collectionByRepo","contents","latest_version","metadata","CollectionContent","collectioncontent","docsRef","displayHTML","pluginData","urlFields","contentType","contentName","docs_blob","documentation_files","file","find","x","html","content_type","content_name","collection_readme","current","scrollIntoView","selectedName","selectedType","ref","dangerouslySetInnerHTML","__html","plugin","renderModuleLink","moduleName","renderDocLink","href","renderTableOfContentsLink","title","section","to","renderWarning","text","isInline","variant","renderNotFound","startsWith","target","collectionDocsPageByRepo","page","allContent","collectionContentDocsByRepo","type","collectionName","description","icon","CollectionDocs","collectiondocs","loadingImports","selectedImportDetail","selectedImport","apiError","loadData","loading","task","followMessages","setFollowMessages","_","hideCollectionName","failMsg","list","version","sort","importListResult","importObj","data","get","id","importDetailResult","err","CollectionImportLog","collectionimportlog"],"mappings":"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","file":"js/collection_detail.c09a0eb458b2d5da6909.js","sourcesContent":["import { CollectionDetailType, CollectionAPI } from 'src/api';\nimport { Paths } from 'src/paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n}\n\nexport function loadCollection(\n  repo,\n  forceReload = false,\n  callback = () => null,\n) {\n  CollectionAPI.getCached(\n    this.props.match.params['namespace'],\n    this.props.match.params['collection'],\n    repo,\n    this.state.params,\n    forceReload,\n  )\n    .then(result => {\n      this.setState({ collection: result }, callback);\n    })\n    .catch(result => {\n      this.props.history.push(Paths.notFound);\n    });\n}\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".main{margin:0px;padding:0px}.header{border-bottom:1px solid #d8d8d8}.docs-container{padding-top:24px;background-color:#fff}@media(min-width: 1000px){.docs-container{display:flex}}.docs-container .sidebar{min-width:294px;max-width:294px;border-right:1px solid #d8d8d8;padding:0px;padding-top:0px}.docs-container .docs{flex-grow:1;padding:24px;padding-top:0px;min-height:calc(100vh - 250px)}.docs-container .docs table tr:nth-child(2n){background-color:#f2f2f2}.docs-container .docs table td,.docs-container .docs table th{border:1px solid #ccc;padding:5px}\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./collection-detail.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n    const name =\n      NAMESPACE_TERM.charAt(0).toUpperCase() + NAMESPACE_TERM.slice(1);\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths[NAMESPACE_TERM], name: name },\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        name: collection.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='details'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionInfo\n              {...collection}\n              updateParams={p => this.updateParams(p)}\n              params={this.state.params}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDetail);\n\nCollectionDetail.contextType = AppContext;\ntry {\n    // @ts-ignore\n    collectiondetail.displayName = \"collectiondetail\";\n    // @ts-ignore\n    collectiondetail.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectiondetail\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionDetail>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-detail.tsx#collectiondetail\"] = { docgenInfo: collectiondetail.__docgenInfo, name: \"collectiondetail\", path: \"src/containers/collection-detail/collection-detail.tsx#collectiondetail\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionContentList,\n  LoadingPageWithHeader,\n  Main,\n} from 'src/components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\n// renders list of contents in a collection\nclass CollectionContent extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { collection, params } = this.state;\n    const name =\n      NAMESPACE_TERM.charAt(0).toUpperCase() + NAMESPACE_TERM.slice(1);\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths[NAMESPACE_TERM], name: name },\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: 'Content' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionContentList\n              contents={collection.latest_version.metadata.contents}\n              collection={collection.name}\n              namespace={collection.namespace.name}\n              params={params}\n              updateParams={p => this.updateParams(p)}\n            ></CollectionContentList>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionContent);\n\nCollectionContent.contextType = AppContext;\ntry {\n    // @ts-ignore\n    collectioncontent.displayName = \"collectioncontent\";\n    // @ts-ignore\n    collectioncontent.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectioncontent\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionContent>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-content.tsx#collectioncontent\"] = { docgenInfo: collectioncontent.__docgenInfo, name: \"collectioncontent\", path: \"src/containers/collection-detail/collection-content.tsx#collectioncontent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport './collection-detail.scss';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\nimport { HashLink } from 'react-router-hash-link';\n\nimport { Alert } from '@patternfly/react-core';\n\nimport {\n  CollectionHeader,\n  TableOfContents,\n  LoadingPageWithHeader,\n  Main,\n  EmptyStateCustom,\n} from 'src/components';\n\nimport { RenderPluginDoc } from '@ansible/galaxy-doc-builder';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper, sanitizeDocsUrls } from 'src/utilities';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\n// renders markdown files in collection docs/ directory\nclass CollectionDocs extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  docsRef: any;\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n\n    this.docsRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadCollection(this.context.selectedRepo);\n  }\n\n  render() {\n    const { params, collection } = this.state;\n    const urlFields = this.props.match.params;\n    const name =\n      NAMESPACE_TERM.charAt(0).toUpperCase() + NAMESPACE_TERM.slice(1);\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // If the parser can't find anything that matches the URL, neither of\n    // these variables should be set\n    let displayHTML: string;\n    let pluginData;\n\n    const contentType = urlFields['type'] || 'docs';\n    const contentName = urlFields['name'] || urlFields['page'] || null;\n\n    if (contentType === 'docs' && contentName) {\n      if (collection.latest_version.docs_blob.documentation_files) {\n        const file = collection.latest_version.docs_blob.documentation_files.find(\n          x => sanitizeDocsUrls(x.name) === urlFields['page'],\n        );\n\n        if (file) {\n          displayHTML = file.html;\n        }\n      }\n    } else if (contentName) {\n      // check if contents exists\n      if (collection.latest_version.docs_blob.contents) {\n        const content = collection.latest_version.docs_blob.contents.find(\n          x => x.content_type === contentType && x.content_name === contentName,\n        );\n\n        if (content) {\n          if (contentType === 'role') {\n            displayHTML = content['readme_html'];\n          } else {\n            pluginData = content;\n          }\n        }\n      }\n    } else {\n      if (collection.latest_version.docs_blob.collection_readme) {\n        displayHTML =\n          collection.latest_version.docs_blob.collection_readme.html;\n      }\n    }\n\n    const breadcrumbs = [\n      { url: Paths[NAMESPACE_TERM], name: name },\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: 'Documentation' },\n    ];\n\n    // scroll to top of page\n    if (this.docsRef.current) {\n      this.docsRef.current.scrollIntoView();\n    }\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () =>\n              this.loadCollection(this.context.selectedRepo, true),\n            )\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='documentation'\n          className='header'\n          repo={this.context.selectedRepo}\n        />\n        <Main className='main'>\n          <Section className='docs-container'>\n            <TableOfContents\n              className='sidebar'\n              namespace={collection.namespace.name}\n              collection={collection.name}\n              docs_blob={collection.latest_version.docs_blob}\n              selectedName={contentName}\n              selectedType={contentType}\n              params={params}\n            ></TableOfContents>\n            <div className='body docs pf-c-content' ref={this.docsRef}>\n              {displayHTML || pluginData ? (\n                // if neither variable is set, render not found\n                displayHTML ? (\n                  // if displayHTML is set, render it\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: displayHTML,\n                    }}\n                  ></div>\n                ) : (\n                  // if plugin data is set render it\n                  <RenderPluginDoc\n                    plugin={pluginData}\n                    renderModuleLink={moduleName =>\n                      this.renderModuleLink(\n                        moduleName,\n                        collection,\n                        params,\n                        collection.latest_version.metadata.contents,\n                      )\n                    }\n                    renderDocLink={(name, href) =>\n                      this.renderDocLink(name, href, collection, params)\n                    }\n                    renderTableOfContentsLink={(title, section) => (\n                      <HashLink to={'#' + section}>{title}</HashLink>\n                    )}\n                    renderWarning={text => (\n                      <Alert isInline variant='warning' title={text} />\n                    )}\n                  />\n                )\n              ) : (\n                this.renderNotFound(collection.name)\n              )}\n            </div>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderDocLink(name, href, collection, params) {\n    if (!!href && href.startsWith('http')) {\n      return (\n        <a href={href} target='_blank'>\n          {name}\n        </a>\n      );\n    } else if (!!href) {\n      // TODO: right now this will break if people put\n      // ../ at the front of their urls. Need to find a\n      // way to document this\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionDocsPageByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              page: sanitizeDocsUrls(href),\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {name}\n        </Link>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private renderModuleLink(moduleName, collection, params, allContent) {\n    const module = allContent.find(\n      x => x.content_type === 'module' && x.name === moduleName,\n    );\n\n    if (module) {\n      return (\n        <Link\n          to={formatPath(\n            Paths.collectionContentDocsByRepo,\n            {\n              namespace: collection.namespace.name,\n              collection: collection.name,\n              type: 'module',\n              name: moduleName,\n              repo: this.context.selectedRepo,\n            },\n            params,\n          )}\n        >\n          {moduleName}\n        </Link>\n      );\n    } else {\n      return moduleName;\n    }\n  }\n\n  private renderNotFound(collectionName) {\n    return (\n      <EmptyStateCustom\n        title={'Not found'}\n        description={\n          'The file is not available for this version of ' + collectionName\n        }\n        icon={ExclamationCircleIcon}\n      />\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDocs);\n\nCollectionDocs.contextType = AppContext;\ntry {\n    // @ts-ignore\n    collectiondocs.displayName = \"collectiondocs\";\n    // @ts-ignore\n    collectiondocs.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectiondocs\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionDocs>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-docs.tsx#collectiondocs\"] = { docgenInfo: collectiondocs.__docgenInfo, name: \"collectiondocs\", path: \"src/containers/collection-detail/collection-docs.tsx#collectiondocs\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport { ImportAPI, ImportDetailType, ImportListType } from 'src/api';\nimport {\n  CollectionHeader,\n  LoadingPageWithHeader,\n  ImportConsole,\n  Main,\n} from 'src/components';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { formatPath, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n    } = this.state;\n    const name =\n      NAMESPACE_TERM.charAt(0).toUpperCase() + NAMESPACE_TERM.slice(1);\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths[NAMESPACE_TERM], name: name },\n      {\n        url: formatPath(Paths.namespaceByRepo, {\n          namespace: collection.namespace.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collectionByRepo, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n          repo: this.context.selectedRepo,\n        }),\n        name: collection.name,\n      },\n      { name: 'Import log' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n          repo={this.context.selectedRepo}\n        />\n        <Main>\n          <Section className='body'>\n            <ImportConsole\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={_ => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = 'Could not load import log';\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(this.context.selectedRepo, forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.namespace.name,\n          name: this.state.collection.name,\n          version: this.state.collection.latest_version.version,\n          sort: '-created',\n        })\n          .then(importListResult => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then(importDetailResult => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch(err => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch(err => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n\nCollectionImportLog.contextType = AppContext;\ntry {\n    // @ts-ignore\n    collectionimportlog.displayName = \"collectionimportlog\";\n    // @ts-ignore\n    collectionimportlog.__docgenInfo = { \"description\": \"\", \"displayName\": \"collectionimportlog\", \"props\": { \"wrappedComponentRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"wrappedComponentRef\", \"required\": false, \"type\": { \"name\": \"Ref<CollectionImportLog>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/collection-detail/collection-import-log.tsx#collectionimportlog\"] = { docgenInfo: collectionimportlog.__docgenInfo, name: \"collectionimportlog\", path: \"src/containers/collection-detail/collection-import-log.tsx#collectionimportlog\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
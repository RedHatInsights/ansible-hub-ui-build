{"version":3,"sources":["webpack:///./src/containers/my-imports/my-imports.scss","webpack:///./src/containers/my-imports/my-imports.scss?3a0d","webpack:///./src/containers/my-imports/my-imports.tsx"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","props","params","parseParamString","location","search","topOfPage","state","selectedImport","importList","namespaces","selectedImportDetails","resultsCount","importDetailError","followLogs","loadingImports","loadingImportDetails","selectedCollectionVersion","componentDidMount","this","loadNamespaces","loadImportList","loadTaskDetails","polling","setInterval","allowedStates","running","waiting","includes","poll","componentWillUnmount","clearInterval","render","ref","title","_","className","loading","numberOfResults","selectImport","sImport","updateParams","setState","task","followMessages","setFollowMessages","isFollowing","apiError","collectionVersion","updateParamsMixin","current","scrollIntoView","behavior","importIndex","findIndex","x","id","imports","newSelectedImport","finished_at","callback","list","page_size","then","result","selectedNS","data","namespace","find","name","catch","console","log","sort","meta","count","get","importDeets","version","finally","MyImports"],"mappings":"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","file":"js/my_imports.e38acdfe1ad3b5dbafe1.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".page-container{display:flex}.page-container .import-list{width:400px}.page-container .import-console{flex-grow:1;margin-left:10px}\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./my-imports.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./my-imports.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./my-imports.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\nimport './my-imports.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { cloneDeep } from 'lodash';\n\nimport { BaseHeader, ImportConsole, ImportList, Main } from 'src/components';\n\nimport {\n  ImportAPI,\n  ImportDetailType,\n  ImportListType,\n  NamespaceType,\n  PulpStatus,\n  MyNamespaceAPI,\n  CollectionVersion,\n  CollectionVersionAPI,\n} from 'src/api';\n\nimport { ParamHelper } from 'src/utilities/param-helper';\n\ninterface IState {\n  selectedImport: ImportListType;\n  importList: ImportListType[];\n  selectedImportDetails: ImportDetailType;\n  selectedCollectionVersion: CollectionVersion;\n  params: {\n    page_size?: number;\n    page?: number;\n    keyword?: string;\n    namespace?: string;\n  };\n  namespaces: NamespaceType[];\n  resultsCount: number;\n  importDetailError: string;\n  followLogs: boolean;\n  loadingImports: boolean;\n  loadingImportDetails: boolean;\n}\n\nclass MyImports extends React.Component<RouteComponentProps, IState> {\n  polling: any;\n  topOfPage: any;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    this.topOfPage = React.createRef();\n\n    this.state = {\n      selectedImport: undefined,\n      importList: [],\n      params: params,\n      namespaces: [],\n      selectedImportDetails: undefined,\n      resultsCount: 0,\n      importDetailError: '',\n      followLogs: false,\n      loadingImports: true,\n      loadingImportDetails: true,\n      selectedCollectionVersion: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // Load namespaces, use the namespaces to query the import list,\n    // use the import list to load the task details\n    this.loadNamespaces(() =>\n      this.loadImportList(() => this.loadTaskDetails()),\n    );\n\n    this.polling = setInterval(() => {\n      const { selectedImport, selectedImportDetails } = this.state;\n      const allowedStates = [PulpStatus.running, PulpStatus.waiting];\n\n      // selectedImportDetails can be failed while selectedImport is still running, poll() updates selectedImport\n      if (\n        allowedStates.includes(selectedImportDetails?.state) ||\n        allowedStates.includes(selectedImport?.state)\n      ) {\n        this.poll();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.polling);\n  }\n\n  render() {\n    const {\n      selectedImport,\n      importList,\n      params,\n      namespaces,\n      selectedImportDetails,\n      resultsCount,\n      loadingImports,\n      loadingImportDetails,\n      importDetailError,\n      followLogs,\n      selectedCollectionVersion,\n    } = this.state;\n\n    if (!importList) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <div ref={this.topOfPage}></div>\n        <BaseHeader title={_`My imports`} />\n        <Main>\n          <section className='body'>\n            <div className='page-container'>\n              <div className='import-list'>\n                <ImportList\n                  importList={importList}\n                  selectedImport={selectedImport}\n                  loading={loadingImports}\n                  numberOfResults={resultsCount}\n                  params={params}\n                  namespaces={namespaces}\n                  selectImport={(sImport) => this.selectImport(sImport)}\n                  updateParams={(params) => {\n                    this.updateParams(params, () =>\n                      this.setState(\n                        {\n                          loadingImports: true,\n                          loadingImportDetails: true,\n                        },\n                        () => this.loadImportList(() => this.loadTaskDetails()),\n                      ),\n                    );\n                  }}\n                />\n              </div>\n\n              <div className='import-console'>\n                <ImportConsole\n                  loading={loadingImportDetails}\n                  task={selectedImportDetails}\n                  followMessages={followLogs}\n                  setFollowMessages={(isFollowing) => {\n                    this.setState({\n                      followLogs: isFollowing,\n                    });\n                  }}\n                  selectedImport={selectedImport}\n                  apiError={importDetailError}\n                  collectionVersion={selectedCollectionVersion}\n                />\n              </div>\n            </div>\n          </section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private selectImport(sImport) {\n    this.setState(\n      { selectedImport: sImport, loadingImportDetails: true },\n      () => {\n        this.topOfPage.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n        this.loadTaskDetails();\n      },\n    );\n  }\n\n  private poll() {\n    this.loadTaskDetails(() => {\n      // Update the state of the selected import in the list if it's\n      // different from the one loaded from the API.\n      const { selectedImport, selectedImportDetails, importList } = this.state;\n\n      if (!selectedImportDetails) {\n        return;\n      }\n\n      if (selectedImport.state !== selectedImportDetails.state) {\n        const importIndex = importList.findIndex(\n          (x) => x.id === selectedImport.id,\n        );\n\n        const imports = cloneDeep(importList);\n        const newSelectedImport = cloneDeep(selectedImport);\n\n        newSelectedImport.state = selectedImportDetails.state;\n        newSelectedImport.finished_at = selectedImportDetails.finished_at;\n\n        imports[importIndex] = newSelectedImport;\n\n        this.setState({\n          selectedImport: newSelectedImport,\n          importList: imports,\n        });\n      }\n    });\n  }\n\n  private loadNamespaces(callback?: () => void) {\n    MyNamespaceAPI.list({ page_size: 1000 })\n      .then((result) => {\n        const namespaces = result.data.data;\n        let selectedNS;\n\n        if (this.state.params.namespace) {\n          selectedNS = namespaces.find(\n            (x) => x.name === this.state.params.namespace,\n          );\n        }\n\n        if (!selectedNS) {\n          selectedNS = namespaces[0];\n        }\n\n        this.setState(\n          {\n            namespaces: namespaces,\n            params: {\n              ...this.state.params,\n              namespace: selectedNS.name,\n            },\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadImportList(callback?: () => void) {\n    ImportAPI.list({ ...this.state.params, sort: '-created' })\n      .then((importList) => {\n        this.setState(\n          {\n            importList: importList.data.data,\n            selectedImport: importList.data.data[0],\n            resultsCount: importList.data.meta.count,\n            loadingImports: false,\n          },\n          callback,\n        );\n      })\n      .catch((result) => console.log(result));\n  }\n\n  private loadTaskDetails(callback?: () => void) {\n    if (!this.state.selectedImport) {\n      this.setState({\n        importDetailError: _`No data`,\n        loadingImportDetails: false,\n      });\n    } else {\n      ImportAPI.get(this.state.selectedImport.id)\n        .then((result) => {\n          this.setState(\n            {\n              importDetailError: '',\n              loadingImportDetails: false,\n              selectedImportDetails: result.data,\n              selectedCollectionVersion: undefined,\n            },\n            () => {\n              const importDeets = this.state.selectedImportDetails;\n\n              // have to use list instead of get because repository_list isn't\n              // available on collection version details\n              CollectionVersionAPI.list({\n                namespace: importDeets.namespace,\n                name: importDeets.name,\n                version: importDeets.version,\n              })\n                .then((result) => {\n                  if (result.data.meta.count === 1) {\n                    this.setState({\n                      selectedCollectionVersion: result.data.data[0],\n                    });\n                  }\n                })\n                .finally(() => {\n                  if (callback) {\n                    callback();\n                  }\n                });\n            },\n          );\n        })\n        .catch((result) => {\n          this.setState({\n            selectedImportDetails: undefined,\n            importDetailError: _`Error fetching import from API`,\n            loadingImportDetails: false,\n          });\n        });\n    }\n  }\n}\n\nexport default withRouter(MyImports);\n"],"sourceRoot":""}
{"version":3,"file":"js/search.1657628718364.f47cd41d72a576403855.js","mappings":"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","sources":["webpack://ansible-hub-ui/./src/containers/search/search.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport './search.scss';\nimport { errorMessage } from 'src/utilities';\n\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\nimport { DataList, Switch, DropdownItem, Button } from '@patternfly/react-core';\nimport {\n  BaseHeader,\n  CardListSwitcher,\n  CollectionCard,\n  CollectionFilter,\n  CollectionListItem,\n  EmptyStateFilter,\n  EmptyStateNoData,\n  LoadingPageSpinner,\n  Pagination,\n  RepoSelector,\n  StatefulDropdown,\n  AlertList,\n  AlertType,\n  closeAlertMixin,\n  ImportModal,\n} from 'src/components';\nimport {\n  CollectionAPI,\n  CollectionListType,\n  SyncListType,\n  MySyncListAPI,\n  MyNamespaceAPI,\n} from 'src/api';\nimport { ParamHelper } from 'src/utilities/param-helper';\nimport { Constants } from 'src/constants';\nimport { AppContext } from 'src/loaders/app-context';\nimport { filterIsSet, waitForTask, parsePulpIDFromURL } from 'src/utilities';\nimport { Paths, formatPath } from 'src/paths';\n\ninterface IState {\n  collections: CollectionListType[];\n  numberOfResults: number;\n  params: {\n    page?: number;\n    page_size?: number;\n    keywords?: string;\n    tags?: string[];\n    view_type?: string;\n  };\n  loading: boolean;\n  synclist: SyncListType;\n  alerts: AlertType[];\n  updateCollection: CollectionListType;\n  showImportModal: boolean;\n  redirect: string;\n}\n\nclass Search extends React.Component<RouteComponentProps, IState> {\n  tags: string[];\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    if (!params['page_size']) {\n      params['page_size'] = Constants.CARD_DEFAULT_PAGE_SIZE;\n    }\n\n    // Load view type from local storage if it's not set. This allows a\n    // user's view type preference to persist\n    if (!params['view_type']) {\n      params['view_type'] = localStorage.getItem(\n        Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n      );\n    }\n\n    this.state = {\n      collections: [],\n      params: params,\n      numberOfResults: 0,\n      loading: true,\n      synclist: undefined,\n      alerts: [],\n      updateCollection: null,\n      showImportModal: false,\n      redirect: null,\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  private load() {\n    this.queryCollections();\n\n    if (DEPLOYMENT_MODE === Constants.INSIGHTS_DEPLOYMENT_MODE) {\n      this.getSynclist();\n    }\n  }\n\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect push to={this.state.redirect} />;\n    }\n\n    const {\n      loading,\n      collections,\n      params,\n      numberOfResults,\n      showImportModal,\n      updateCollection,\n    } = this.state;\n    const noData =\n      collections.length === 0 &&\n      !filterIsSet(params, ['keywords', 'tags', 'sign_state']);\n\n    const updateParams = (p) =>\n      this.updateParams(p, () => this.queryCollections());\n\n    return (\n      <div className='search-page'>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {showImportModal && (\n          <ImportModal\n            isOpen={showImportModal}\n            onUploadSuccess={() =>\n              this.setState({\n                redirect: formatPath(\n                  Paths.myImports,\n                  {},\n                  {\n                    namespace: updateCollection.namespace.name,\n                  },\n                ),\n              })\n            }\n            // onCancel\n            setOpen={(isOpen, warn) => this.toggleImportModal(isOpen, warn)}\n            collection={updateCollection}\n            namespace={updateCollection.namespace.name}\n          />\n        )}\n        <BaseHeader\n          className='header'\n          title={t`Collections`}\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={Paths.searchByRepo}\n            />\n          }\n        >\n          {!noData && (\n            <div className='hub-toolbar-wrapper'>\n              <div className='toolbar'>\n                <CollectionFilter\n                  ignoredParams={['page', 'page_size', 'sort', 'view_type']}\n                  params={params}\n                  updateParams={updateParams}\n                />\n\n                <div className='hub-pagination-container'>\n                  <div className='card-list-switcher'>\n                    <CardListSwitcher\n                      size='sm'\n                      params={params}\n                      updateParams={(p) =>\n                        this.updateParams(p, () =>\n                          // Note, we have to use this.state.params instead\n                          // of params in the callback because the callback\n                          // executes before the page can re-run render\n                          // which means params doesn't contain the most\n                          // up to date state\n                          localStorage.setItem(\n                            Constants.SEARCH_VIEW_TYPE_LOCAL_KEY,\n                            this.state.params.view_type,\n                          ),\n                        )\n                      }\n                    />\n                  </div>\n\n                  <Pagination\n                    params={params}\n                    updateParams={updateParams}\n                    count={numberOfResults}\n                    perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                    isTop\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </BaseHeader>\n        {loading ? (\n          <LoadingPageSpinner />\n        ) : noData ? (\n          <EmptyStateNoData\n            title={t`No collections yet`}\n            description={t`Collections will appear once uploaded`}\n          />\n        ) : (\n          <React.Fragment>\n            <section className='collection-container'>\n              {this.renderCollections(collections, params, updateParams)}\n            </section>\n            <section className='footer'>\n              <Pagination\n                params={params}\n                updateParams={(p) =>\n                  this.updateParams(p, () => this.queryCollections())\n                }\n                perPageOptions={Constants.CARD_DEFAULT_PAGINATION_OPTIONS}\n                count={numberOfResults}\n              />\n            </section>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n\n  private toggleImportModal(isOpen: boolean, warning?: string) {\n    if (warning) {\n      this.setState({\n        alerts: [...this.state.alerts, { title: warning, variant: 'warning' }],\n      });\n    }\n    this.setState({ showImportModal: isOpen });\n  }\n\n  private renderCollections(collections, params, updateParams) {\n    if (collections.length === 0) {\n      return (\n        <EmptyStateFilter\n          clearAllFilters={() => {\n            ParamHelper.clearAllFilters({\n              params,\n              ignoredParams: ['page', 'page_size', 'sort', 'view_type'],\n              updateParams,\n            });\n          }}\n        />\n      );\n    }\n    if (params.view_type === 'list') {\n      return this.renderList(collections);\n    } else {\n      return this.renderCards(collections);\n    }\n  }\n\n  private renderCards(collections) {\n    return (\n      <div className='hub-cards'>\n        {collections.map((c) => {\n          return (\n            <CollectionCard\n              className='card'\n              key={c.id}\n              {...c}\n              footer={this.renderSyncToogle(c.name, c.namespace.name)}\n              repo={this.context.selectedRepo}\n              menu={this.renderMenu(false, c)}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  private handleControlClick(collection) {\n    CollectionAPI.setDeprecation(\n      collection,\n      !collection.deprecated,\n      this.context.selectedRepo,\n    )\n      .then((res) => {\n        const taskId = parsePulpIDFromURL(res.data.task);\n        return waitForTask(taskId).then(() => {\n          const title = !collection.deprecated\n            ? t`The collection \"${collection.name}\" has been successfully deprecated.`\n            : t`The collection \"${collection.name}\" has been successfully undeprecated.`;\n          this.setState({\n            alerts: [\n              ...this.state.alerts,\n              {\n                title: title,\n                variant: 'success',\n              },\n            ],\n          });\n          this.load();\n        });\n      })\n      .catch((err) => {\n        const { status, statusText } = err.response;\n        this.setState({\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: !collection.deprecated\n                ? t`Collection \"${collection.name}\" could not be deprecated.`\n                : t`Collection \"${collection.name}\" could not be undeprecated.`,\n              description: errorMessage(status, statusText),\n            },\n          ],\n        });\n      });\n  }\n\n  private renderMenu(list, collection) {\n    const menuItems = [];\n    menuItems.push(\n      <DropdownItem\n        onClick={() => this.handleControlClick(collection)}\n        key='deprecate'\n      >\n        {collection.deprecated ? t`Undeprecate` : t`Deprecate`}\n      </DropdownItem>,\n    );\n\n    if (!list) {\n      menuItems.push(\n        <DropdownItem\n          onClick={() => this.checkUploadPrivilleges(collection)}\n          key='upload new version'\n        >\n          {t`Upload new version`}\n        </DropdownItem>,\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {list && (\n          <Button\n            onClick={() => this.checkUploadPrivilleges(collection)}\n            variant='secondary'\n          >\n            {t`Upload new version`}\n          </Button>\n        )}\n        <StatefulDropdown items={menuItems} ariaLabel='collection-kebab' />\n      </React.Fragment>\n    );\n  }\n\n  private renderSyncToogle(name: string, namespace: string): React.ReactNode {\n    const { synclist } = this.state;\n\n    if (!synclist) {\n      return null;\n    }\n\n    return (\n      <Switch\n        id={namespace + '.' + name}\n        className='sync-toggle'\n        label={t`Sync`}\n        isChecked={this.isCollectionSynced(name, namespace)}\n        onChange={() => this.toggleCollectionSync(name, namespace)}\n      />\n    );\n  }\n\n  private checkUploadPrivilleges(collection) {\n    const addAlert = () => {\n      this.setState({\n        alerts: [\n          ...this.state.alerts,\n          {\n            title: t`You don't have rights to do this operation.`,\n            variant: 'warning',\n          },\n        ],\n      });\n    };\n\n    MyNamespaceAPI.get(collection.namespace.name, {\n      include_related: 'my_permissions',\n    })\n      .then((value) => {\n        if (\n          value.data.related_fields.my_permissions.includes(\n            'galaxy.upload_to_namespace',\n          )\n        ) {\n          this.setState({\n            updateCollection: collection,\n            showImportModal: true,\n          });\n        } else {\n          addAlert();\n        }\n      })\n      .catch(() => {\n        addAlert();\n      });\n  }\n\n  private toggleCollectionSync(name: string, namespace: string) {\n    const synclist = { ...this.state.synclist };\n\n    const colIndex = synclist.collections.findIndex(\n      (el) => el.name === name && el.namespace === namespace,\n    );\n\n    if (colIndex < 0) {\n      synclist.collections.push({ name: name, namespace: namespace });\n    } else {\n      synclist.collections.splice(colIndex, 1);\n    }\n\n    MySyncListAPI.update(synclist.id, synclist).then((response) => {\n      this.setState({ synclist: response.data });\n      MySyncListAPI.curate(synclist.id).then(() => null);\n    });\n  }\n\n  private isCollectionSynced(name: string, namespace: string): boolean {\n    const { synclist } = this.state;\n    const found = synclist.collections.find(\n      (el) => el.name === name && el.namespace === namespace,\n    );\n\n    if (synclist.policy === 'include') {\n      return !(found === undefined);\n    } else {\n      return found === undefined;\n    }\n  }\n\n  private renderList(collections) {\n    return (\n      <div className='list-container'>\n        <div className='hub-list'>\n          <DataList className='data-list' aria-label={t`List of Collections`}>\n            {collections.map((c) => (\n              <CollectionListItem\n                showNamespace={true}\n                key={c.id}\n                {...c}\n                controls={\n                  <>\n                    {this.renderSyncToogle(c.name, c.namespace.name)}\n                    {this.renderMenu(true, c)}\n                  </>\n                }\n                repo={this.context.selectedRepo}\n              />\n            ))}\n          </DataList>\n        </div>\n      </div>\n    );\n  }\n\n  private getSynclist() {\n    MySyncListAPI.list().then((result) => {\n      // ignore results if more than 1 is returned\n      // TODO: should we throw an error for this or just ignore it?\n      if (result.data.meta.count === 1) {\n        this.setState({ synclist: result.data.data[0] });\n      } else {\n        console.error(\n          `my-synclist returned ${result.data.meta.count} synclists`,\n        );\n      }\n    });\n  }\n\n  private queryCollections() {\n    this.setState({ loading: true }, () => {\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, ['view_type']),\n          deprecated: false,\n        },\n        this.context.selectedRepo,\n      ).then((result) => {\n        this.setState({\n          collections: result.data.data,\n          numberOfResults: result.data.meta.count,\n          loading: false,\n        });\n      });\n    });\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(Search);\n\nSearch.contextType = AppContext;\n"],"names":["Search","props","params","ParamHelper","location","search","Constants","localStorage","getItem","state","collections","numberOfResults","loading","synclist","undefined","alerts","updateCollection","showImportModal","redirect","this","load","queryCollections","DEPLOYMENT_MODE","getSynclist","closeAlertMixin","Redirect","push","to","noData","length","filterIsSet","updateParams","p","className","closeAlert","i","isOpen","onUploadSuccess","setState","formatPath","Paths","namespace","name","setOpen","warn","toggleImportModal","collection","title","contextSelector","selectedRepo","context","path","ignoredParams","size","setItem","view_type","count","perPageOptions","isTop","description","renderCollections","warning","variant","clearAllFilters","renderList","renderCards","map","c","key","id","footer","renderSyncToogle","repo","menu","renderMenu","CollectionAPI","deprecated","then","res","taskId","parsePulpIDFromURL","data","task","waitForTask","err","response","status","statusText","errorMessage","list","menuItems","DropdownItem","onClick","handleControlClick","checkUploadPrivilleges","Button","items","ariaLabel","Switch","label","isChecked","isCollectionSynced","onChange","toggleCollectionSync","addAlert","MyNamespaceAPI","include_related","value","related_fields","my_permissions","includes","colIndex","findIndex","el","splice","MySyncListAPI","found","find","policy","DataList","showNamespace","controls","result","meta","console","error","React","withRouter","contextType","AppContext"],"sourceRoot":""}
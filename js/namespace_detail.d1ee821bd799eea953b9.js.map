{"version":3,"file":"js/namespace_detail.d1ee821bd799eea953b9.js","mappings":"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","sources":["webpack://ansible-hub-ui/./src/containers/edit-namespace/edit-namespace.tsx","webpack://ansible-hub-ui/./src/containers/namespace-detail/import-modal/import-modal.tsx","webpack://ansible-hub-ui/./src/containers/namespace-detail/namespace-detail.tsx"],"sourcesContent":["import { t } from '@lingui/macro';\nimport * as React from 'react';\n\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\n\nimport {\n  PartnerHeader,\n  NamespaceForm,\n  ResourcesForm,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n  Main,\n  EmptyStateUnauthorized,\n  LoadingPageSpinner,\n} from 'src/components';\nimport {\n  MyNamespaceAPI,\n  NamespaceType,\n  ActiveUserAPI,\n  NamespaceLinkType,\n} from 'src/api';\n\nimport { Form, ActionGroup, Button, Spinner } from '@patternfly/react-core';\n\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { ParamHelper, mapErrorMessages } from 'src/utilities';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  namespace: NamespaceType;\n  newLinkName: string;\n  newLinkURL: string;\n  errorMessages: any;\n  saving: boolean;\n  loading: boolean;\n  redirect: string;\n  unsavedData: boolean;\n  alerts: AlertType[];\n  params: {\n    tab?: string;\n  };\n  userId: string;\n  unauthorized: boolean;\n}\n\nclass EditNamespace extends React.Component<RouteComponentProps, IState> {\n  queryParams: URLSearchParams;\n\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    if (!params['tab']) {\n      params['tab'] = 'edit-details';\n    }\n\n    this.state = {\n      loading: false,\n      alerts: [],\n      namespace: null,\n      userId: '',\n      newLinkURL: '',\n      newLinkName: '',\n      errorMessages: {},\n      saving: false,\n      redirect: null,\n      unsavedData: false,\n      params: params,\n      unauthorized: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true }, () => {\n      ActiveUserAPI.getUser()\n        .then((result) => {\n          this.setState({ userId: result.account_number }, () =>\n            this.loadNamespace(),\n          );\n        })\n        .catch((e) =>\n          this.setState(\n            {\n              loading: false,\n              redirect: formatPath(Paths.namespaceByRepo, {\n                namespace: this.props.match.params['namespace'],\n                repo: this.context.selectedRepo,\n              }),\n            },\n            () => {\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'danger',\n                  title: t`Error loading active user.`,\n                  description: e?.message,\n                },\n              ]);\n            },\n          ),\n        );\n    });\n  }\n\n  render() {\n    const {\n      namespace,\n      errorMessages,\n      saving,\n      redirect,\n      params,\n      userId,\n      unauthorized,\n      loading,\n    } = this.state;\n\n    const tabs = [\n      { id: 'edit-details', name: t`Edit details` },\n      { id: 'edit-resources', name: t`Edit resources` },\n    ];\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n\n    if (loading) {\n      return <LoadingPageSpinner />;\n    }\n\n    if (!namespace) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[\n            namespaceBreadcrumb,\n            {\n              name: namespace.name,\n              url: formatPath(Paths.myCollections, {\n                namespace: namespace.name,\n              }),\n            },\n            { name: t`Edit` },\n          ]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n        ></PartnerHeader>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        {unauthorized ? (\n          <EmptyStateUnauthorized />\n        ) : (\n          <Main>\n            <section className='body'>\n              {params.tab.toLowerCase() === 'edit-details' ? (\n                <NamespaceForm\n                  userId={userId}\n                  namespace={namespace}\n                  errorMessages={errorMessages}\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                />\n              ) : (\n                <ResourcesForm\n                  updateNamespace={(namespace) =>\n                    this.setState({\n                      namespace: namespace,\n                      unsavedData: true,\n                    })\n                  }\n                  namespace={namespace}\n                />\n              )}\n              <Form>\n                <ActionGroup>\n                  <Button\n                    variant='primary'\n                    onClick={() => this.saveNamespace()}\n                  >\n                    {t`Save`}\n                  </Button>\n                  <Button variant='secondary' onClick={() => this.cancel()}>\n                    {t`Cancel`}\n                  </Button>\n\n                  {saving ? <Spinner></Spinner> : null}\n                </ActionGroup>\n                {this.state.unsavedData ? (\n                  <div\n                    style={{ color: 'red' }}\n                  >{t`You have unsaved changes`}</div>\n                ) : null}\n              </Form>\n            </section>\n          </Main>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n\n  private loadNamespace() {\n    MyNamespaceAPI.get(this.props.match.params['namespace'])\n      .then((response) => {\n        // Add an empty link to the end of the links array to create an empty field\n        // on the link edit form for adding new links\n        const emptyLink: NamespaceLinkType = { name: '', url: '' };\n        response.data.links.push(emptyLink);\n        this.setState({ loading: false, namespace: response.data });\n      })\n      .catch((response) => {\n        this.setState({ unauthorized: true, loading: false });\n      });\n  }\n\n  private saveNamespace() {\n    this.setState({ saving: true }, () => {\n      const namespace = { ...this.state.namespace };\n      const setLinks: NamespaceLinkType[] = [];\n\n      // remove any empty links from the list before saving\n      for (const link of namespace.links) {\n        if (link.url !== '' || link.name !== '') {\n          setLinks.push(link);\n        }\n      }\n\n      namespace.links = setLinks;\n\n      MyNamespaceAPI.update(this.state.namespace.name, namespace)\n        .then((result) => {\n          this.setState(\n            {\n              namespace: result.data,\n              errorMessages: {},\n              saving: false,\n              unsavedData: false,\n              redirect: formatPath(Paths.myCollections, {\n                namespace: this.state.namespace.name,\n              }),\n            },\n            () =>\n              this.context.setAlerts([\n                ...this.context.alerts,\n                {\n                  variant: 'success',\n                  title: t`Namespace successfully edited.`,\n                },\n              ]),\n          );\n        })\n        .catch((error) => {\n          const result = error.response;\n          if (result.status === 400) {\n            this.setState({\n              errorMessages: mapErrorMessages(error),\n              saving: false,\n            });\n          } else if (result.status === 404) {\n            this.setState({\n              alerts: this.state.alerts.concat({\n                variant: 'danger',\n                title: t`API Error: ${error.response.status}`,\n                description: t`You don't have permissions to update this namespace.`,\n              }),\n              saving: false,\n            });\n          }\n        });\n    });\n  }\n  private get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n\n  private cancel() {\n    this.setState({\n      redirect: formatPath(Paths.myCollections, {\n        namespace: this.state.namespace.name,\n      }),\n    });\n  }\n}\n\nEditNamespace.contextType = AppContext;\n\nexport default withRouter(EditNamespace);\n","import { t } from '@lingui/macro';\nimport * as React from 'react';\nimport './import-modal.scss';\nimport axios from 'axios';\n\nimport { Modal, Button } from '@patternfly/react-core';\nimport { FolderOpenIcon, SpinnerIcon } from '@patternfly/react-icons';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  CollectionUploadType,\n} from 'src/api';\n\nenum Status {\n  uploading = 'uploading',\n  waiting = 'waiting',\n}\n\ninterface IProps {\n  isOpen: boolean;\n  setOpen: (isOpen, warnings?) => void;\n  onUploadSuccess: (result) => void;\n\n  collection?: CollectionListType;\n  namespace: string;\n}\n\ninterface IState {\n  file?: File;\n  errors?: string;\n  uploadProgress: number;\n  uploadStatus: Status;\n}\n\nexport class ImportModal extends React.Component<IProps, IState> {\n  acceptedFileTypes = ['application/x-gzip', 'application/gzip'];\n  cancelToken: any;\n  COLLECTION_NAME_REGEX = /[0-9a-z_]+\\-[0-9a-z_]+\\-[0-9A-Za-z.+-]+/;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      file: undefined,\n      errors: '',\n      uploadProgress: 0,\n      uploadStatus: Status.waiting,\n    };\n  }\n  render() {\n    const { isOpen, collection } = this.props;\n\n    const { file, errors, uploadProgress, uploadStatus } = this.state;\n    return (\n      <Modal\n        variant='small'\n        title={\n          collection ? t`New version of ${collection.name}` : t`New collection`\n        }\n        isOpen={isOpen}\n        onClose={() => this.handleClose()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => this.saveFile()}\n            isDisabled={!this.canUpload()}\n            data-cy={'confirm-upload'}\n          >\n            {t`Upload`}\n          </Button>,\n          <Button\n            key='cancel'\n            variant='secondary'\n            onClick={() => this.handleClose()}\n          >\n            {t`Cancel`}\n          </Button>,\n        ]}\n      >\n        <div className='upload-collection'>\n          <form>\n            <input\n              disabled={uploadStatus !== Status.waiting}\n              className='upload-file'\n              type='file'\n              id='collection-widget'\n              onChange={(e) => this.handleFileUpload(e.target.files)}\n            />\n            <label className='upload-file-label' htmlFor='collection-widget'>\n              <div className='upload-box'>\n                <div className='upload-button'>{this.renderFileIcon()}</div>\n                <div className='upload-text'>\n                  {file != null ? file.name : t`Select file`}\n                  <div\n                    className='loading-bar'\n                    style={{\n                      width: uploadProgress * 100 + '%',\n                    }}\n                  />\n                </div>\n              </div>\n            </label>\n          </form>\n          {errors ? (\n            <span className='file-error-messages'>\n              <i className='pficon-error-circle-o' /> {errors}\n            </span>\n          ) : null}\n        </div>\n      </Modal>\n    );\n  }\n\n  private canUpload() {\n    if (this.state.errors) {\n      return false;\n    }\n\n    if (this.state.uploadStatus !== Status.waiting) {\n      return false;\n    }\n\n    if (!this.state.file) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private renderFileIcon() {\n    switch (this.state.uploadStatus) {\n      case Status.uploading:\n        return <SpinnerIcon className='fa-spin'></SpinnerIcon>;\n      default:\n        return <FolderOpenIcon></FolderOpenIcon>;\n    }\n  }\n\n  private handleFileUpload(files) {\n    // Selects the artifact that will be uploaded and performs some basic\n    // preliminary checks on it.\n    const newCollection = files[0];\n    const { collection } = this.props;\n\n    if (files.length > 1) {\n      this.setState({\n        errors: t`Please select no more than one file.`,\n      });\n    } else if (!this.acceptedFileTypes.includes(newCollection.type)) {\n      this.setState({\n        errors: t`Invalid file format.`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (!this.COLLECTION_NAME_REGEX.test(newCollection.name)) {\n      this.setState({\n        errors: t`Invalid file name. Collections must be formatted as 'namespace-collection_name-1.0.0'`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (\n      collection &&\n      collection.name !== newCollection.name.split('-')[1]\n    ) {\n      this.setState({\n        errors: t`The collection you have selected doesn't appear to match ${collection.name}`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else if (this.props.namespace != newCollection.name.split('-')[0]) {\n      this.setState({\n        errors: t`The collection you have selected does not match this namespace.`,\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    } else {\n      this.setState({\n        errors: '',\n        file: newCollection,\n        uploadProgress: 0,\n      });\n    }\n  }\n\n  saveFile() {\n    this.setState({ uploadStatus: Status.uploading });\n    const artifact = {\n      file: this.state.file,\n      sha256: '',\n    } as CollectionUploadType;\n\n    this.cancelToken = CollectionAPI.getCancelToken();\n\n    CollectionAPI.upload(\n      'inbound-' + this.props.namespace,\n      artifact,\n      (e) => {\n        this.setState({\n          uploadProgress: e.loaded / e.total,\n        });\n      },\n      this.cancelToken,\n    )\n      .then((response) => {\n        this.props.onUploadSuccess(response);\n      })\n      .catch((errors) => {\n        let errorMessage = '';\n\n        // If request was canceled by the user\n        if (!axios.isCancel(errors)) {\n          // Upload fails\n          if (errors.response.data.errors) {\n            const messages = [];\n            for (let err of errors.response.data.errors) {\n              messages.push(\n                err.detail ||\n                  err.title ||\n                  err.code ||\n                  t`API error. Status code: ${err.status}`,\n              );\n            }\n            errorMessage = messages.join(', ');\n          } else {\n            errorMessage = t`API error. Status code: ${errors.response.status}`;\n          }\n        }\n\n        this.setState({\n          uploadStatus: Status.waiting,\n          errors: errorMessage,\n        });\n      })\n      .finally(() => {\n        this.cancelToken = null;\n      });\n  }\n\n  handleClose() {\n    let msg = null;\n    if (this.cancelToken && this.state.uploadStatus === Status.uploading) {\n      msg = t`Collection upload canceled`;\n      this.cancelToken.cancel(msg);\n    }\n\n    this.setState(\n      {\n        file: undefined,\n        errors: '',\n        uploadProgress: 0,\n        uploadStatus: Status.waiting,\n      },\n      () => this.props.setOpen(false, msg),\n    );\n  }\n}\n","import { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport './namespace-detail.scss';\n\nimport {\n  withRouter,\n  RouteComponentProps,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  DropdownItem,\n  Tooltip,\n  Text,\n  Checkbox,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport ReactMarkdown from 'react-markdown';\n\nimport {\n  CollectionListType,\n  CollectionAPI,\n  NamespaceAPI,\n  MyNamespaceAPI,\n  NamespaceType,\n} from 'src/api';\n\nimport {\n  CollectionList,\n  CollectionFilter,\n  LoadingPageWithHeader,\n  Main,\n  Pagination,\n  PartnerHeader,\n  EmptyStateNoData,\n  RepoSelector,\n  StatefulDropdown,\n  ClipboardCopy,\n  ConfirmModal,\n  AlertList,\n  closeAlertMixin,\n  AlertType,\n} from 'src/components';\n\nimport { ImportModal } from './import-modal/import-modal';\n\nimport { ParamHelper, getRepoUrl, filterIsSet } from 'src/utilities';\nimport { Constants } from 'src/constants';\nimport { formatPath, namespaceBreadcrumb, Paths } from 'src/paths';\nimport { AppContext } from 'src/loaders/app-context';\n\ninterface IState {\n  collections: CollectionListType[];\n  namespace: NamespaceType;\n  params: {\n    sort?: string;\n    page?: number;\n    page_size?: number;\n    tab?: string;\n    keywords?: string;\n    namespace?: string;\n  };\n  redirect: string;\n  itemCount: number;\n  showImportModal: boolean;\n  warning: string;\n  updateCollection: CollectionListType;\n  showControls: boolean;\n  isOpenNamespaceModal: boolean;\n  isNamespaceEmpty: boolean;\n  confirmDelete: boolean;\n  isNamespacePending: boolean;\n  alerts: AlertType[];\n}\n\ninterface IProps extends RouteComponentProps {\n  selectedRepo: string;\n}\n\nexport class NamespaceDetail extends React.Component<IProps, IState> {\n  nonAPIParams = ['tab'];\n\n  // namespace is a positional url argument, so don't include it in the\n  // query params\n  nonQueryStringParams = ['namespace'];\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search, [\n      'page',\n      'page_size',\n    ]);\n\n    params['namespace'] = props.match.params['namespace'];\n\n    this.state = {\n      collections: [],\n      namespace: null,\n      params: params,\n      redirect: null,\n      itemCount: 0,\n      showImportModal: false,\n      warning: '',\n      updateCollection: null,\n      showControls: false, // becomes true when my-namespaces doesn't 404\n      isOpenNamespaceModal: false,\n      isNamespaceEmpty: false,\n      confirmDelete: false,\n      isNamespacePending: false,\n      alerts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadAll();\n\n    this.setState({ alerts: this.context.alerts || [] });\n  }\n\n  componentWillUnmount() {\n    this.context.setAlerts([]);\n  }\n\n  render() {\n    const {\n      collections,\n      namespace,\n      params,\n      redirect,\n      itemCount,\n      showImportModal,\n      warning,\n      updateCollection,\n      isOpenNamespaceModal,\n      confirmDelete,\n      isNamespacePending,\n    } = this.state;\n\n    if (redirect) {\n      return <Redirect push to={redirect} />;\n    }\n\n    if (!namespace) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const tabs = [{ id: 'collections', name: t`Collections` }];\n\n    if (this.state.showControls) {\n      tabs.push({ id: 'cli-configuration', name: t`CLI configuration` });\n    }\n    const tab = params['tab'] || 'collections';\n\n    if (namespace.resources) {\n      tabs.push({ id: 'resources', name: t`Resources` });\n    }\n\n    const repositoryUrl = getRepoUrl('inbound-' + namespace.name);\n\n    const noData = itemCount === 0 && !filterIsSet(params, ['keywords']);\n\n    const updateParams = (params) =>\n      this.updateParams(params, () => this.loadCollections());\n\n    const ignoredParams = [\n      'namespace',\n      'page',\n      'page_size',\n      'sort',\n      'tab',\n      'view_type',\n    ];\n\n    return (\n      <React.Fragment>\n        <AlertList\n          alerts={this.state.alerts}\n          closeAlert={(i) => this.closeAlert(i)}\n        />\n        <ImportModal\n          isOpen={showImportModal}\n          onUploadSuccess={(result) =>\n            this.setState({\n              redirect: formatPath(\n                Paths.myImports,\n                {},\n                {\n                  namespace: namespace.name,\n                },\n              ),\n            })\n          }\n          // onCancel\n          setOpen={(isOpen, warn) => this.toggleImportModal(isOpen, warn)}\n          collection={updateCollection}\n          namespace={namespace.name}\n        />\n        {isOpenNamespaceModal && (\n          <ConfirmModal\n            spinner={isNamespacePending}\n            cancelAction={this.closeModal}\n            confirmAction={this.deleteNamespace}\n            title={t`Permanently delete namespace?`}\n            confirmButtonTitle={t`Delete`}\n            isDisabled={!confirmDelete || isNamespacePending}\n          >\n            <>\n              <Text className='delete-namespace-modal-message'>\n                <Trans>\n                  Deleting <b>{namespace.name}</b> and its data will be lost.\n                </Trans>\n              </Text>\n              <Checkbox\n                isChecked={confirmDelete}\n                onChange={(val) => this.setState({ confirmDelete: val })}\n                label={t`I understand that this action cannot be undone.`}\n                id='delete_confirm'\n              />\n            </>\n          </ConfirmModal>\n        )}\n        {warning ? (\n          <Alert\n            className='namespace-warning-alert'\n            variant='warning'\n            title={warning}\n            actionClose={\n              <AlertActionCloseButton\n                onClose={() => this.setState({ warning: '' })}\n              />\n            }\n          ></Alert>\n        ) : null}\n        <PartnerHeader\n          namespace={namespace}\n          breadcrumbs={[namespaceBreadcrumb, { name: namespace.name }]}\n          tabs={tabs}\n          params={params}\n          updateParams={(p) => this.updateParams(p)}\n          pageControls={this.renderPageControls()}\n          contextSelector={\n            <RepoSelector\n              selectedRepo={this.context.selectedRepo}\n              path={this.props.match.path as any} // Paths.namespaceByRepo or Paths.myCollectionsByRepo\n              pathParams={{ namespace: namespace.name }}\n            />\n          }\n          filters={\n            tab.toLowerCase() === 'collections' ? (\n              <div className='toolbar-wrapper namespace-detail'>\n                <div className='toolbar'>\n                  <CollectionFilter\n                    ignoredParams={ignoredParams}\n                    params={params}\n                    updateParams={updateParams}\n                  />\n\n                  <div className='pagination-container'>\n                    <Pagination\n                      params={params}\n                      updateParams={updateParams}\n                      count={itemCount}\n                      isTop\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : null\n          }\n        ></PartnerHeader>\n        <Main>\n          {tab.toLowerCase() === 'collections' ? (\n            noData ? (\n              <EmptyStateNoData\n                title={t`No collections yet`}\n                description={t`Collections will appear once uploaded`}\n                button={\n                  this.state.showControls && (\n                    <Button\n                      onClick={() => this.setState({ showImportModal: true })}\n                    >\n                      {t`Upload collection`}\n                    </Button>\n                  )\n                }\n              />\n            ) : (\n              <section className='body'>\n                <CollectionList\n                  updateParams={updateParams}\n                  params={params}\n                  ignoredParams={ignoredParams}\n                  collections={collections}\n                  itemCount={itemCount}\n                  showControls={this.state.showControls}\n                  handleControlClick={(id, action) =>\n                    this.handleCollectionAction(id, action)\n                  }\n                  repo={this.context.selectedRepo}\n                />\n              </section>\n            )\n          ) : null}\n          {tab.toLowerCase() === 'cli-configuration' ? (\n            <section className='body'>\n              <div>\n                <div>\n                  <Trans>\n                    <b>Note:</b> Use this URL to configure ansible-galaxy to\n                    upload collections to this namespace. More information on\n                    ansible-galaxy configurations can be found{' '}\n                    <a\n                      href='https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#configuring-the-ansible-galaxy-client'\n                      target='_blank'\n                    >\n                      here\n                    </a>\n                    <span>&nbsp;</span>\n                    <ExternalLinkAltIcon />.\n                  </Trans>\n                </div>\n                <ClipboardCopy isReadOnly>{repositoryUrl}</ClipboardCopy>\n              </div>\n            </section>\n          ) : null}\n          {tab.toLowerCase() === 'resources'\n            ? this.renderResources(namespace)\n            : null}\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private handleCollectionAction(id, action) {\n    const collection = this.state.collections.find((x) => x.id === id);\n\n    switch (action) {\n      case 'upload':\n        this.setState({\n          updateCollection: collection,\n          showImportModal: true,\n        });\n        break;\n      case 'deprecate':\n        CollectionAPI.setDeprecation(\n          collection,\n          !collection.deprecated,\n          this.context.selectedRepo,\n        )\n          .then(() => this.loadCollections())\n          .catch((error) => {\n            this.setState({\n              warning: t`API Error: Failed to set deprecation.`,\n            });\n          });\n        break;\n    }\n  }\n\n  private renderResources(namespace: NamespaceType) {\n    return (\n      <div className='pf-c-content preview'>\n        <ReactMarkdown>{namespace.resources}</ReactMarkdown>\n      </div>\n    );\n  }\n\n  private loadCollections() {\n    CollectionAPI.list(\n      {\n        ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n      },\n      this.context.selectedRepo,\n    ).then((result) => {\n      this.setState({\n        collections: result.data.data,\n        itemCount: result.data.meta.count,\n      });\n    });\n  }\n\n  private loadAll() {\n    Promise.all([\n      CollectionAPI.list(\n        {\n          ...ParamHelper.getReduced(this.state.params, this.nonAPIParams),\n        },\n        this.context.selectedRepo,\n      ),\n      NamespaceAPI.get(this.props.match.params['namespace']),\n      MyNamespaceAPI.get(this.props.match.params['namespace']).catch((e) => {\n        // TODO this needs fixing on backend to return nothing in these cases with 200 status\n        // if view only mode is enabled disregard errors and hope\n        if (\n          this.context.user.is_anonymous &&\n          this.context.settings.GALAXY_ENABLE_UNAUTHENTICATED_COLLECTION_ACCESS\n        ) {\n          return null;\n        }\n        // expecting 404 - it just means we can not edit the namespace (unless both NamespaceAPI and MyNamespaceAPI fail)\n        return e.response && e.response.status === 404\n          ? null\n          : Promise.reject(e);\n      }),\n    ])\n      .then((val) => {\n        this.setState({\n          collections: val[0].data.data,\n          itemCount: val[0].data.meta.count,\n          namespace: val[1].data,\n          showControls: !!val[2],\n        });\n\n        this.loadAllRepos(val[0].data.meta.count);\n      })\n      .catch((response) => {\n        this.setState({ redirect: Paths.notFound });\n      });\n  }\n\n  private loadAllRepos(currentRepoCount) {\n    // get collections in namespace from each repo\n    // except the one we already have\n    const repoPromises = Object.keys(Constants.REPOSITORYNAMES)\n      .filter((repo) => repo !== this.context.selectedRepo)\n      .map((repo) =>\n        CollectionAPI.list(\n          { namespace: this.props.match.params['namespace'] },\n          repo,\n        ),\n      );\n\n    Promise.all(repoPromises)\n      .then((results) =>\n        this.setState({\n          isNamespaceEmpty:\n            results.every((val) => val.data.meta.count === 0) &&\n            currentRepoCount === 0,\n        }),\n      )\n      .catch((err) =>\n        this.setState({\n          alerts: [\n            ...this.state.alerts,\n            {\n              variant: 'danger',\n              title: t`Error loading collection repositories.`,\n              description: err?.message,\n            },\n          ],\n        }),\n      );\n  }\n\n  private get updateParams() {\n    return ParamHelper.updateParamsMixin(this.nonQueryStringParams);\n  }\n\n  private renderPageControls() {\n    const { collections } = this.state;\n    const dropdownItems = [\n      <DropdownItem\n        key='1'\n        component={\n          <Link\n            to={formatPath(Paths.editNamespace, {\n              namespace: this.state.namespace.name,\n            })}\n          >\n            {t`Edit namespace`}\n          </Link>\n        }\n      />,\n      this.context.user.model_permissions.delete_namespace && (\n        <React.Fragment key={'2'}>\n          {this.state.isNamespaceEmpty ? (\n            <DropdownItem\n              onClick={() => this.setState({ isOpenNamespaceModal: true })}\n            >\n              {t`Delete namespace`}\n            </DropdownItem>\n          ) : (\n            <Tooltip\n              isVisible={false}\n              content={\n                <Trans>\n                  Cannot delete namespace until <br />\n                  collections' dependencies have <br />\n                  been deleted\n                </Trans>\n              }\n              position='left'\n            >\n              <DropdownItem isDisabled>{t`Delete namespace`}</DropdownItem>\n            </Tooltip>\n          )}\n        </React.Fragment>\n      ),\n      <DropdownItem\n        key='3'\n        component={\n          <Link\n            to={formatPath(\n              Paths.myImports,\n              {},\n              {\n                namespace: this.state.namespace.name,\n              },\n            )}\n          >\n            {t`Imports`}\n          </Link>\n        }\n      />,\n    ].filter(Boolean);\n    if (!this.state.showControls) {\n      return <div className='namespace-page-controls'></div>;\n    }\n    return (\n      <div className='namespace-page-controls' data-cy='kebab-toggle'>\n        {' '}\n        {collections.length !== 0 && (\n          <Button onClick={() => this.setState({ showImportModal: true })}>\n            {t`Upload collection`}\n          </Button>\n        )}\n        {dropdownItems.length > 0 && <StatefulDropdown items={dropdownItems} />}\n      </div>\n    );\n  }\n\n  private toggleImportModal(isOpen: boolean, warning?: string) {\n    const newState = { showImportModal: isOpen };\n    if (warning) {\n      newState['warning'] = warning;\n    }\n\n    if (!isOpen) {\n      newState['updateCollection'] = null;\n    }\n\n    this.setState(newState);\n  }\n\n  private deleteNamespace = () => {\n    this.setState({ isNamespacePending: true }, () =>\n      NamespaceAPI.delete(this.state.namespace.name)\n        .then(() => {\n          this.setState({\n            redirect: formatPath(Paths.namespaces, {}),\n            confirmDelete: false,\n            isNamespacePending: false,\n          });\n          this.context.setAlerts([\n            ...this.context.alerts,\n            {\n              variant: 'success',\n              title: t`Successfully deleted namespace.`,\n            },\n          ]);\n        })\n        .catch((e) => {\n          this.setState(\n            {\n              isOpenNamespaceModal: false,\n              confirmDelete: false,\n              isNamespacePending: false,\n            },\n            () =>\n              this.setState({\n                alerts: [\n                  ...this.state.alerts,\n                  {\n                    variant: 'danger',\n                    title: t`Error deleting namespace.`,\n                    description: e?.message,\n                  },\n                ],\n              }),\n          );\n        }),\n    );\n  };\n\n  private closeModal = () => {\n    this.setState({ isOpenNamespaceModal: false, confirmDelete: false });\n  };\n\n  get closeAlert() {\n    return closeAlertMixin('alerts');\n  }\n}\n\nNamespaceDetail.contextType = AppContext;\n\nexport default withRouter(NamespaceDetail);\n"],"names":["EditNamespace","props","params","ParamHelper","location","search","state","loading","alerts","namespace","userId","newLinkURL","newLinkName","errorMessages","saving","redirect","unsavedData","unauthorized","this","setState","ActiveUserAPI","then","result","account_number","loadNamespace","e","formatPath","Paths","match","repo","context","selectedRepo","setAlerts","variant","title","description","message","tabs","id","name","Redirect","push","to","breadcrumbs","namespaceBreadcrumb","url","updateParams","p","closeAlert","i","className","tab","toLowerCase","updateNamespace","Form","ActionGroup","Button","onClick","saveNamespace","cancel","Spinner","style","color","MyNamespaceAPI","response","data","links","setLinks","link","error","status","mapErrorMessages","concat","closeAlertMixin","React","contextType","AppContext","withRouter","Status","ImportModal","file","undefined","errors","uploadProgress","uploadStatus","waiting","isOpen","collection","Modal","onClose","handleClose","actions","key","saveFile","isDisabled","canUpload","disabled","type","onChange","handleFileUpload","target","files","htmlFor","renderFileIcon","width","uploading","newCollection","length","acceptedFileTypes","includes","COLLECTION_NAME_REGEX","test","split","artifact","sha256","cancelToken","CollectionAPI","loaded","total","onUploadSuccess","errorMessage","axios","messages","err","detail","code","join","msg","setOpen","NamespaceDetail","isNamespacePending","NamespaceAPI","confirmDelete","isOpenNamespaceModal","collections","itemCount","showImportModal","warning","updateCollection","showControls","isNamespaceEmpty","loadAll","resources","repositoryUrl","getRepoUrl","noData","filterIsSet","loadCollections","ignoredParams","warn","toggleImportModal","spinner","cancelAction","closeModal","confirmAction","deleteNamespace","confirmButtonTitle","Text","Checkbox","isChecked","val","label","Alert","actionClose","AlertActionCloseButton","pageControls","renderPageControls","contextSelector","path","pathParams","filters","count","isTop","button","handleControlClick","action","handleCollectionAction","href","isReadOnly","renderResources","find","x","deprecated","nonAPIParams","meta","Promise","all","user","is_anonymous","settings","GALAXY_ENABLE_UNAUTHENTICATED_COLLECTION_ACCESS","reject","loadAllRepos","currentRepoCount","repoPromises","Object","keys","Constants","filter","map","results","every","nonQueryStringParams","dropdownItems","DropdownItem","component","Link","model_permissions","delete_namespace","Tooltip","isVisible","content","position","Boolean","items","newState"],"sourceRoot":""}